<?php

/**
 * @file
 * Install, update and uninstall functions for the password_policy module.
 */

use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
use Drupal\Core\Language\LanguageInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_install().
 */
function password_policy_install() {
  // Give precedence to modules like prlp or simple_pass_reset.
  module_set_weight('password_policy', 10);

  // Set user password reset timestamp to now.
  $timestamp = \Drupal::service("date.formatter")->format(\Drupal::time()->getRequestTime(), "custom", DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
  \Drupal::state()->set('password_policy.install_time', $timestamp);

  // Rebuild user entity form display for new fields.
  $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $user_form_display */
  $user_form_display = $storage->load('user.user.default');
  if (!$user_form_display) {
    $user_form_display = $storage->create([
      'targetEntityType' => 'user',
      'bundle' => 'user',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }
  $user_form_display
    ->setComponent('field_last_password_reset', [
      'type' => 'datetime_default',
      // Display before contact standard profile field.
      'weight' => 4,
      'settings' => [],
    ])
    ->setComponent('field_password_expiration', [
      'type' => 'boolean_checkbox',
      'weight' => 3,
      'settings' => ['display_label' => TRUE],
    ])
    ->save();
}

/**
 * Implements hook_uninstall().
 */
function password_policy_uninstall() {
  \Drupal::state()->delete('password_policy.install_time');
}

/**
 * Add cron threshold to prevent memory overloads.
 */
function password_policy_update_8201() {
  $config = \Drupal::service('config.factory')->getEditable('password_policy.settings');

  // Set and save new message value.
  $config->set('cron_threshold', '250')->save();
}

/**
 * Modify module weight so that it runs after others.
 */
function password_policy_update_8301() {
  module_set_weight('password_policy', 10);
}

/**
 * Create and initialize `password_expire_sent` field.
 */
function password_policy_update_8302(&$sandbox) {
  $db_connection = \Drupal::database();
  if (!isset($sandbox['progress'])) {
    /** @var \Drupal\Core\Config\ConfigInstallerInterface $configInstaller */
    $configInstaller = \Drupal::service('config.installer');
    $configInstaller->installDefaultConfig('module', 'password_policy');

    $sandbox['progress'] = 0;
    $sandbox['max'] = $db_connection->query('SELECT COUNT(uid) FROM {users}')->fetchField();
    $sandbox['current_user'] = -1;
  }

  // Run user updates in batches of 50. This is not much when using direct
  // queries, but that's still plenty fast. It is plenty for updates through the
  // entity API.
  $limit = 50;

  // Retrieve the next group of uids.
  $query = $db_connection->select('users', 'u');
  $query->fields('u', ['uid']);
  $result = $query
    ->where('u.uid > :uid', [':uid' => $sandbox['current_user']])
    ->range(0, $limit)
    ->orderBy('u.uid', 'ASC')
    ->execute();

  $userStorage = \Drupal::entityTypeManager()->getStorage('user');

  // CHeck of the user storage is SQL based. If so, use optimized update method.
  if ($userStorage instanceof SqlContentEntityStorage) {
    $query = $db_connection->insert('user__field_pending_expire_sent')
      ->fields([
        'bundle',
        'deleted',
        'entity_id',
        'revision_id',
        'langcode',
        'delta',
        'field_pending_expire_sent_value',
      ]);

    foreach ($result as $row) {
      $sandbox['progress']++;
      $query->values([
        'bundle' => 'user',
        'deleted' => 0,
        'entity_id' => $row->uid,
        'revision_id' => $row->uid,
        'langcode' => LanguageInterface::LANGCODE_DEFAULT,
        'delta' => 0,
        'field_pending_expire_sent_value' => '0',
      ]);

      // Update our progress information.
      $sandbox['current_user'] = $row->uid;
    }

    $query->execute();
  }
  else {
    foreach ($result as $row) {
      $user = $userStorage->load($row->uid);
      $sandbox['progress']++;
      if ($user->getAccountName() == NULL) {
        continue;
      }
      $user
        ->set('field_pending_expire_sent', '0')
        ->save();

      // Update our progress information.
      $sandbox['current_user'] = $row->uid;
    }
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

  return t('The Password Policy module has updated user accounts. Total update count: @count', ['@count' => $sandbox['progress']]);
}

/**
 * Update the field_password_expiration field description.
 */
function password_policy_update_8303() {
  $fieldConfig = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->load('user.user.field_password_expiration');

  $fieldConfig->setDescription('Control whether the user must reset their password. If the password has expired, this field is automatically checked after the execution of Cron.');
  $fieldConfig->save();
}

/**
 * Remove duplicate rows in the password_policy_history table.
 */
function password_policy_update_8304() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('password_policy_history')) {
    $table_name = 'password_policy_history';
    $query = \Drupal::database()->query('DELETE t1 FROM {' . $table_name . '} t1 INNER JOIN {' . $table_name . '} t2 WHERE t1.id < t2.id AND t1.pass_hash = t2.pass_hash AND t1.timestamp = t2.timestamp');
    $query->execute();
  }
}
