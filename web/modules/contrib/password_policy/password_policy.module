<?php

/**
 * @file
 * Module file for the Password Policy module.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\password_policy\Entity\PasswordPolicy;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function password_policy_theme($existing, $type, $theme, $path) {
  return [
    'password_policy_status' => [
      'variables' => [
        'constraints' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for the password policy status.
 *
 * @param array $variables
 *   An associative array containing:
 *   - constraints: An associative array containing the constraint data.
 *   - constraints_table: Themed constraints using the table theme hook.
 */
function template_preprocess_password_policy_status(array &$variables) {
  $table_data = [];

  if (!empty($variables['constraints'])) {
    foreach ($variables['constraints'] as $constraint) {
      $table_data[] = [
        'data' => [
          $constraint['data']['policy'],
          $constraint['data']['status'],
          $constraint['data']['constraint'],
        ],
        'class' => $constraint['class'],
      ];
    }
  }

  $variables['constraints_table'] = [
    '#theme' => 'table',
    '#header' => [t('Policy'), t('Status'), t('Constraint')],
    '#empty' => t('There are no constraints for the selected user roles'),
    '#rows' => $table_data,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function password_policy_form_user_form_alter(&$form, FormStateInterface $form_state) {

  // Hide password reset field if no access.
  $account = \Drupal::currentUser();
  if (!$account->hasPermission('manage password reset')) {
    $form['field_last_password_reset']['#access'] = FALSE;
    $form['field_password_expiration']['#access'] = FALSE;
    $form['field_pending_expire_sent']['#access'] = FALSE;
  }

  // Load form if relevant.
  if (\Drupal::service('password_policy.validation_manager')->tableShouldBeVisible()) {
    $form['account']['password_policy_status'] = [
      '#theme' => 'password_policy_status',
      '#prefix' => '<div id="password-policy-status">',
      '#suffix' => '</div>',
      '#constraints' => \Drupal::service('password_policy.validator')
        ->buildPasswordPolicyConstraintsTableRows(
          $form_state->getValue('pass', ''),
          $form_state->getFormObject()->getEntity(),
          _password_policy_get_edited_user_roles($form, $form_state)
      ),
      '#weight' => 4,
    ];

    // Set ajax changes.
    $form['account']['roles']['#ajax'] = [
      'event' => 'change',
      'callback' => '_password_policy_check_constraints',
      'method' => 'replace',
      'wrapper' => 'password-policy-status',
    ];
  }

  if (\Drupal::service('password_policy.validation_manager')->validationShouldRun()) {
    $form['#validate'][] = '_password_policy_user_profile_form_validate';
    $form['#after_build'][] = '_password_policy_user_profile_form_after_build';
  }

  // Add validation handler for field updates.
  $form['#validate'][] = '_password_policy_user_profile_form_update_fields';
}

/**
 * Implements hook_element_info_alter().
 */
function password_policy_element_info_alter(array &$types) {
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'password_policy_check_constraints_password_confirm_process';
  }
}

/**
 * Custom callback to update the password confirm element.
 *
 * @param array $element
 *   Form element of the password confirm form field.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param array $form
 *   The form array.
 *
 * @return mixed
 *   Updated form field element.
 */
function password_policy_check_constraints_password_confirm_process(array $element, FormStateInterface $form_state, array $form) {
  $form_object = $form_state->getFormObject();

  if (method_exists($form_object, 'getEntity') && $form_object->getEntity() instanceof UserInterface) {
    if (\Drupal::service('password_policy.validation_manager')->tableShouldBeVisible()) {
      $element['pass1']['#ajax'] = [
        'event' => 'change',
        'callback' => '_password_policy_check_constraints',
        'method' => 'replace',
        'wrapper' => 'password-policy-status',
        'disable-refocus' => TRUE,
      ];
    }
  }

  return $element;
}

/**
 * After build callback for the user profile form.
 *
 * Hides the password policy status when the password field is not visible. Some
 * modules will hide the password field if the user is authenticated through an
 * external service rather than through Drupal. In this situation the password
 * policy status is not applicable.
 *
 * @param mixed $form
 *   Form definition for the user profile form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state of the user profile form.
 *
 * @return array
 *   The updated form.
 */
function _password_policy_user_profile_form_after_build($form, FormStateInterface &$form_state) {
  $password_invisible = empty($form['account']['pass']) || (isset($form['account']['pass']['#access']) ? !$form['account']['pass']['#access'] : FALSE);

  if ($password_invisible && isset($form['account']['password_policy_status'])) {
    $form['account']['password_policy_status']['#access'] = FALSE;
  }

  return $form;
}

/**
 * Check if password policies failed.
 *
 * @param mixed $form
 *   Form definition for the user profile form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state of the user profile form.
 */
function _password_policy_user_profile_form_validate(&$form, FormStateInterface $form_state) {
  // When user email verification is enabled Drupal doesn't allow setting
  // password on registration. The Drupal generated password will not always
  // meet the applicable policies in place. In that scenario the password
  // validation should be skipped. The user will have to set a password
  // after clicking the one-time login link instead.
  if ($form['#form_id'] === 'user_register_form' && !isset($form['account']['pass']) && \Drupal::config('user.settings')->get('verify_mail')) {
    return;
  }

  // Check if user is authenticated externally.
  if (\Drupal::moduleHandler()->moduleExists('externalauth')) {
    $authmap = \Drupal::service('externalauth.authmap');
    $account = $form_state->getFormObject()->getEntity();
    $external_ids = $authmap->getAll($account->id());
    if ($external_ids) {
      return;
    }
  }

  $expiration = $form_state->getValue('field_password_expiration');
  if (!is_null($expiration) && $expiration['value'] === FALSE) {
    $form_state->setValue('field_password_expiration', ['value' => 0]);
  }

  // When editing a user to change something other than the password (pass
  // is empty), skip the password validation as Drupal core does.
  if ($form['#form_id'] == 'user_form' && empty($form_state->getValue('pass'))) {
    return;
  }
  $roles = _password_policy_get_edited_user_roles($form, $form_state);

  $user = $form_state->getFormObject()->getEntity();
  $user->setUsername($form_state->getValue('name', ''));
  /** @var \Drupal\password_policy\PasswordPolicyValidationReport $validationReport */
  $validationReport = \Drupal::service('password_policy.validator')->validatePassword(
    $form_state->getValue('pass', ''),
    $user,
    $roles
  );

  if ($validationReport->isInvalid()) {
    $form_state->setErrorByName('pass', t('The password does not satisfy the password policies.'));
    $form_state->setError($form, $validationReport->getErrors());
  }
}

/**
 * Gets the edited user roles for the given form.
 */
function _password_policy_get_edited_user_roles(&$form, FormStateInterface $form_state) {
  $roles = $form_state->getValue('roles');
  if (empty($roles)) {
    // Get if from $form; form state is always empty the first time.
    $roles = $form['account']['roles']['#default_value'];
  }
  $roles = (is_array($roles)) ? array_combine($roles, $roles) : [$roles];

  // Add user doesn't automatically register authenticated, so lets add it.
  if (empty($roles)) {
    $roles = ['authenticated' => 'authenticated'];
  }
  return $roles;
}

/**
 * Update Password Policy's fields during user profile form validation.
 *
 * If this form submission includes a password change, update Password Policy's
 * fields to record the change datetime and set the password as not expired.
 * This must be done in a validation handler (as opposed to submit handler) in
 * order to support changing the fields values before any submit hooks are run.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function _password_policy_user_profile_form_update_fields(array &$form, FormStateInterface $form_state) {
  // Only execute on submission (i.e. not for AJAX operations).
  if (!$form_state->isSubmitted()) {
    return;
  }
  // Get current and new password values.
  $current_pass = $form_state->getValue('current_pass');
  $new_pass = $form_state->getValue('pass');

  // Get User ID from User object.
  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getFormObject()->getEntity();
  $uid = $user->id();

  // Update if both current and new password fields are filled out. Depending
  // on policy settings, user may be allowed to use same password again.
  if ($uid && ($current_pass || $form_state->get('user_pass_reset')) && $new_pass) {
    $date = \Drupal::service('date.formatter')->format(\Drupal::time()->getRequestTime(), 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
    $form_state->setValue(
      'field_last_password_reset',
      [['value' => $date]]
    );
    $form_state->setValue('field_password_expiration', ['value' => '0']);
    $form_state->setValue('field_pending_expire_sent', ['value' => '0']);
  }
}

/**
 * {@inheritdoc}
 */
function password_policy_user_presave(EntityInterface $entity) {

  if (!$entity->id()) {
    $date = \Drupal::service('date.formatter')->format(\Drupal::time()->getRequestTime(), 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
    $entity->set('field_last_password_reset', $date);
    $entity->set('field_password_expiration', '0');
    $entity->set('field_pending_expire_sent', '0');
  }
}

/**
 * AJAX callback for user form.
 */
function _password_policy_check_constraints($form, $form_state) {
  return $form['account']['password_policy_status'];
}

/**
 * Implements hook_cron().
 *
 * Looks for expired passwords and updates the expiration based on the policy
 * assigned.
 */
function password_policy_cron() {
  // Load each policy.
  $policies = \Drupal::entityTypeManager()->getStorage('password_policy')->loadMultiple();
  $current_time = \Drupal::time()->getRequestTime();

  /** @var \Drupal\password_policy\Entity\PasswordPolicy $policy */
  foreach ($policies as $policy) {
    // Check each policy configured w/ a password expiration > than 0 days.
    if ($policy->getPasswordReset() > 0) {
      // Load user roles for policy.
      $policy_roles = $policy->getRoles();

      if (empty($policy_roles)) {
        continue;
      }

      // Determine date user accounts expired.
      $expire_timestamp = strtotime('-' . $policy->getPasswordReset() . ' days', $current_time);
      $expire_date = \Drupal::service('date.formatter')->format($expire_timestamp, 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);

      // Configurable limit to users per policy per run, to prevent OOM errors.
      $threshold = \Drupal::config('password_policy.settings')->get('cron_threshold');
      // Do not continue with User query if the policy's expire date is less
      // than the install time of the module itself. This prevents the policy
      // from immediately applying to all users after initial module install.
      $install_time = \Drupal::state()->get('password_policy.install_time');
      if ($install_time && $install_time >= $expire_date) {
        $users = [];
      }
      // Get list of users based on conditionals from above.
      else {
        // Limit to active users.
        $query = \Drupal::entityQuery('user')
          ->accessCheck(TRUE)
          ->condition('status', 1);

        // Limit to roles set by policy configuration.
        if (!in_array(AccountInterface::AUTHENTICATED_ROLE, $policy_roles)) {
          $query->condition('roles', $policy_roles, 'IN');
        }

        // Create condition groups for users with no value for the
        // `field_password_expiration` and `field_last_password_reset` fields.
        // This will be _all users_ after initial module installation.
        $notset_group = $query
          ->andConditionGroup()
          ->condition('field_password_expiration', NULL, 'IS NULL')
          ->condition('field_last_password_reset', NULL, 'IS NULL');

        // Add condition group for users with a `field_password_expiration`
        // value and `field_last_password_reset` value less than or equal the
        // current expire date for the policy.
        $isset_group = $query
          ->andConditionGroup()
          ->condition('field_password_expiration', 0)
          ->condition('field_last_password_reset', $expire_date, '<=');

        // Combine and add groups to query.
        $combined_group = $query
          ->orConditionGroup()
          ->condition($notset_group)
          ->condition($isset_group);
        $query->condition($combined_group);

        // Limit the number of results to the cron threshold setting.
        $query->condition('uid', 0, '>')
          ->range(0, $threshold);

        $valid_list = $query->execute();

        // Check for externally authenticated users.
        if (\Drupal::moduleHandler()->moduleExists('externalauth')) {
          $authmap = \Drupal::service('externalauth.authmap');
          foreach ($valid_list as $key => $uid) {
            $external_ids = $authmap->getAll($uid);
            if ($external_ids) {
              // Exclude externally authenticated users.
              unset($valid_list[$key]);
            }
          }
        }

        // Load User Objects.
        $users = \Drupal::entityTypeManager()
          ->getStorage('user')
          ->loadMultiple($valid_list);
      }

      // Expire passwords.
      /** @var \Drupal\user\UserInterface $user */
      foreach ($users as $user) {
        $user->set('field_password_expiration', '1');
        $user->set('field_pending_expire_sent', '0');
        $user->save();

        if ($policy->getPasswordResetEmailValue()) {
          // Send email notification if configured.
          $mailManager = Drupal::service('plugin.manager.mail');
          $module = 'password_policy';
          $key = 'reset_password';
          $to = $user->getEmail();
          $link = Url::fromRoute('user.login', [], ['absolute' => TRUE])->toString();
          $params['message'] = t('Your password has expired. Please visit the following link to reset your password: :link',
            [':link' => $link]);
          $langcode = $user->getPreferredLangcode();
          $send = TRUE;
          $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
        }

      }

      $pending_days = $policy->getPasswordPendingValue();
      sort($pending_days);
      if ($policy->getPasswordResetEmailValue() && $pending_days) {
        foreach ($pending_days as $pending_day) {
          // Find users about to expire.
          $delay = $policy->getPasswordReset() - $pending_day;
          $pending_timestamp = strtotime('-' . $delay . ' days', $current_time);
          $pending_date = \Drupal::service('date.formatter')->format($pending_timestamp, 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
          $query = \Drupal::entityQuery('user')
            ->accessCheck(TRUE)
            ->condition('status', 1)
            ->condition('field_password_expiration', 0)
            ->condition('field_last_password_reset', $pending_date, '<=')
            ->condition('uid', 0, '>')
            ->range(0, $threshold);

          // We want to send notifications only for customers that have not
          // yet received the notification for this period, or not received
          // any notification.
          $fieldPendingExpireSentCondition = $query->orConditionGroup();
          $fieldPendingExpireSentCondition
            ->condition('field_pending_expire_sent', NULL, 'IS')
            ->condition('field_pending_expire_sent', 0, '=')
            ->condition('field_pending_expire_sent', $pending_day, '>');

          $query->condition($fieldPendingExpireSentCondition);

          if (!in_array(AccountInterface::AUTHENTICATED_ROLE, $policy_roles)) {
            $query->condition('roles', $policy_roles, 'IN');
          }

          $pending_list = $query->execute();
          $users = \Drupal::entityTypeManager()
            ->getStorage('user')
            ->loadMultiple($pending_list);

          foreach ($users as $user) {
            $user->set('field_pending_expire_sent', $pending_day);
            $user->save();

            // Send pending expiration email.
            $mailManager = Drupal::service('plugin.manager.mail');
            $module = 'password_policy';
            $key = 'pending_password';
            $to = $user->getEmail();
            $link = Url::fromRoute('user.login', [], ['absolute' => TRUE])->toString();
            $params['message'] = t('Your password will expire in less than :pending days. Please visit the following link to reset your password: :link',
              [':link' => $link, ':pending' => $pending_day]);
            $langcode = $user->getPreferredLangcode();
            $send = TRUE;
            $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function password_policy_mail($key, &$message, $params) {
  switch ($key) {
    case 'reset_password':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('You need to reset your password.');
      $message['body'][] = $params['message'];
      break;

    case 'pending_password':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Your password will expire soon.');
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Menu argument loader. Returns a password policy entity.
 *
 * @param string $id
 *   ID of the password policy entity.
 *
 * @return \Drupal\Core\Entity\EntityInterface
 *   Returns a password policy object.
 */
function password_policy_load($id) {
  return PasswordPolicy::load($id);
}

/**
 * Implements hook_help().
 */
function password_policy_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.password_policy':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()
          ->get('markdown.settings')
          ->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
