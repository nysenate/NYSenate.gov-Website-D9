language: php
os: linux
dist: xenial

services:
  - mysql

env:
  global:
    # Make the script re-usable for other modules.
    - MODULE=scheduler
    # Initialise the real SYMFONY_DEPRECATIONS_HELPER variable.
    - SYMFONY_DEPRECATIONS_HELPER=0
    # Create a default for the allowed deprecations per branch.
    - DEPRECATIONS=0

jobs:
  fast_finish: true
  include:
    - php: 7.2
      env:
        - DRUPAL_CORE=8.9.x
        # Skip Rules because it cannot be installed at 8.x.
        - RULES=NO
        # ---- Remaining self deprecation notices (0)
    - php: 7.3
      env:
        - DRUPAL_CORE=9.1.x
        - RULES=YES
        # --- Remaining self deprecation notices (0)
        # --- Remaining direct deprecation notices (0)
    - php: 7.4
      env:
        - DRUPAL_CORE=9.5.x
        # Skip Rules testing in this run.
        - RULES=NO
        # --- Remaining self deprecation notices (0)
        # --- Remaining direct deprecation notices (0)

    - php: 8.1
      env:
        - DRUPAL_CORE=10.0.x
        - RULES=YES
        # ---- Remaining self deprecation notices (4)
        #    2 Behat\Mink\Element\ElementInterface::getText() might add "string"
        #    2 Behat\Mink\Element\ElementInterface::waitFor() might add "mixed"
        # ---- Remaining direct deprecation notices (3)
        #    1 PHPUnit\TextUI\DefaultResultPrinter class is considered internal
        #    1 DrupalListener implements "PHPUnit\Framework\TestListener
        #    1 DrupalListener uses "PHPUnit\Framework\TestListenerDefaultImplementation"
        # ---- Other deprecation notices (1)
        #    1 PHPUnit\Framework\TestCase::addWarning() method is considered internal
        - DEPRECATIONS=8

# Be sure to cache composer downloads.
cache:
  directories:
    - $HOME/.composer

before_script:
  # At job start-up Composer is installed at 1.8.4 then self-update is run. From
  # 24 October 2020 this bumped the version to Composer 2.
  - composer --version
  - echo $MODULE

  # Remove Xdebug as we don't need it and it causes
  # PHP Fatal error:  Maximum function nesting level of '256' reached.
  # We also don't care if that file exists or not on PHP 7.
  - phpenv config-rm xdebug.ini || true

  # Navigate out of module directory to prevent blown stack by recursive module
  # lookup.
  - cd ..

  # Create database.
  - mysql -e "create database $MODULE"
  # Export database variable for kernel tests.
  - export SIMPLETEST_DB=mysql://root:@127.0.0.1/$MODULE

  # Download Drupal core from the Github mirror because it is faster.
  - travis_retry git clone --branch $DRUPAL_CORE --depth 1 https://github.com/drupal/drupal.git
  - cd drupal
  # Store the path to Drupal root.
  - DRUPAL_ROOT=$(pwd)
  - echo $DRUPAL_ROOT

  # Make a directory for our module and copy the built source into it.
  - mkdir $DRUPAL_ROOT/modules/$MODULE
  - cp -R $TRAVIS_BUILD_DIR/* $DRUPAL_ROOT/modules/$MODULE/

  # Install Composer and allow composer plugins.
  - travis_retry composer install
  - |
    if [[ $DRUPAL_CORE =~ ^(8|9\.0|9\.1) ]]; then
      composer config --no-plugins allow-plugins.composer/installers true
      composer config --no-plugins allow-plugins.drupal/core-project-message true
      composer config --no-plugins allow-plugins.drupal/core-vendor-hardening true
    fi

  # Install the testing dependencies via Composer.
  - travis_retry composer require drupal/devel
  - travis_retry composer require drush/drush
  - # Need to get Rules dev because 3.0.0-alpha7 has deprecation warnings.
  - if [ "$RULES" == "YES" ]; then travis_retry composer require drupal/rules:"3.x-dev"; fi
  # Use * to allow any compatible version, not the latest version.
  - travis_retry composer require drupal/workbench_moderation:*
  # Use * because only the dev version of WBMA is compatible with D9. None for D10.
  - if [[ $DRUPAL_CORE =~ ^(8|9) ]]; then travis_retry composer require drupal/workbench_moderation_actions:*; fi

  # Coder is already installed as part of composer install. We just need to set
  # the installed_paths to pick up the Drupal standards. This is only for Coder
  # up to version 8.3.13. From 8.3.14 onwards this is done at install time.
  - |
    if [[ "$DRUPAL_CORE" == "8.9.x" || "$DRUPAL_CORE" == "9.2.x" || "$DRUPAL_CORE" == "9.3.x" ]]; then
      $DRUPAL_ROOT/vendor/bin/phpcs --config-set installed_paths $DRUPAL_ROOT/vendor/drupal/coder/coder_sniffer
    fi

  # Start a web server on port 8888, run in the background.
  - php -S localhost:8888 &

  # Export web server URL for browser tests.
  - export SIMPLETEST_BASE_URL=http://localhost:8888

  # Get the allowed number of deprecation warnings.
  - SYMFONY_DEPRECATIONS_HELPER=$DEPRECATIONS || $SYMFONY_DEPRECATIONS_HELPER
  - echo $SYMFONY_DEPRECATIONS_HELPER

script:
  # Run the PHPUnit tests, excluding the javascript tests.
  - cd $DRUPAL_ROOT
  - if [ "$RULES" == "YES" ]; then
      ./vendor/bin/phpunit -c ./core/phpunit.xml.dist --debug ./modules/$MODULE/ --exclude-group=scheduler_js;
    else
      ./vendor/bin/phpunit -c ./core/phpunit.xml.dist --debug ./modules/$MODULE/ --exclude-group=scheduler_js --filter '/^(?!.*(rules)).*/i';
    fi

  # Check for coding standards. First show the versions.
  - composer config --no-plugins allow-plugins.composer/installers true
  - composer config --no-plugins allow-plugins.drupal/core-project-message true
  - composer config --no-plugins allow-plugins.drupal/core-vendor-hardening true
  - composer show drupal/coder | egrep 'name |vers'
  - composer show squizlabs/php_codesniffer | egrep 'name |vers'
  - $DRUPAL_ROOT/vendor/bin/phpcs --version
  - $DRUPAL_ROOT/vendor/bin/phpcs --config-show installed_paths

  # Change into $MODULE directory to avoid having to add --standard=$DRUPAL_ROOT/modules/$MODULE/phpcs.xml.dist
  - cd $DRUPAL_ROOT/modules/$MODULE

  # List the standards and the sniffs that are used.
  - $DRUPAL_ROOT/vendor/bin/phpcs -i
  - $DRUPAL_ROOT/vendor/bin/phpcs -e

  # Show the violations in detail, plus summary and source report.
  - $DRUPAL_ROOT/vendor/bin/phpcs . --report-full --report-summary --report-source -s
