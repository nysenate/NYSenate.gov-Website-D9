<?php

/**
 * @file
 * Contains custom code for Access Permissions.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_node_access().
 *
 * Grant access to content on unique content basis.
 */
function nys_access_permissions_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  if (is_object($node) && is_object($account)) {
    $edit_own = 'edit own ' . $node->bundle() . ' content';
    // If user has access to edit own content.
    if ($node->uid->target_id == $account->id() && $account->hasPermission($edit_own)) {
      return AccessResult::neutral();
    }

    // Check if users have same role and permissions to update
    // each other's content.
    if (!empty($node->uid->target_id) && $operation == 'update' && $account->hasPermission('edit same role')) {
      $author = User::load($node->uid->target_id);
      if (array_intersect($account->getRoles(), $author->getRoles())) {
        $edit_same_roles = user_roles(TRUE, 'edit same role');
        foreach ($author->getRoles() as $role) {
          if (in_array($role, $account->getRoles()) && in_array($role, array_keys($edit_same_roles))) {
            return AccessResult::allowed();
          }
        }
      }
    }

    // Allow access to bulk operation's manipulation
    // of data from "/admin/accessible-sitewide".
    $current_path = \Drupal::service('path.current')->getPath();
    $args = explode('/', $current_path);
    if (in_array('frontpage_editor', $account->getRoles()) && $operation == 'update' && !empty($args[0]) && $args[0] == 'batch') {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function nys_access_permissions_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser()->getRoles();

  if ($form_id == 'node_bill_edit_form') {
    if (!in_array("administrator", $user)) {
      $form['title']['#disabled'] = 1;
      $form['metatags']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      $form['comment_settings']['#access'] = FALSE;
      $form['author']['#access'] = FALSE;
      $form['options']['#access'] = FALSE;
      foreach ($form as $key => $value) {
        if (strpos($key, 'field_') === 0 && !in_array($key, [
          'field_issues',
          'field_bill_no_issue_tags',
        ]
        )) {
          $form[$key]['#access'] = FALSE;
        }
      }
    }
  }
  if ($form_id == 'node_resolution_edit_form') {
    $form['title']['#disabled'] = 1;
    $form['metatags']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['comment_settings']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
    foreach ($form as $key => $value) {
      if (strpos($key, 'field_') !== FALSE && !in_array($key, [
        'field_issues',
        'field_image_main',
        'field_featured_quote',
        'field_majority_issue_tag',
      ]
      )) {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Prevents MCPs from accessing webform's settings tab.
 */
function nys_access_permissions_menu_local_tasks_alter(&$data, $route_name) {
  $account = \Drupal::currentUser();
  // Fetch the User's roles.
  $user_roles = $account->getRoles();
  $routes = [
    'entity.webform.edit_form',
    'entity.webform.results_submissions',
    'entity.webform.references',
    'entity.webform.canonical',
    'entity.webform.test_form',
  ];
  if (in_array('microsite_content_producer', $user_roles, FALSE) and !in_array('administrator', $user_roles, FALSE)) {
    if (in_array($route_name, $routes)) {
      unset($data['tabs'][0]['entity.webform.settings']);
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 *
 * Prevents MCPs from accessing webform settings operation.
 */
function nys_access_permissions_entity_operation_alter(array &$operations) {
  $account = \Drupal::currentUser();
  // Fetch the User's roles.
  $user_roles = $account->getRoles();
  // Unset settings link.
  if (in_array('microsite_content_producer', $user_roles, FALSE) and !in_array('administrator', $user_roles, FALSE)) {
    unset($operations['settings']);
  }
}
