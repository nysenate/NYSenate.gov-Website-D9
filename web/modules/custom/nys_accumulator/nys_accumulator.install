<?php

/**
 * @file
 * Install file for nys_accumulator module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Url;

/**
 * Implements hook_schema().
 */
function nys_accumulator_schema(): array {
  $schema = [
    'accumulator' => [
      'description' => 'Objects that have been flagged.',
      'fields' => [
        'id' => [
          'description' => 'Unique ID',
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'user_id' => [
          'description' => 'The user ID for whom this action was created.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ],
        'user_is_verified' => [
          'description' => 'Bit flag indicating paths of user verification',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
        ],
        'target_shortname' => [
          'description' => 'The target Senator\'s shortname',
          'type' => 'varchar',
          'length' => '32',
          'not null' => FALSE,
          'default' => '',
        ],
        'target_district' => [
          'description' => 'The target Senator\'s district',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ],
        'user_shortname' => [
          'description' => 'The user\'s Senator\'s shortname',
          'type' => 'varchar',
          'length' => '32',
          'not null' => FALSE,
          'default' => '',
        ],
        'user_district' => [
          'description' => 'The user\'s district',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
        ],
        'msg_type' => [
          'description' => 'The type of message being recorded',
          'type' => 'varchar',
          'length' => '32',
          'not null' => TRUE,
          'default' => 'misc',
        ],
        'msg_action' => [
          'description' => 'The specific action of the message',
          'type' => 'varchar',
          'length' => '32',
          'not null' => FALSE,
          'default' => 'none',
        ],
        'msg_info' => [
          'description' => 'JSON-formatted data specific to the type of message',
          'type' => 'text',
          'not null' => FALSE,
        ],
        'created_at' => [
          'description' => 'When the message was recorded',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => 0,
          'disp-size' => 11,
        ],
      ],
      'primary key' => ['id'],
      'indexes' => [
        'user_district' => ['user_district'],
        'created' => ['created_at'],
        'user_id' => ['user_id'],
      ],
    ],
  ];

  $schema['accumulator_archive'] = $schema['accumulator'];

  return $schema;
}

/**
 * Implements hook_update_N().
 *
 * This update modifies the schema as follows:
 *   - renames field `msg_type` to `event_type`
 *   - renames field `msg_action` to `event_action`
 *   - renames field `msg_info` to `event_data`
 *
 * The changes listed below reference "event_type:event_action".  Data changes
 * are executed on the `accumulator` and `accumulator_archive` tables.
 *   - "account:account created" -> "account:created"
 *   - "profile:account edited" -> "account:edited"
 *   - "petition:questionnaire response" -> "poll:webform"
 *   - "petition:sign" -> "poll:follow"
 *   - "petition:unsign" -> "poll:unfollow"
 */
function nys_accumulator_update_9201(): void {
  // Get the connection.
  $db = Database::getConnection();

  // Which tables are being changed.
  $tables = ['accumulator', 'accumulator_archive'];

  // For the column name changes.  MySQL<5.6, Maria<10.8 do not allow for
  // RENAME COLUMN.  Use the legacy format to ensure compatibility.
  $fields = [
    "msg_type" => "event_type VARCHAR(32) NOT NULL DEFAULT 'misc'",
    "msg_action" => "event_action VARCHAR(32) NULL DEFAULT 'none'",
    "msg_info" => "event_data TEXT NULL DEFAULT NULL",
  ];
  foreach ($tables as $table) {
    $query = "ALTER TABLE $table ";
    foreach ($fields as $orig => $new) {
      $query .= "CHANGE COLUMN $orig $new,";
    }
    $db->query(trim($query, ','));
  }

  // For the data changes.
  $changes = [
    [
      'value' => ['event_action' => 'created'],
      'where' => [
        'event_type' => 'account',
        'event_action' => 'account created',
      ],
    ],
    [
      'value' => ['event_type' => 'account', 'event_action' => 'edited'],
      'where' => [
        'event_type' => 'profile',
        'event_action' => 'account edited',
      ],
    ],
    [
      'value' => ['event_type' => 'poll', 'event_action' => 'follow'],
      'where' => ['event_type' => 'petition', 'event_action' => 'sign'],
    ],
    [
      'value' => ['event_type' => 'poll', 'event_action' => 'unfollow'],
      'where' => ['event_type' => 'petition', 'event_action' => 'unsign'],
    ],
    [
      'value' => ['event_type' => 'poll', 'event_action' => 'webform'],
      'where' => [
        'event_type' => 'petition',
        'event_action' => 'questionnaire response',
      ],
    ],
  ];
  foreach ($tables as $table) {
    foreach ($changes as $change) {
      $query = $db->update($table)->fields($change['value']);
      foreach ($change['where'] as $where_key => $where_val) {
        $query->condition($where_key, $where_val);
      }
      $query->execute();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * As a result of update 9201 (above), the event tracking following a petition
 * failed to find its EventInfoGenerator plugin.  This error was corrected in
 * PR161.  This update will iterate through the existing accumulator records
 * looking for "poll:follow" and "poll:unfollow" events, and attempt to
 * reconstruct their event_info data.
 */
function nys_accumulator_update_9202(): void {
  // Create a reference to the logging channel.
  $logger = \Drupal::logger('nys_accumulator');

  // Instantiate the storage manager.
  try {
    $storage = \Drupal::entityTypeManager()->getStorage('node');
  }
  catch (\Throwable $e) {
    $logger->error('Update 9202 could not access node storage', ['@msg' => $e->getMessage()]);
    exit(1);
  }

  // Instantiate the petition event info generator.
  try {
    /** @var \Drupal\nys_accumulator\Plugin\EventInfoGenerator\PetitionEventInfo $generator */
    $generator = \Drupal::service('nys_accumulator.event_info_generators')
      ->createInstance('poll');
  }
  catch (\Throwable $e) {
    $logger->error('Update 9202 could not create a poll info generator', ['@msg' => $e->getMessage()]);
    exit(1);
  }

  // Query the accumulator for suspected records.
  $db = \Drupal::database();
  $query = $db->select('accumulator', 'a')
    ->fields('a', ['id', 'event_type', 'event_action', 'event_data'])
    ->condition('event_type', 'poll')
    ->condition('event_data', '%event_info%', 'NOT LIKE');
  $rows = $query->execute()->fetchAllAssoc('id');
  $count = 0;

  // Iterate each row, regenerate its info field, and save.
  foreach ($rows as $key => $entry) {
    // Get the event_data contents, decoded from JSON.
    // If there's a problem, report and move on.
    $event = json_decode($entry->event_data);
    if (!$event) {
      $logger->error('Update 9202 could not decode event_data (id=@id)', ['@id' => $key]);
      continue;
    }

    // Act only on records missing the event_info section.
    if (!($event->event_info ?? NULL)) {
      // Resolve a URL from one of three possibilities in request_info.
      $url = $event->request_info->url
        ?? ($event->request_info->referer
          ?? ($event->request_info->get->destination ?? ''));
    }

    // If no URL has been found, log and move on.
    if (!$url) {
      \Drupal::logger('nys_accumulator')
        ->error('Update 9202 failed to find a valid source URL (id=@id)', ['@id' => $key]);
      continue;
    }

    // Match the discovered URL to its route and retrieve the parameters.
    // This forces the URL to an internal format.  Note that the 'destination'
    // option (method 3, above) is a flagging URL, and presents differently
    // than the petition title/stub URLs.
    $url = str_replace('https://www.nysenate.gov', '', $url);
    $params = Url::fromUri('internal:' . $url)->getRouteParameters();
    // Flags uses 'entity_id'.  Node references will use 'node'.
    $nid = $params['node'] ?? ($params['entity_id'] ?? 0);

    // If a valid node is not found, report and move on.
    if (!$nid) {
      \Drupal::logger('nys_accumulator')
        ->error('Update 9202 failed to find a node id (id=@id)', [
          '@id' => $key,
          '@url' => $url,
        ]);
      continue;
    }
    $node = $storage->load($nid);
    if (!(($nid == $node->id()) && ($node->bundle() == 'petition'))) {
      $logger->error('Update 9202 encountered an unexpected entity', [
        '@id' => $key,
        '@detected_url' => $url,
        '@detected_nid' => $nid,
        '@loaded_id' => $node->id(),
        '@loaded_bundle' => $node->bundle(),
      ]);
      continue;
    }

    // Rebuild the event_info and update the record.
    /** @var \Drupal\Core\Entity\ContentEntityBase $node */
    $event->event_info = $generator->build($node);
    $update = $db->update('nys_accumulator')
      ->fields(['event_data' => json_encode($event)])
      ->condition('id', $key)
      ->execute();
    if ($update == 1) {
      $count++;
    }
  }
  $logger->info('Update 9202 updated @count of @max records', [
    '@count' => $count,
    '@max' => count($rows),
  ]);
}
