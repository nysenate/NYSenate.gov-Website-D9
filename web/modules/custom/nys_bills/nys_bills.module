<?php

/**
 * @file
 * Contains custom code for Bills.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\pathauto\PathautoState;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * For bills, prevent path_auto from acting.
 *
 * @see \Drupal\pathauto\PathautoGenerator::updateEntityAlias()
 */
function nys_bills_node_presave(Node $node): void {
  switch ($node->bundle()) {
    case 'resolution':
    case 'bill':
      /* @phpstan-ignore-next-line */
      $node->path->pathauto = PathautoState::SKIP;
      break;

    default:
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * For bill nodes:
 *   - audit all relevant URL aliases,
 *   - clear the versions caches.
 */
function nys_bills_node_update(Node $node): void {
  switch ($node->bundle()) {
    case 'resolution':
    case 'bill':
      \Drupal::service('nys_bill.bills_helper')->validateAliases($node);
      \Drupal::service('nys_bill.bills_helper')->clearBillVersionsCache($node);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * For bill nodes:
 *   - audit all relevant URL aliases,
 *   - clear the versions caches.
 */
function nys_bills_node_insert(Node $node): void {
  switch ($node->bundle()) {
    case 'resolution':
    case 'bill':
      \Drupal::service('nys_bill.bills_helper')->validateAliases($node);
      \Drupal::service('nys_bill.bills_helper')->clearBillVersionsCache($node);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * For bill nodes, clear the versions caches.
 */
function nys_bills_node_delete(Node $node): void {
  switch ($node->bundle()) {
    case 'resolution':
    case 'bill':
      \Drupal::service('nys_bill.bills_helper')->clearBillVersionsCache($node);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_node_view().
 */
function nys_bills_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->bundle() == 'bill' && $view_mode == 'full') {
    // If there's no alias for this bill node, redirect to 404.
    $current_path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')
      ->getAliasByPath($current_path);
    if ($current_path === $alias) {
      throw new NotFoundHttpException();
    }

    // Add settings to javascript that will help with processing vote from
    // Javascript.
    $nys_vote_service = \Drupal::service('nys_bill_vote.bill_vote');
    $vote_options = $nys_vote_service->getOptions();
    $vote_label_options = [];
    foreach (array_keys($vote_options) as $vote_value) {
      $vote_label_options[$vote_value] = $nys_vote_service->getVotedLabel($vote_value);
    }
    $js_settings = [
      'bill_vote' => [
        'bill_entity_id' => $entity->id(),
        'bill_name' => \Drupal::service('nys_bill.bills_helper')->formatTitle($entity),
        'vote_options' => $vote_label_options,
      ],
    ];

    $attached = [];
    $attached['#attached']['js'][] = [
      'type' => 'setting',
      'data' => $js_settings,
    ];
  }
}

/**
 * Implements hook_theme().
 */
function nys_bills_theme($existing, $type, $theme, $path) {
  return [
    'bill_sponsor_assembly' => [
      'variables' => [
        'content' => NULL,
      ],
    ],
    'nys_bills__amendments_block' => [
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}
