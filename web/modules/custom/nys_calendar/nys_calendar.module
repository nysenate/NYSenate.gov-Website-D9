<?php

/**
 * @file
 * Contains custom code for Events and their Microsite Content.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess_page().
 */
function nys_calendar_preprocess_page(&$variables) {
  $entity_queue = \Drupal::routeMatch()->getParameter('entity_queue');
  if (isset($entity_queue) && !empty($entity_queue)) {
    $variables['#attached']['library'][] = 'nys_calendar/nys-admin-theme';
  }
}

/**
 * Implements hook_views_data().
 */
function nys_calendar_views_data() {
  $data['node_field_data']['year_filter'] = [
    'title' => t('Filter on created year'),
    'filter' => [
      'title' => t('Filter on created year'),
      'help' => t('Custom NYS filter based on the node created date.'),
      'group' => t('Content'),
      'field' => 'created',
      'id' => 'year_filter',
      'field_type' => 'datetime',
    ],
  ];
  $data['node__field_ol_session']['year_filter'] = [
    'title' => t('Filter on session year'),
    'filter' => [
      'title' => t('Filter on session year'),
      'help' => t('Custom NYS filter based on the field_ol_session.'),
      'group' => t('Content'),
      'field' => 'field_ol_session_value',
      'id' => 'year_filter',
      'field_type' => 'year_only',
    ],
  ];
  return $data;
}

/**
 * Implements hook_views_query_alter().
 */
function nys_calendar_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($query instanceof Sql) {
    if ($view->id() == 'homepage_events' && $view->current_display == 'block_1') {
      // Fix node__field_date_range join query.
      $table_date_range = $query->getTableInfo('node__field_date_range');
      if (isset($table_date_range['join']->extra[2])) {
        unset($table_date_range['join']->extra[2]);
      }
      // Fix node__field_accessible_sitewide join query.
      $table_accessible_sitewide = $query->getTableInfo('node__field_accessible_sitewide');
      if (isset($table_accessible_sitewide['join']->extra[2])) {
        unset($table_accessible_sitewide['join']->extra[2]);
      }
      // Fix field_accessible_sitewide query condition.
      if ($query->where[1]['conditions'][4]['field'] = 'node__field_accessible_sitewide.field_accessible_sitewide_value') {
        $query->where[1]['conditions'][4] = [
          'field' => 'node__field_accessible_sitewide.field_accessible_sitewide_value IS NULL OR node__field_accessible_sitewide.field_accessible_sitewide_value = 0',
          'value' => [],
          'operator' => 'formula',
        ];
      }
    }
  }
}

/**
 * Get the date ranges to use on calendar page.
 */
function nys_calendar_get_date($range = 'week', $start_date = NULL, $end_date = NULL) {
  if (!$start_date) {
    $start_date = date('Y-m-d', time());
  }
  if (!$end_date) {
    $end_date = date('Y-m-d');
  }

  if ($range == 'week') {
    if (date('l', strtotime($start_date)) == 'Sunday') {
      $start_date = date('Y-m-d', strtotime($start_date));
    }
    else {
      $start_date = date('Y-m-d', strtotime('previous sunday', strtotime($start_date)));
    }

    $end_date = date('Y-m-d', strtotime('next saturday', strtotime($start_date)));
  }
  elseif ($range == 'month') {
    $start_date = date('Y-m-d', strtotime('first day of this month', strtotime($start_date)));
    $end_date = date('Y-m-t', strtotime($start_date));
  }

  return [$start_date, $end_date];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nys_calendar_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  $region = $variables['elements']['#region'];
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (str_starts_with($route_name, 'view.events')) {
    $suggestions[] = 'region__' . $region . '__events';
  }
}

/**
 * Implements hook_token_info().
 */
function nys_calendar_token_info() {
  $info = [];
  $info['tokens']['view'] = [
    'date-filter' => [
      'name' => t('Date filter value'),
      'description' => t('The date the view is being filtered on.'),
    ],
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function nys_calendar_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'view' && isset($tokens['date-filter'])) {
    if (!empty($data['view']) && $data['view'] instanceof \Drupal\views\ViewExecutable) {
      $view = $data['view'];
      if ($view->id() == 'events') {
        switch ($view->current_display) {
          case 'page_2':
            $date_ts = $view->exposed_data['date'] ? strtotime($view->exposed_data['date']) : time();
            $token_str = date('F, Y', $date_ts);
            break;
          case 'page_3':
            $date_ts = $view->exposed_data['date']['min'] ? strtotime($view->exposed_data['date']['min']) : time();
            $token_str = 'Week of ' . date('F j, Y', $date_ts);
            break;
          default:
            $date_ts = $view->exposed_data['date'] ? strtotime($view->exposed_data['date']) : time();
            $token_str = date('F j, Y', $date_ts);
            break;
        }
      }
      $replacements['[view:date-filter]'] = $token_str;
    }
  }
  return $replacements;
}

function nys_calendar_views_pre_build(ViewExecutable $view) {
  if ($view->id() == 'events' && $view->current_display == 'page_3') {
    $exposed_input = $view->getExposedInput();
    if (empty($exposed_input['date']['min'])) {
      [$start_of_week, $end_of_week] = nys_calendar_get_date();
    }
    else {
      [$start_of_week, $end_of_week] = nys_calendar_get_date('week', $exposed_input['date']['min']);
    }
    $exposed_input['date']['min'] = $start_of_week;
    $exposed_input['date']['max'] = $end_of_week;
    $view->setExposedInput($exposed_input);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nys_calendar_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form['#id']) {
    case 'views-exposed-form-events-page-1':
    case 'views-exposed-form-events-page-2':
      $form['date']['#description'] = 'E.g., ' . date('m/d/Y');
      break;
    case 'views-exposed-form-events-page-3':
      if (!empty($form['date_wrapper']['date_wrapper']['date'])) {
        $form['date_wrapper']['date_wrapper']['date']['min']['#title'] = 'Week starting';
        $form['date_wrapper']['date_wrapper']['date']['max']['#title'] = 'Week ending';
        $form['date_wrapper']['date_wrapper']['date']['max']['#attributes']['readonly'] = 'readonly';
      }
      break;
  }
}
