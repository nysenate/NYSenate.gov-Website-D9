<?php

/**
 * @file
 * Custom functionality for the nys_comment module.
 */

use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_entity_type_alter().
 */
function nys_comment_entity_type_alter(array &$entity_types) {
  // Add validation constraint to the comment entity.
  $entity_types['comment']->addConstraint('userCommentBanned');
}

/**
 * Implements hook_form_alter().
 */
function nys_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_form') {
    if (isset($form['field_user_banned_comments'])) {
      /** @var \Drupal\Core\Session\AccountProxyInterface */
      $current_user = \Drupal::service('current_user');
      if (!$current_user->hasPermission('administer users')) {
        $form['field_user_banned_comments']['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'views_form_comment_page_unapproved') {
    $form['header']['comment_bulk_form']['action']['#options']['ban_user_comment'] = t('Ban User');
    $form['header']['comment_bulk_form']['action']['#options']['reject_comment'] = t('Reject');
    $form['header']['comment_bulk_form']['action']['#options']['comment_publish_action'] = t('Approve');
  }
}

/**
 * Implements hook_entity_operation().
 */
function nys_comment_entity_operation_alter(array &$operations, EntityInterface $entity) {
  $entityTypeId = $entity->getEntityTypeId();
  if ($entityTypeId !== 'comment') {
    return;
  }

  $cid = $entity->id();
  /** @var \Drupal\comment\Entity\Comment; */
  $comment = \Drupal::service('entity_type.manager')->getStorage('comment')
    ->load($cid);
  $commentType = $comment->bundle();
  $status = $comment->status->value;
  if ($commentType === 'default_comment' && $status == '0') {
    // Override the operational links if the comment
    // is unpublished.
    $operations = [];

    // Add approve operation.
    $approveCommentUrl = Url::fromRoute('comment.approve', ['comment' => $cid]);
    $operations['approve'] = [
      'title' => t('Approve'),
      'weight' => 20,
      'url' => $approveCommentUrl,
    ];

    // Ban user operation.
    $banUserUrl = Url::fromRoute('comment.ban_user', ['comment' => $cid]);
    $operations['ban'] = [
      'title' => t('Ban'),
      'weight' => 20,
      'url' => $banUserUrl,
    ];

    // Reject operation.
    $rejectCommentUrl = Url::fromRoute('comment.reject', ['comment' => $cid]);
    $operations['reject'] = [
      'title' => t('Reject'),
      'weight' => 20,
      'url' => $rejectCommentUrl,
    ];
  }
}

/**
 * Implements hook_preprocess_field__comment().
 */
function nys_comment_preprocess_field__comment(&$variables) {
  foreach ($variables['comments'] as $key => $comment) {
    if (!is_numeric($key)) {
      continue;
    }

    // Hide rejected comments.
    if ($comment['#comment']->status->value == 0) {
      if (!empty($comment['#comment']->field_rejected->value) &&
        $comment['#comment']->field_rejected->value == 1) {
        unset($variables['comments'][$key]);
      }
    }
  }

  $variables['logged_in'] = \Drupal::currentUser()->isAuthenticated();
}

/**
 * Implements hook_preprocess_links__comment().
 */
function nys_comment_preprocess_links__comment(&$variables) {
  $comment_storage = \Drupal::entityTypeManager()->getStorage('comment');
  $links = [];

  if (isset($variables['links']['comment-delete'])) {
    $route_parameters = $variables['links']['comment-delete']['link']['#url']->getRouteParameters();
    $cid = $route_parameters['comment'];

    $comment = $comment_storage->load($cid);

    if ($comment->status->value == 0) {
      $current_path = \Drupal::request()->getRequestUri();
      $url = Url::fromRoute('comment.reject', ['comment' => $cid]);
      $url = Url::fromUserInput($url->toString(), ['query' => ['destination' => $current_path]]);
      $attributes = new Attribute([
        'class' => ['comment-reject'],
      ]);

      // Populate the Reject button.
      $links['comment-reject'] = [
        'link' => [
          '#type' => 'link',
          '#title' => t('Reject'),
          '#url' => $url,
        ],
        'text' => t('Reject'),
        'attributes' => $attributes,
      ];
    }
  }

  // Keep the reply link.
  if (isset($variables['links']['comment-reply'])) {
    $links['comment-reply'] = $variables['links']['comment-reply'];
  }
  $variables['links'] = $links;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hides the 'Contact' tab on the user profile if the user does not have an
 * email address configured.
 */
function nys_comment_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if (isset($data['tabs'][1]['comment.admin_approval'])) {
    $data['tabs'][1]['comment.admin_approval']['#weight'] = -1;
  }
}

/**
 * Update the existing comments with the default rejected value.
 */
function nys_comment_deploy_default_rejected_value() {
  $cids = \Drupal::entityQuery('comment')->execute();
  $comment_storage = \Drupal::entityTypeManager()->getStorage('comment');
  $comments = $comment_storage->loadMultiple($cids);

  foreach ($comments as $id => $comment) {
    $comment->field_rejected = FALSE;
    $comment->save();
  }
}
