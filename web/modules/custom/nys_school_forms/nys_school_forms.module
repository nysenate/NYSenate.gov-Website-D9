<?php

/**
 * @file
 * Custom functionality for the nys_school_forms module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;
use Drupal\webform\WebformSubmissionInterface;

/**
 * @file
 * Custom functionality for the nys_school_forms module.
 */

/**
 * Implements hook_theme().
 */
function nys_school_forms_theme() {
  return [
    'school_forms' => [
      'variables' => [
        'search_form' => NULL,
        'entity_update_form' => NULL,
        'export_link' => NULL,
      ],
    ],
    'nys_school_forms__results_block' => [
      'variables' => [
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_access() for webform submission entity.
 *
 * Provides access control for the webform submission entity.
 */
function nys_school_forms_webform_submission_access(WebformSubmissionInterface $webform_submission, $op, $account) {
  // Check if the user is anonymous.
  if ($account->isAnonymous()) {
    return AccessResult::forbidden();
  }

  // Allow authenticated users to access the webform submission.
  return AccessResult::allowed();
}

/**
 * Implements hook_form_FORM_ID_alter.
 */
function nys_school_forms_form_node_student_submission_container_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Custom validation to make only one upload field required.
  $form['#validate'][] = '_nys_school_forms_validate_ss_container_form';

  // Custom submit handler to alter redirect and success message.
  $form['actions']['submit']['#submit'][] = '_nys_school_forms_ss_container_submit_handler';

  // Add JS confirmation pop-up to form.
  $form['#attached']['library'][] = 'nys_school_forms/submission_confirmation_popup';

  // Hide and set default field_form_type value.
  $form['field_form_type']['#access'] = FALSE;
  $form_type = _nys_school_forms_get_form_type();
  $form['field_form_type']['widget']['#default_value'] = $form_type;

  // Disable form if not in submission period.
  $form['#cache'] = ['max-age' => 0];
  $submission_periods = \Drupal::state()->get('nys_school_forms.submission_periods');
  $now = time();
  $form_open = strtotime($submission_periods[$form_type]['begin'] ?? 0);
  $form_close = strtotime($submission_periods[$form_type]['end'] ?? 0);
  $form_active = $form_open && $form_open <= $now && $form_close >= $now;
  if (!$form_active) {
    foreach ($form as $key => $value) {
      // Removes all input fields.
      if (!str_starts_with($key, '#')) {
        unset($form[$key]);
      }
    }
    $form['#attached']['library'][] = 'rain_theme/message';
    $form['status_message'] = [
      '#theme' => 'status_messages',
      '#message_list' => [
        'status' => ['The submission period is currently closed.'],
      ],
      '#status_headings' => [
        'status' => t('Status message'),
      ],
    ];
  }

  // Attach confirmation modal HTML to form, for later rendering using jQuery UI.
  $form['confirmation_modal'] = [
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => [
      'id' => 'submission-confirmation-modal',
      'title' => t('Wait!'),
    ],
    'content' => [
      'warning' => [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('Image orientations can change after upload.'),
      ],
      'question' => [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('Have you double-checked that all uploaded images have been rotated to their proper orientations?', [], ['context' => 'html']),
      ],
      'note' => [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => ('(There is a rotate button next to each uploaded image.)'),
      ],
    ],
  ];

}

/**
 * Implements hook_inline_entity_form_entity_form_alter.
 */
function nys_school_forms_inline_entity_form_entity_form_alter(&$form, FormStateInterface $form_state) {
  // Display image / file upload field based on prior selection.
  $upload_types = ['image', 'file'];
  foreach ($upload_types as $type) {
    $trigger = [":input[name='field_student_submissions[{$form['#ief_row_delta']}][inline_entity_form][field_upload_type]']" => ['value' => $type]];
    $form["field_{$type}_submission"]['#states'] = [
      'visible' => $trigger,
    ];
  }

  // Enable submission type field for thanksgiving form.
  match(_nys_school_forms_get_form_type()) {
    'thanksgiving' => $form['field_submission_type']['widget']['#required'] = TRUE,
    'earth_day' => $form['field_submission_type']['#access'] = FALSE,
  };
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nys_school_forms_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form['#id']) {
    case 'views-exposed-form-display-student-submissions-block-1':
      // Set submission year filter to current year, if no user input.
      $user_input = $form_state->getUserInput();
      $default_empty_fields = ['title', 'field_student_name_value', 'created'];
      $default_empty_fields_empty = empty(array_filter(array_intersect_key($user_input, array_flip($default_empty_fields))));
      if ($default_empty_fields_empty && $user_input['field_grade_value'] === 'All') {
        $form_state->setUserInput(['created' => date('Y')]);
      }
      break;
    case 'views-exposed-form-manage-student-submissions-page-1':
      // Set date filters to current year, if no user input.
      $user_input = $form_state->getUserInput();
      $default_empty_fields = ['name', 'title', 'field_teacher_name_value', 'created', 'created_1'];
      $default_empty_fields_empty = empty(array_filter(array_intersect_key($user_input, array_flip($default_empty_fields))));
      if ($default_empty_fields_empty && $user_input['status'] === 'All') {
        $form_state->setUserInput([
          'created' => date('Y') . '-01-01',
          'created_1' => date('Y') . '-12-31',
        ]);
      }
      break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function nys_school_forms_views_pre_view(ViewExecutable $view, $display_id, &$args) {
  if ($view->id() === 'display_student_submissions' && $display_id === 'block_1') {
    $aliased_path = \Drupal::requestStack()->getCurrentRequest()->getPathInfo();
    $source_path = \Drupal::service('path_alias.manager')->getPathByAlias($aliased_path);

    // Contextual filter to limit results to proper form type.
    $form_type = substr($aliased_path, strrpos($aliased_path, '/') + 1);
    switch ($form_type) {
      case 'earthday':
        $args[0] = 'earth_day';
        break;
      case 'thankful':
        $args[0] = 'thanksgiving';
        break;
    }

    // Contextual filter to limit results to schools in senator's district.
    if (preg_match('/^\/node\/(\d+)$/', $source_path, $matches)) {
      $node_id = $matches[1] ?? 0;
      $microsite_node = Node::load($node_id);
      if (
        $microsite_node instanceof \Drupal\node\NodeInterface
        && !empty($microsite_node->field_senator_multiref->target_id)
      ) {
        $args[1] = $microsite_node->field_senator_multiref->target_id;
      }
    }
  }
}

/**
 * Custom validation to make only one upload field required.
 */
function _nys_school_forms_validate_ss_container_form(array &$form, FormStateInterface $form_state) {
  $student_submissions = $form_state->getValue('field_student_submissions');
  $errors = $form_state->getErrors();
  unset($errors['submit']);
  $upload_types = ['image', 'file'];
  foreach ($upload_types as $type) {
    foreach ($student_submissions as $key => $submission) {
      if (
        !is_array($submission)
        || !isset($submission['inline_entity_form']['field_upload_type'][0]['value'])
      ) {
        continue;
      }
      $upload_type = $submission['inline_entity_form']['field_upload_type'][0]['value'];
      $field_key = "field_student_submissions][$key][inline_entity_form][field_{$type}_submission][0";
      if (
        $upload_type != $type
        && isset($errors[$field_key])
      ) {
        $form_state->clearErrors();
        unset($errors[$field_key]);
      }
    }
  }
  foreach ($errors as $field_name => $message) {
    $form_state->setErrorByName($field_name, $message);
  }
}

/**
 * Custom submit handler for custom redirect.
 */
function _nys_school_forms_ss_container_submit_handler(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form_type = $form_state->getValue('field_form_type')[0]['value'] ?? NULL;
  $redirect_uri = match($form_type) {
    'thanksgiving' => 'internal:/questionnaires/what-are-you-thankful/received',
    'earth_day' => 'internal:/earthday/received',
    default => 'internal:/',
  };
  $redirect_url = Url::fromUri($redirect_uri);
  $form_state->setRedirectUrl($redirect_url);
  \Drupal::messenger()->deleteAll();
}

/**
 * Helper function to get field_form_type from the current node request.
 */
function _nys_school_forms_get_form_type() {
  $form_type = NULL;
  $request = \Drupal::requestStack()->getCurrentRequest();
  if ($request->attributes->has('node')) {
    $node = $request->attributes->get('node');
    if ($node instanceof Node) {
      $form_type = $node->get('field_form_type')->value;
    }
  }
  return $form_type;
};