<?php

/**
 * @file
 * Contains custom module logic for NYS Senator Dashboard.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\flag\Plugin\Flag\EntityFlagType;

/**
 * Implements hook_query_TAG_alter().
 *
 * Ensures views with the "senators_constituents_only" tag only display profiles
 * linked to the current user's active managed senator's districts.
 */
function nys_senator_dashboard_query_senators_constituents_only_alter(AlterableInterface $query) {
  // Get active managed senator.
  $senator_term = \Drupal::service('nys_senator_dashboard.managed_senators_handler')
    ->getActiveSenator(FALSE);
  if (empty($senator_term)) {
    $query->alwaysFalse();
    return;
  }

  // Get senator's districts.
  $managed_district_ids = [];
  try {
    $senator_districts = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'districts',
        'field_senator' => $senator_term->id(),
      ]);
  }
  catch (\Throwable $e) {
    $query->alwaysFalse();
    return;
  }
  foreach ($senator_districts as $senator_district) {
    $managed_district_ids[] = $senator_district->id();
  }
  if (empty($managed_district_ids)) {
    $query->alwaysFalse();
    return;
  }

  // Get the views table alias corresponding to the users_field_data table
  // (could be users_field_data_1, etc.).
  $table_aliases = $query->getTables();
  $user_table_alias = null;
  foreach ($table_aliases as $alias => $table_info) {
    if ($table_info['table'] === 'users_field_data') {
      $user_table_alias = $alias;
      break;
    }
  }
  if (!$user_table_alias) {
    $query->alwaysFalse();
    return;
  }

  // Ensure the users being fetched are within the user's active managed
  // senator's districts.
  $query->leftJoin(
    'user__field_district',
    'ufd',
    "{$user_table_alias}.uid = ufd.entity_id"
  );
  $query->condition('ufd.field_district_target_id', $managed_district_ids, 'IN');
}

/**
 * Implements hook_theme().
 */
function nys_senator_dashboard_theme() {
  return [
    'nys_senator_dashboard__set_active_senator_menu' => [
      'variables' => [
        'mode' => '',
        'active_senator_links' => [],
      ],
    ],
    'menu__senator_dashboard' => [
      'variables' => [
        'mode' => '',
        'items' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function nys_senator_dashboard_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (str_starts_with($form_id, 'views_form_senator_dashboard_constituents_')) {
    // Hide additional footer bulk operation button.
    $form['actions']['#access'] = FALSE;
  }
}

/**
 * Implements hook_views_data().
 */
function nys_senator_dashboard_views_data() {
  $data['users']['votingapi_vote']['relationship'] = [
    'title' => t('User votes'),
    'label' => t('Vote entity'),
    'group' => 'Users',
    'help' => t('Reference to vote entities by a user.'),
    'id' => 'standard',
    'base' => 'votingapi_vote',
    'base field' => 'user_id',
    'field' => 'uid',
  ];
  $data['users']['flagging']['relationship'] = [
    'title' => t('User flaggings'),
    'label' => t('Flagging entity'),
    'group' => 'Users',
    'help' => t('Reference to flagging entities by a user.'),
    'id' => 'flag_relationship',
    'base' => 'flagging',
    'base field' => 'uid',
    'field' => 'uid',
  ];
  $data['users']['nys_senator_dashboard_contextual_filter_flag_link'] = [
    'title' => t('NYS Senator Dashboard: Flag link (from issue ID contextual filter)'),
    'help' => t('Displays a flag link based on an issue ID context filter value.'),
    'field' => [
      'id' => 'nys_senator_dashboard_contextual_filter_flag_link',
    ],
  ];
  $data['users']['nys_senator_dashboard_contextual_filter_webform_id'] = [
    'title' => t('NYS Senator Dashboard: Webform ID (from entity ID contextual filter)'),
    'help' => t('Displays the Webform ID based on the parent entity ID from the context filter value.'),
    'field' => [
      'id' => 'nys_senator_dashboard_contextual_filter_webform_id',
    ],
  ];
  $data['node']['nys_senator_dashboard_active_senator_sponsor_filter'] = [
    'title' => t('NYS Senator Dashboard: Active senator sponsor filter'),
    'help' => t('Filter bills to those sponsored or co-sponsored by the active senator.'),
    'filter' => [
      'id' => 'nys_senator_dashboard_active_senator_sponsor_filter',
    ],
  ];
  $data['taxonomy_term_data']['nys_senator_dashboard_active_senator_used_issues'] = [
    'title' => t('NYS Senator Dashboard: Active senator used issues filter'),
    'help' => t('Filter issues to those used in content (Articles, Press Releases, etc.) by the active senator.'),
    'filter' => [
      'id' => 'nys_senator_dashboard_active_senator_used_issues',
    ],
  ];
  $data['taxonomy_term_data']['nys_senator_dashboard_issue_followers_count_sort'] = [
    'title' => t('NYS Senator Dashboard: Issue followers'),
    'help' => t('Sort taxonomy terms by the number of follow_issue flaggings.'),
    'sort' => [
      'id' => 'nys_senator_dashboard_issue_followers_count_sort',
    ],
  ];
  return $data;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function nys_senator_dashboard_entity_extra_field_info() {
  $extra = [];
  $flag_service = \Drupal::service('flag');
  $flags = $flag_service->getAllFlags();

  /** @var \Drupal\flag\FlagInterface $flag */
  foreach ($flags as $flag) {
    $flag_type_plugin = $flag->getFlagTypePlugin();
    if (!($flag_type_plugin instanceof EntityFlagType)) {
      continue;
    }

    $flaggable_bundles = $flag->getApplicableBundles();
    foreach ($flaggable_bundles as $bundle_name) {
      $extra[$flag->getFlaggableEntityTypeId()][$bundle_name]['display']['nys_senator_dashboard_flag_link_' . $flag->id()] = [
        'label' => t('NYS Senator Dashboard: Entity label Flag link: %title', ['%title' => $flag->label()]),
        'description' => t('A custom flag link that uses the entity label as the link text.'),
        'weight' => 10,
        'visible' => FALSE,
      ];

      $extra[$flag->getFlaggableEntityTypeId()][$bundle_name]['display']['nys_senator_dashboard_flag_count_' . $flag->id()] = [
        'label' => t('NYS Senator Dashboard: Flag count: %title', ['%title' => $flag->label()]),
        'description' => t('A custom field that displays the total flagging count on an entity.'),
        'weight' => 10,
        'visible' => FALSE,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function nys_senator_dashboard_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  /** @var Drupal\flag\FlagService $flag_service */
  $flag_service = \Drupal::service('flag');

  $flags = $flag_service->getAllFlags($entity->getEntityTypeId(), $entity->bundle());
  foreach ($flags as $flag) {
    if (!$flag->status()) {
      continue;
    }

    if ($display->getComponent('nys_senator_dashboard_flag_link_' . $flag->id())) {
      $flag->setFlagLongText($entity->label());
      $flag->setUnflagLongText($entity->label());
      $link_type_plugin = $flag->getLinkTypePlugin();
      $flag_action_url = $link_type_plugin->getAsLink($flag, $entity, 'default')->getUrl();

      $is_flagged = $flag_service->getFlagging($flag, $entity);
      $action_class = $is_flagged ? 'action-unflag' : 'action-flag';
      $classes = [
        'flag-link',
        'flag-link-' . $flag->id(),
        $action_class,
      ];

      $build['nys_senator_dashboard_flag_link_' . $flag->id()] = [
        '#type' => 'link',
        '#title' => $entity->label(),
        '#url' => $flag_action_url,
        '#attributes' => [
          'class' => $classes,
        ],
      ];
    }

    if ($display->getComponent('nys_senator_dashboard_flag_count_' . $flag->id())) {
      $flagging_count = _nys_senator_dashboard_get_flagging_count(
        $flag->id(),
        $entity->getEntityTypeId(),
        $entity->id()
      );
      $build['nys_senator_dashboard_flag_count_' . $flag->id()] = [
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => $flagging_count . t(' followers'),
        '#attributes' => [
          'class' => ['flagging-count'],
        ],
      ];
    }
  }
}

/**
 * Counts the number of flaggings for a given entity and flag type.
 *
 * @param string $flag_id
 *   The ID of the flag type.
 * @param string $entity_type
 *   The entity type (e.g., 'node', 'user', etc.).
 * @param int $entity_id
 *   The ID of the entity being flagged.
 *
 * @return int
 *   The number of flaggings for the given entity and flag type.
 */
function _nys_senator_dashboard_get_flagging_count($flag_id, $entity_type, $entity_id) {
  $connection = Database::getConnection();
  $query = $connection->select('flag_counts', 'fc')
    ->fields('fc', ['count'])
    ->condition('fc.flag_id', $flag_id)
    ->condition('fc.entity_type', $entity_type)
    ->condition('fc.entity_id', $entity_id)
    ->range(0, 1);
  try {
    $result = $query->execute()->fetchField();
  }
  catch (Exception) {
    return 0;
  }
  return (int) ($result ?: 0);
}
