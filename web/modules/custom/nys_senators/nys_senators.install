<?php

/**
 * @file
 * Create 'Microsite Page Type' taxonomy terms programmatically.
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Database\Database;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;
use Drupal\Core\Config\ConfigImporter;
use Drupal\Core\Config\ConfigImporterException;
use Drupal\Core\Config\StorageComparer;
use Drupal\language\Entity\ConfigurableLanguage;

/**
 * Implements hook_install().
 */
function nys_senators_install() {
  module_set_weight('nys_senators', 5);
}

/**
 * Implements hook_update_N().
 */
function nys_senators_update_9001() {

  $about = Term::create([
    'name' => 'About',
    'vid' => 'microsite_page_type',
  ]);
  $about->set('field_microsite_menu_weight', 0);
  $about->save();

  $our_district = Term::create([
    'name' => 'Our District',
    'vid' => 'microsite_page_type',
  ]);
  $our_district->set('field_microsite_menu_weight', 1);
  $our_district->save();

  $news_room = Term::create([
    'name' => 'Newsroom',
    'vid' => 'microsite_page_type',
  ]);
  $news_room->set('field_microsite_menu_weight', 2);
  $news_room->save();

  $legislation = Term::create([
    'name' => 'Legislation',
    'vid' => 'microsite_page_type',
  ]);
  $legislation->set('field_microsite_menu_weight', 3);
  $legislation->save();

  $events = Term::create([
    'name' => 'Events',
    'vid' => 'microsite_page_type',
  ]);
  $events->set('field_microsite_menu_weight', 4);
  $events->save();
}

/**
 * Implements hook_update_N().
 */
function nys_senators_update_9002() {
  $events = Term::create([
    'name' => 'Landing',
    'vid' => 'microsite_page_type',
  ]);
  $events->save();
}

/**
 * Implements hook_update_N().
 */
function nys_senators_update_9003() {
  $contact = Term::create([
    'name' => 'Contact',
    'vid' => 'microsite_page_type',
  ]);
  $contact->save();
  $contact->set('field_microsite_menu_weight', 5);
  $contact->save();
}

/**
 * Add the default Microsite Contact Webform block.
 */
function nys_senators_update_9004() {
  // Creates the default Microsite Contact Webform block to be attached to the
  // existing microsite nodes.
  $senatorContactBlock = BlockContent::create([
    'info' => 'Senator contact form - Microsite Contact block',
    'type' => 'microsite_contact_webform',
    'revision_user' => 1,
    'field_contact_webform' => [
      'target_id' => 'senator_contact_webform',
      'default_data' => '',
      'status' => 'open',
      'open' => '',
      'close' => '',
    ],
  ]);
  $senatorContactBlock->save();
}

/**
 * Add Senator microsite pages for existing terms.
 */
function nys_senators_update_9005() {
  // Queries all senator terms that are published and active.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
    'status' => 1,
    'field_active_senator' => TRUE,
  ]);

  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    // Queries looking for microsite pages that reference the term in senator
    // multiref field.
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->execute();

    // Creates the senator microsites pages if the query return empty.
    if (empty($query)) {
      _nys_senators_create_senator_microsites($senator_term);
    }
  }
}

/**
 * Create Inactive term.
 */
function nys_senators_update_9006() {
  $term = Term::create([
    'name' => 'Inactive',
    'vid' => 'microsite_page_type',
  ]);
  $term->save();
}

/**
 * Deletes all Microsite Pages nodes.
 */
function nys_senators_update_9007() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage("node");
  $entities = $storage_handler->loadByProperties([
    'type' => 'microsite_page',
  ]);
  $storage_handler->delete($entities);
}

/**
 * Updates Microsite Page Type terms VID value.
 */
function nys_senators_update_9008() {
  // Queries all microsite page type terms that are published.
  $terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'microsite_page_type',
    'status' => 1,
  ]);

  foreach ($terms as $term) {
    print "Updating VID on term {$term->id()} - {$term->label()}\n";
    $term->set('vid', 'issues');
    $term->save();
  }
}

/**
 * Alters AUTO_INCREMENT values of relevant entity database tables.
 */
function nys_senators_update_9009() {
  // Database connection.
  $con = Database::getConnection();

  // Entity start values.
  // Increase to provide plenty of room for more D7 content to be created.
  $node_start_value = 12000000;
  $taxonomy_term_start_value = 200000;
  $users_start_value = 3000000;

  // Node table.
  $query = "ALTER TABLE {node} AUTO_INCREMENT = $node_start_value";
  $con->query($query);

  // Node revision table.
  $query = "ALTER TABLE {node_revision} AUTO_INCREMENT = $node_start_value";
  $con->query($query);

  // Taxonomy term table.
  $query = "ALTER TABLE {taxonomy_term_data} AUTO_INCREMENT = $taxonomy_term_start_value";
  $con->query($query);

  // Taxonomy term revision table.
  $query = "ALTER TABLE {taxonomy_term_revision} AUTO_INCREMENT = $taxonomy_term_start_value";
  $con->query($query);

  // Users table.
  $query = "ALTER TABLE {users} AUTO_INCREMENT = $users_start_value";
  $con->query($query);
}

/**
 * Re-creates Microsite Page Type terms.
 */
function nys_senators_update_9010() {
  print "Creating Microsite Page Type terms:\n";
  // About term.
  $about = Term::create([
    'name' => 'About',
    'vid' => 'microsite_page_type',
  ]);
  $about->set('field_microsite_menu_weight', 0);
  $about->save();
  print "TID: {$about->id()} - NAME: {$about->label()}\n";

  // Our District term.
  $our_district = Term::create([
    'name' => 'Our District',
    'vid' => 'microsite_page_type',
  ]);
  $our_district->set('field_microsite_menu_weight', 1);
  $our_district->save();
  print "TID: {$our_district->id()} - NAME: {$our_district->label()}\n";

  // Newsroom term.
  $news_room = Term::create([
    'name' => 'Newsroom',
    'vid' => 'microsite_page_type',
  ]);
  $news_room->set('field_microsite_menu_weight', 2);
  $news_room->save();
  print "TID: {$news_room->id()} - NAME: {$news_room->label()}\n";

  // Legislation term.
  $legislation = Term::create([
    'name' => 'Legislation',
    'vid' => 'microsite_page_type',
  ]);
  $legislation->set('field_microsite_menu_weight', 3);
  $legislation->save();
  print "TID: {$legislation->id()} - NAME: {$legislation->label()}\n";

  // Events term.
  $events = Term::create([
    'name' => 'Events',
    'vid' => 'microsite_page_type',
  ]);
  $events->set('field_microsite_menu_weight', 4);
  $events->save();
  print "TID: {$events->id()} - NAME: {$events->label()}\n";

  // Landing term.
  $landing = Term::create([
    'name' => 'Landing',
    'vid' => 'microsite_page_type',
  ]);
  $landing->save();
  print "TID: {$landing->id()} - NAME: {$landing->label()}\n";

  // Contact term.
  $contact = Term::create([
    'name' => 'Contact',
    'vid' => 'microsite_page_type',
  ]);
  $contact->set('field_microsite_menu_weight', 5);
  $contact->save();
  print "TID: {$contact->id()} - NAME: {$contact->label()}\n";

  // Inactive term.
  $inactive = Term::create([
    'name' => 'Inactive',
    'vid' => 'microsite_page_type',
  ]);
  $inactive->save();
  print "TID: {$inactive->id()} - NAME: {$inactive->label()}\n";
}

/**
 * Adds Senator microsite pages for existing terms.
 */
function nys_senators_update_9011() {
  // Queries all senator terms that are published and active.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
    'status' => 1,
    'field_active_senator' => TRUE,
  ]);

  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    // Queries looking for microsite pages that reference the term in senator
    // multiref field.
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->execute();

    // Creates the senator microsites pages if the query return empty.
    if (empty($query)) {
      _nys_senators_create_senator_microsites($senator_term);
    }
  }
}

/**
 * Remove the old microsite hero and headers that are not referenced.
 */
function nys_senators_update_9012() {
  // Retrieve all the hero and menu block contents.
  $block_contents = "SELECT bc.id FROM block_content_field_data bc WHERE bc.type IN ('microsite_hero', 'senator_microsite_menu') AND bc.status = '1'";
  $result = \Drupal::database()->query($block_contents)->fetchAll();

  foreach ($result as $block) {
    // Query if the block content is referenced in a microsite page.
    $field_block = \Drupal::database()->query(
      "SELECT b.entity_id FROM node__field_block b WHERE b.field_block_target_id = :block_id AND b.bundle = 'microsite_page'",
      [':block_id' => $block->id]
    );
    $result = $field_block->fetchAll();

    // If the block is not referenced, delete the block.
    if (empty($result)) {
      \Drupal::logger('nys_senators')->notice('Deleting block content %id', ['%id' => $block->id]);
      $block = \Drupal::entityTypeManager()->getStorage('block_content')
        ->load($block->id);
      $block->delete();
    }
  }
}

/**
 * Remove the promotional_banner block content type.
 */
function nys_senators_update_9013() {
  $promotional_banner = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['type' => 'promotional_banner']);
  foreach ($promotional_banner as $item) {
    $item->delete();
  }
}

/**
 * Creates new Microsite Page Type terms.
 */
function nys_senators_update_9014() {
  // Earth Day term.
  $earthday = Term::create([
    'name' => 'Earth Day',
    'vid' => 'microsite_page_type',
  ]);
  $earthday->save();

  // Thankful term.
  $thankful = Term::create([
    'name' => 'Thankful',
    'vid' => 'microsite_page_type',
  ]);
  $thankful->save();
}

/**
 * Adds Earth Day & Thankful Microsite pages on existing senators.
 */
function nys_senators_update_9015() {
  // Queries all senator terms.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
  ]);
  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->condition('field_microsite_page_type.entity:taxonomy_term.name',
        ['Earth Day', 'Thankful'], 'IN')
      ->execute();

    // Creates the senator microsites pages if the query return empty.
    if (empty($query)) {
      _nys_senators_create_microsites($senator_term);
    }
  }
}

/**
 * Helper function to import config files.
 */
function nys_senators_import_config() {
  // Get the storage for the install directory.
  $config_path = Settings::get('config_sync_directory');
  $install_storage = new FileStorage($config_path);
  // Get the storage for the active configuration.
  $active_storage = \Drupal::service('config.storage');

  // Compare the storage.
  $storage_comparer = new StorageComparer($install_storage, $active_storage);

  // Get the configuration changes.
  $changelist = $storage_comparer->createChangelist();

  // Import the changes.
  if ($storage_comparer->hasChanges()) {
    $config_importer = new ConfigImporter(
      $storage_comparer,
      \Drupal::service('event_dispatcher'),
      \Drupal::service('config.manager'),
      \Drupal::service('lock.persistent'),
      \Drupal::service('config.typed'),
      \Drupal::service('module_handler'),
      \Drupal::service('module_installer'),
      \Drupal::service('theme_handler'),
      \Drupal::service('string_translation'),
      \Drupal::service('extension.list.module'),
      \Drupal::service('extension.list.theme')
    );
    try {
      $config_importer->import();
    }
    catch (ConfigImporterException $e) {
      $messenger = \Drupal::messenger();
      // There are validation errors.
      $messenger->addError(t('The configuration synchronization failed validation.'));
      foreach ($config_importer->getErrors() as $message) {
        $messenger->addError($message);
      }
    }

    if (\Drupal::moduleHandler()->moduleExists('language')) {
      if (ConfigurableLanguage::load('en')) {
        $install_state['profile_info']['keep_english'] = TRUE;
      }
    }
  }

  // Clear the cache.
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['config']);
}

/**
 * Update Earth Day & Thankful Microsite pages on existing senators.
 */
function nys_senators_update_9016() {
  // Import Senator Microsite School Forms Custom Block type.
  nys_senators_import_config();

  // Queries all senator terms.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
  ]);
  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->condition('field_microsite_page_type.entity:taxonomy_term.name',
        ['Earth Day', 'Thankful'], 'IN')
      ->execute();

    // Creates the senator microsites pages if the query return empty.
    if (!empty($query)) {
      _nys_senators_update_microsites($senator_term);
    }
  }
}

/**
 * Adjusts module weight to make sure access is controlled properly.
 */
function nys_senators_update_9017() {
  module_set_weight('nys_senators', -500);
}

/**
 * Rearrange blocks on Earth Day & Thankful Microsite pages for all senators.
 */
function nys_senators_update_9018() {
  // Import Senator Microsite School Forms Custom Block type.
  nys_senators_import_config();

  // Queries all senator terms.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
  ]);
  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->condition('field_microsite_page_type.entity:taxonomy_term.name',
        ['Earth Day', 'Thankful'], 'IN')
      ->execute();

    if (!empty($query)) {
      _nys_senators_rearrange_microsites_blocks($senator_term);
    }
  }
}

/**
 * Remove letter blocks on Earth Day & Thankful Microsite pages.
 */
function nys_senators_update_9019() {
  // Import Senator Microsite School Forms Custom Block type.
  nys_senators_import_config();

  // Queries all senator terms.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
  ]);
  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->condition('field_microsite_page_type.entity:taxonomy_term.name',
        ['Earth Day', 'Thankful'], 'IN')
      ->execute();

    if (!empty($query)) {
      _nys_senators_remove_letter_blocks($senator_term);
    }
  }
}

/**
 * Adjusts module weight back.
 */
function nys_senators_update_9020() {
  module_set_weight('nys_senators', 5);
}

/**
 * Add About Information block on About Microsite page.
 */
function nys_senators_update_9021() {
  // Import Senator Microsite About Text Custom Block type.
  nys_senators_import_config();

  // Queries all senator terms.
  $senator_terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'senator',
  ]);
  // Iterates through each senator term.
  foreach ($senator_terms as $senator_term) {
    $query = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'microsite_page')
      ->condition('field_senator_multiref', [$senator_term->id()], 'IN')
      ->condition('field_microsite_page_type.entity:taxonomy_term.name',
        ['About'], 'IN')
      ->execute();

    if (!empty($query)) {
      _nys_senators_add_about_text_blocks($senator_term);
    }
  }
}
