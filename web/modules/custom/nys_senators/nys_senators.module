<?php

/**
 * @file
 * Contains custom code for Senators and their Microsite Content.
 */

use Drupal\block_content\Entity\BlockContent;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\pathauto\Entity\PathautoPattern;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function nys_senators_theme($existing, $type, $theme, $path) {
  return [
    'senator_microsite_menu_block' => [
      'variables' => ['menu_links' => NULL],
    ],
  ];
}

/**
 * Implements hook_node_grants().
 *
 * This function assigns group flags (grants) to users for access to content.
 */
function nys_senators_node_grants(AccountInterface $account, $op) {

  // Initialize empty grants array for return.
  $grants = [];

  // Group 1 will represent all users.
  // Microsite Users wil be non senator specific.
  $grants['microsite_users'][] = 1;

  // Define role checks as arrays to expand upon in the future as needed.
  // What editorial roles need any level edit access.
  $granted_member_roles = [
    'microsite_content_producer',
    'administrator',
    'content_admin',
  ];

  // Fetch the User's roles.
  $user_roles = $account->getRoles();

  // First check if authenticated.
  // Second check if they are a role we want to give Microsite edit access to.
  if ($account->isAuthenticated() && !empty(array_intersect($granted_member_roles, $user_roles))) {

    $senator_helper = \Drupal::service('nys_senators.senators_helper');
    // If user is an admin we need to give full access to the content.
    if ($senator_helper->senatorUserIsAdmin($account)) {

      // User is an Admin. Grant access to all microsite content.
      // Group 2 will be a representation of our admins.
      $grants['microsite_users'][] = 2;
    }
    else {

      // The User falls within a Senator based producer.
      // Find out all of the User's senators. To do so, load user entity.
      $user = User::load($account->id());

      // Make sure the user has the field and that there is a value.
      if ($user->hasField('field_senator_multiref') && !empty($senators = $user->field_senator_multiref->getValue())) {

        // There is a potential for multiple senators so run through each.
        foreach ($senators as $senator) {

          // Grant access to producers group based on Senator ID.
          $grants['microsite_producers'][] = $senator['target_id'];
        }
      }
    }
  }

  // Return any grants we have assigned.
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function nys_senators_node_access_records(NodeInterface $node) {

  // Initialize empty access array for return.
  $access = [];

  // Build an array of microsite content types we care about.
  $microsite_cts = [
    'article',
    'event',
    'in_the_news',
    'petition',
    'promotional_banner',
    'microsite_page',
    'webform',
    'video',
  ];

  $sponsor_cts = [
    'bill',
    'resolution',
  ];

  // If the node is in a bundle that could be microsite content.
  if (in_array($node->bundle(), $microsite_cts, TRUE) || in_array($node->bundle(), $sponsor_cts, TRUE)) {

    // Add the appropriate gids to the proper realms for each level of access.
    // Start with all and administrative users.
    // All users access view if published.
    if ($node->isPublished()) {

      $access[] = [
        'realm' => 'microsite_users',
        'gid' => 1,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
    }

    // Add in Crud operations for Admins.
    $access[] = [
      'realm' => 'microsite_users',
      'gid' => 2,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    ];

    // Now check for a filled out Senator field.
    if (in_array($node->bundle(), $microsite_cts, TRUE) && $node->hasField('field_senator_multiref') && !empty($senators = $node->field_senator_multiref->getValue())) {

      // For all Senators on Node, grant producers access based on Senator.
      foreach ($senators as $senator) {

        // Add edit access to producers based on Senator ID.
        $access[] = [
          'realm' => 'microsite_producers',
          'gid' => $senator['target_id'],
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }

    // Now check for a filled out Sponsor field.
    if (in_array($node->bundle(), $sponsor_cts, TRUE) && $node->hasField('field_ol_sponsor') && !empty($sponsors = $node->field_ol_sponsor->getValue())) {

      // For all Senators on Node, grant producers access based on Senator.
      foreach ($sponsors as $sponsor) {

        // Add edit access to producers based on Senator ID.
        $access[] = [
          'realm' => 'microsite_producers',
          'gid' => $sponsor['target_id'],
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
    }
  }

  // Return access records added.
  return $access;
}

/**
 * Implements hook_entity_access().
 */
function nys_senators_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // Fetch the User's roles.
  $user_roles = $account->getRoles();
  $senator_helper = \Drupal::service('nys_senators.senators_helper');

  // Don't need to waste any performance if user is not MCP.
  if (!$senator_helper->senatorUserIsAdmin($account) && in_array('microsite_content_producer', $user_roles, FALSE)) {

    // Find out all of the User's senators. To do so, load full user entity.
    $user = User::load($account->id());

    // Make sure the user has the field and that there is a value.
    if ($user->hasField('field_senator_multiref') && !empty($senators = array_column($user->field_senator_multiref->getValue(), 'target_id'))) {

      // Only fire when a Senator or Committee Term.
      if ($entity->getEntityType()->id() === 'taxonomy_term' && $operation == 'update') {

        // Check if term is in MCPs senator values for Senator terms.
        if ($entity->bundle() === 'senator' && in_array($entity->id(), $senators, FALSE)) {
          // Matched value. You shall pass.
          return AccessResultAllowed::allowed()->setCacheMaxAge(0);
        }

        // Check if chair term is in MCPs senator values.
        if ($entity->bundle() === 'committees') {
          if (!empty($entity->field_chair->target_id) && in_array($entity->field_chair->target_id, $senators, FALSE)) {
            // Matched value. You shall pass.
            return AccessResultAllowed::allowed()->setCacheMaxAge(0);
          }

          return AccessResult::neutral();
        }

        // Either they don't have a senator or not the right Senator.
        return AccessResult::forbidden()->setCacheMaxAge(0);
      }
    }
    elseif ($entity->getEntityType()->id() === 'taxonomy_term' && $operation == 'update') {
      // They don't have a senator, deny everything..
      return AccessResult::forbidden()->setCacheMaxAge(0);
    }

    // Hide Admin routes from Content Bases for non-update access items.
    if ($operation == 'view all revisions' && $entity->getEntityType()->id() === 'node') {
      // Returns true if they have update access.
      return AccessResult::allowedIf($entity->access('update', $account))->setCacheMaxAge(0);
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_presave().
 */
function nys_senators_user_presave(UserInterface $user) {
  // Fetch the User's roles.
  $user_roles = $user->getRoles();
  // Only check for MCPs.
  if (!in_array('microsite_content_producer', $user_roles, FALSE)) {
    if ($user->hasField('field_senator_multiref')) {
      $user->set('field_senator_multiref', 0);
    }
  }

  // The contact your senator component relies on field_address
  // of the user entity. Invalidate the issues taxonomy
  // term when updating the users.
  \Drupal::service('cache_tags.invalidator')
    ->invalidateTags(['taxonomy_term_list:issues']);
}

/**
 * Implements hook_form_node_form_alter().
 */
function nys_senators_form_node_form_alter(&$form, $form_state) {
  $user = \Drupal::currentUser();
  $user = User::load($user->id());
  // Fetch the User's roles.
  $user_roles = $user->getRoles();
  // Disable the senator in case the MCP user has one senator and allows select
  // the senator in case MCP has more than one assigned
  // Also enable Admin user to select any senator even when it is not assigned.
  if (in_array('microsite_content_producer', $user_roles, FALSE) && !in_array('administrator', $user_roles, FALSE)) {
    if ($user->hasField('field_senator_multiref') && count($user->field_senator_multiref->getValue()) == 1) {
      $form['field_senator_multiref']['#disabled'] = TRUE;
      $form['field_senator_multiref']['widget']['#default_value'] = array_column($user->field_senator_multiref->getValue(), 'target_id');
    }
    $targets = array_column($user->field_senator_multiref->getValue(), 'target_id');

    if ($options = $form['field_senator_multiref']['widget']['#options'] ?? []) {
      $result = [];
      foreach ($options as $key => $option) {
        if ($key == '_none' || in_array($key, $targets)) {
          $result[$key] = $option;
        }
        $form['field_senator_multiref']['widget']['#options'] = $result;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function nys_senators_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'block_content_microsite_hero_form') {
    $user = \Drupal::currentUser();
    $user = User::load($user->id());
    $user_roles = $user->getRoles();
    if (in_array('microsite_content_producer', $user_roles, FALSE) && !in_array('administrator', $user_roles, FALSE)) {
      if ($user->hasField('field_senator_multiref') && count($user->field_senator_multiref->getValue()) == 1) {
        $form['field_senator']['#disabled'] = TRUE;
        $form['field_senator']['widget']['#default_value'] = array_column($user->field_senator_multiref->getValue(), 'target_id');
      }
      $targets = array_column($user->field_senator_multiref->getValue(), 'target_id');
      $options = $form['field_senator']['widget']['#options'];
      $result = [];
      foreach ($options as $key => $option) {
        if ($key == '_none' || in_array($key, $targets)) {
          $result[$key] = $option;
        }
      }
      $form['field_senator']['widget']['#options'] = $result;
    }
  }
}

/**
 * Creates senator microsites pages.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity interface.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _nys_senators_create_senator_microsites(EntityInterface $entity) {
  // Gets the senator name value.
  $senator_name = $entity->label();

  // Creates hero block to be attached to the microsite content.
  $heroBlock = BlockContent::create([
    'info' => $senator_name . ' - Hero block',
    'type' => 'microsite_hero',
    'revision_user' => 1,
    'field_senator' => [
      'target_id' => $entity->id(),
    ],
  ]);
  $heroBlock->save();

  // Creates menu block to be attached to the microsite content.
  $menuBlock = BlockContent::create([
    'info' => $senator_name . ' - Menu block',
    'type' => 'senator_microsite_menu',
    'revision_user' => 1,
  ]);
  $menuBlock->save();

  // Loads microsite page type terms.
  $termEntityManager = \Drupal::service('entity_type.manager')
    ->getStorage('taxonomy_term');
  $micrositeTypes = $termEntityManager->loadByProperties([
    'vid' => 'microsite_page_type',
  ]);

  $senatorMicrosites = [
    'Landing',
    'About',
    'Newsroom',
    'Legislation',
    'Events',
    'Our District',
    'Contact',
    'Earth Day',
    'Thankful',
  ];
  // Iterates through each microsite term and creates the microsite page.
  foreach ($micrositeTypes as $micrositeType) {
    if (in_array($micrositeType->getName(), $senatorMicrosites)) {
      // Default node values.
      $nodeValues = [
        'type' => 'microsite_page',
        'status' => 1,
        'uid' => 1,
        'field_microsite_page_type' => [
          'target_id' => $micrositeType->id(),
        ],
        'field_block' => [
          [
            'target_id' => $heroBlock->id(),
            'target_revision_id' => $heroBlock->getRevisionId(),
          ],
          [
            'target_id' => $menuBlock->id(),
            'target_revision_id' => $menuBlock->getRevisionId(),
          ],
        ],
        'field_senator_multiref' => [
          [
            'target_id' => $entity->id(),
          ],
        ],
      ];

      // Sets the node title value considering the microsite page we are
      // creating.
      switch ($micrositeType->getName()) {
        case 'Landing':
          $nodeValues['title'] = $senator_name;
          break;

        case 'About':
          $nodeValues['title'] = 'About ' . $senator_name;
          break;

        case 'Newsroom':
          $nodeValues['title'] = 'Newsroom';
          break;

        case 'Legislation':
          $nodeValues['title'] = 'Legislation';
          break;

        case 'Events':
          $nodeValues['title'] = 'Events ';
          break;

        case 'Our District':
          $nodeValues['title'] = $micrositeType->getName();
          break;

        case 'Contact':
          $nodeValues['title'] = 'Contact ' . $senator_name . "'s office";
          $senatorContactBlock = \Drupal::service('entity_type.manager')
            ->getStorage('block_content')
            ->loadByProperties([
              'type' => 'microsite_contact_webform',
              'status' => 1,
              'info' => 'Senator contact form - Microsite Contact block',
            ]);
          if (!empty($senatorContactBlock)) {
            $senatorContactBlock = reset($senatorContactBlock);
            $nodeValues['field_block'][] = [
              'target_id' => $senatorContactBlock->id(),
              'target_revision_id' => $senatorContactBlock->getRevisionId(),
            ];
          }
          break;

        case 'Thankful':
          $nodeValues['title'] = '2021 Thanksgiving Day Creative Celebration';
          // Creates blocks to be attached to the microsite content.
          $thankful_blocks = [
            [
              'info' => $senator_name . ' - Sincerely Block',
              'type' => 'sincerely',
              'revision_user' => 1,
            ],
            [
              'info' => $senator_name . ' - Submission Results Block',
              'type' => 'senator_microsite_school_forms',
              'revision_user' => 1,
              'field_microsite_school_form' => [
                'plugin_id' => 'nys_senators_microsite_school_forms',
                'settings' => [],
              ],
            ],
          ];
          foreach ($thankful_blocks as $thankful_block) {
            $thankfulBlock = BlockContent::create($thankful_block);
            $thankfulBlock->save();
            $nodeValues['field_block'][] = [
              'target_id' => $thankfulBlock->id(),
              'target_revision_id' => $thankfulBlock->getRevisionId(),
            ];
          }
          break;

        case 'Earth Day':
          $nodeValues['title'] = '2021 Earth Day Poster Contest Celebration';
          // Creates submission block to be attached to the microsite content.
          $earthday_blocks = [
            [
              'info' => $senator_name . ' - Sincerely Block',
              'type' => 'sincerely',
              'revision_user' => 1,
            ],
            [
              'info' => $senator_name . ' - Submission Results Block',
              'type' => 'senator_microsite_school_forms',
              'revision_user' => 1,
              'field_microsite_school_form' => [
                'plugin_id' => 'nys_senators_microsite_school_forms',
                'settings' => [],
              ],
            ],
          ];
          foreach ($earthday_blocks as $earthday_block) {
            $earthDayBlock = BlockContent::create($earthday_block);
            $earthDayBlock->save();
            $nodeValues['field_block'][] = [
              'target_id' => $earthDayBlock->id(),
              'target_revision_id' => $earthDayBlock->getRevisionId(),
            ];
          }
          break;

      }

      // Creates the new microsite page.
      $node = Node::create($nodeValues);
      $node->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function nys_senators_taxonomy_term_insert(EntityInterface $entity) {
  // Acts on every new senator taxonomy term that's added.
  if ($entity->bundle() === 'senator') {
    _nys_senators_create_senator_microsites($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function nys_senators_taxonomy_term_update(EntityInterface $entity) {
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $entity;

  /** @var \Drupal\taxonomy\Entity\Term $originalSenator */
  $originalSenator = $term->original;
  if (!$originalSenator->hasField('field_active_senator')) {
    return;
  }
  $updatedValue = (bool) $term->get('field_active_senator')->value;

  // Checks if Senator status is being updated.
  if ($term->hasField('field_active_senator')) {
    _nys_senators_validate_microsite_term($entity, $term->get('field_active_senator')
      ->first()
      ->getValue()['value'], $updatedValue);
  }
}

/**
 * Creates and validates microsite term.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The original entity object.
 * @param int $activeSenator
 *   The Active Senator value.
 * @param bool $updatedValue
 *   The Tid variable from the term.
 */
function _nys_senators_validate_microsite_term(EntityInterface $entity, int $activeSenator, bool $updatedValue) {

  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $entity;

  // Sets currentTid variable from the term.
  $currentTid = $entity->id();

  // Looks for the Microsite pages that are referencing this senator.
  $pages = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'microsite_page')
    ->condition('field_senator_multiref', [$currentTid], 'IN')
    ->execute();

  // Checks if there are results or not.
  if (!empty($pages)) {
    // Loads the microsite pages found.
    $nodes = Node::loadMultiple($pages);

    // Initialize aboutNode to store About page information.
    $aboutNode = [];

    foreach ($nodes as $node) {
      // Acts on every new senator taxonomy term that's updated.
      if ($term->bundle() === 'senator') {
        if ($node->hasField('field_microsite_page_type')
          && !$node->get('field_microsite_page_type')->isEmpty()) {
          $tid = $node->field_microsite_page_type->getValue()[0]['target_id'] ?? '';
          $micrositeTerm = Term::load($tid);
          $validateLanding = $micrositeTerm instanceof TermInterface && !empty($micrositeTerm->getName()) && $micrositeTerm->getName() === 'Landing';
          $validateAbout = $term->get('field_active_senator')->value === 0 && $micrositeTerm instanceof TermInterface && !empty($micrositeTerm->getName()) && $micrositeTerm->getName() === 'About';
          $validateInactive = $micrositeTerm instanceof TermInterface && !empty($micrositeTerm->getName()) && $micrositeTerm->getName() === 'Inactive';

          if ($validateAbout) {
            /** @var \Drupal\node\Entity\Node $aboutNode */
            $aboutNode = $node;
          }

          if ($validateLanding) {
            $activeSenator === 1 ? $node->setPublished() : $node->setUnpublished();
          }
          elseif ($validateInactive) {
            $activeSenator === 0 ? $node->setPublished() : $node->setUnpublished();
          }
          $node->save();
        }
      }
    }

    // Checks if the senator has an Inactive microsite page or not.
    if (!$updatedValue) {
      $hasInactivePage = \Drupal::service('nys_senators.senators_helper')
        ->hasMicroSiteInactive($nodes);
      if (!$hasInactivePage && !empty($aboutNode)) {
        _nys_senators_create_senator_microsite_inactive($term, $aboutNode, $currentTid);
      }
    }
  }
}

/**
 * Creates senator microsites inactive page.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The original entity object.
 * @param \Drupal\node\NodeInterface $aboutNode
 *   The entity About microsite.
 * @param string $currentTid
 *   The Tid variable from the term.
 */
function _nys_senators_create_senator_microsite_inactive(EntityInterface $entity, NodeInterface $aboutNode, string $currentTid) {
  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = $entity;

  // Loads the Inactive term.
  $inactiveTerm = \Drupal::service('entity_type.manager')
    ->getStorage('taxonomy_term')
    ->loadByProperties([
      'vid' => 'microsite_page_type',
      'name' => 'Inactive',
    ]);
  $inactiveTerm = reset($inactiveTerm);

  // Creates hero block to be attached to the microsite content.
  $heroBlock = BlockContent::create([
    'info' => $entity->label() . ' - Hero block',
    'type' => 'microsite_hero',
    'revision_user' => 1,
    'field_senator' => [
      'target_id' => $entity->id(),
    ],
  ]);
  $heroBlock->save();

  // Creates inactive senator block to be attached to the microsite content.
  $inactiveSenatorBlock = BlockContent::create([
    'info' => $entity->label() . ' - Inactive block',
    'type' => 'inactive_senator_block',
    'revision_user' => 1,
  ]);
  $inactiveSenatorBlock->save();

  // Inactive Microsite page node values.
  $nodeValues = [
    'type' => 'microsite_page',
    'status' => 1,
    'uid' => 1,
    'title' => $entity->label(),
    'field_microsite_page_type' => [
      'target_id' => $inactiveTerm->id(),
    ],
    'field_block' => [
      [
        'target_id' => $heroBlock->id(),
        'target_revision_id' => $heroBlock->getRevisionId(),
      ],
      [
        'target_id' => $inactiveSenatorBlock->id(),
        'target_revision_id' => $inactiveSenatorBlock->getRevisionId(),
      ],
    ],
    'field_senator_multiref' => [
      [
        'target_id' => $currentTid,
      ],
    ],
  ];

  // Checks if aboutNode is set and has blocks to iterate with.
  if ($aboutNode instanceof NodeInterface
    && $aboutNode->hasField('field_block')
    && !$aboutNode->get('field_block')->isEmpty()) {
    // Iterates through each field block.
    foreach ($aboutNode->get('field_block') as $key => $value) {
      /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entityReference */
      $entityReference = $value->get('entity');
      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
      $block_content = $entityReference->getTarget()->getValue();

      if ($block_content instanceof BlockContent) {
        // Sets inactiveText for former Senator page.
        if ($block_content->bundle() === 'text') {
          $existingText = !$block_content->get('field_body_left')
            ->isEmpty() ? $block_content->get('field_body_left')
            ->getValue() : '';
          $existingText = !empty($existingText) ? $existingText[0]['value'] : '';
          $inactiveHeader = '<h2>About Former Senator ' . $term->getName() . '\'s</h2>';
          $inactiveFooter = '<div><p><em>Last edited by Senator ' . $term->getName() . '\'s staff prior to last day in office.</em></p></div>';
          $inactiveText = $inactiveHeader . $existingText . $inactiveFooter;
        }
      }
    }
  }

  // Checks if inactiveText is set.
  if (isset($inactiveText)) {
    // Creates inactive text senator block to copy the about page information
    // and attach to the inactive microsite content.
    $textSenatorBlock = BlockContent::create([
      'field_title' => $entity->label() . ' - Text block',
      'type' => 'text',
      'revision_user' => 1,
      'field_body_left' => $inactiveText,
    ]);
    $textSenatorBlock->save();

    $nodeValues['field_block'][] = [
      'target_id' => $textSenatorBlock->id(),
      'target_revision_id' => $textSenatorBlock->getRevisionId(),
    ];
  }

  // Creates the new microsite page.
  $node = Node::create($nodeValues);
  $node->save();
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function nys_senators_pathauto_pattern_alter(PathautoPattern &$pattern, array $context) {
  // When nodes are created or updated, alter pattern with criteria logic.
  if ($context['module'] === 'node'
    && $context['bundle'] === 'microsite_page'
    && ($context['op'] === 'insert' || $context['op'] === 'update')) {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $context['data']['node'];

    $replacements = [];
    if ($node->hasField('field_microsite_page_type')
      && !$node->get('field_microsite_page_type')->isEmpty()) {
      $tid = $node->field_microsite_page_type->getValue()[0]['target_id'] ?? '';
      $term = Term::load($tid);
      if ($term instanceof TermInterface && !empty($term->getName())) {
        switch ($term->getName()) {
          case 'Landing':
            if ($node->hasField('field_senator_multiref')
              && !$node->get('field_senator_multiref')->isEmpty()) {
              $sid = $node->field_senator_multiref->getValue()[0]['target_id'] ?? '';
              $senator = Term::load($sid);
              // Checks if the senator isn't active.
              if ($senator->field_active_senator->value === '0') {
                $replacements[] = 'landing';
              }
              // Updates the inactive site state to prevent pathauto
              // from replacing the old url with a new one.
              else {
                // Queries looking for the Inactive microsite page.
                $inactiveMicrosites = \Drupal::entityQuery('node')
                  ->accessCheck(FALSE)
                  ->condition('type', 'microsite_page')
                  ->condition('field_senator_multiref', [$senator->id()], 'IN')
                  ->condition('field_microsite_page_type.entity:taxonomy_term.name', 'Inactive')
                  ->execute();

                // Checks if the senator has an inactive page created.
                if ($inactiveMicrosites) {
                  $inactiveMicrosites = Node::loadMultiple($inactiveMicrosites);
                  foreach ($inactiveMicrosites as $inactiveMicrosite) {
                    $inactiveMicrosite->set('status', NodeInterface::PUBLISHED);
                    $inactiveMicrosite->save();
                  }
                }

                $replacements[] = '';
              }
            }
            break;

          case 'Inactive':
            if ($node->hasField('field_senator_multiref')
              && !$node->get('field_senator_multiref')->isEmpty()) {
              $sid = $node->field_senator_multiref->getValue()[0]['target_id'] ?? '';
              $senator = Term::load($sid);
              // Check if the senator is active.
              if ($senator->field_active_senator->value === '0') {
                $replacements[] = '';
              }
              else {
                $replacements[] = 'inactive';
              }
            }
            break;

          case 'About':
          case 'Newsroom':
          case 'Legislation':
          case 'Contact':
          case 'Thankful':
            // @todo Add extra logic if needed.
            break;

          case 'Our District':
            $replacements[] = 'district';
            break;

          case 'Events':
            $replacements[] = 'calendar';
            break;

          case 'Earth Day':
            $replacements[] = 'earthday';
            break;

        }
      }
    }

    if ($replacements) {
      $replacements = implode('/', $replacements);

      // Replace default "[node:field_microsite_page_type:entity:name]" with
      // the dynamic pattern set before in the replacements array.
      $pattern->setPattern(preg_replace('/\[node:field_microsite_page_type:entity:name\]/', $replacements . '$1', $pattern->getPattern()));
    }
  }
}

/**
 * Implements hook_token_info().
 */
function nys_senators_token_info() {
  // Adds current page senator name token.
  $info['tokens']['current-page']['senator-name'] = [
    'name' => t('Current Page Senator name'),
    'description' => t('The current page senator name'),
    'needs-data' => 'node',
  ];

  // Adds current page senator TID token.
  $info['tokens']['current-page']['senator-tid'] = [
    'name' => t('Current Page Senator TID'),
    'description' => t('The current page senator TID'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function nys_senators_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type === 'current-page') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'senator-name':
          $node = \Drupal::routeMatch()->getParameter('node');
          if ($node instanceof NodeInterface
            && $node->hasField('field_senator_multiref')
            && !$node->get('field_senator_multiref')->isEmpty()) {
            $term = $node->field_senator_multiref->entity;
            $senator_name = ($term instanceof TermInterface && !empty($term->getName())) ? $term->getName() : '';
            $replacements[$original] = $senator_name;
          }
          break;

        case 'senator-tid':
          $node = \Drupal::routeMatch()->getParameter('node');
          if ($node instanceof NodeInterface
            && $node->hasField('field_senator_multiref')
            && !$node->get('field_senator_multiref')->isEmpty()) {
            $term = $node->field_senator_multiref->entity;
            $senator_tid = ($term instanceof TermInterface && !empty($term->id())) ? $term->id() : '';
            $replacements[$original] = $senator_tid;
          }
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Alter replacement values for placeholder tokens.
 */
function nys_senators_tokens_alter(array &$replacements, array $context, BubbleableMetadata $bubbleable_metadata) {
  if ($context['type'] == 'node' && !empty($context['data']['node']) && !empty($replacements['[node:field_microsite_page_type:entity:name]'])) {
    $node = $context['data']['node'];

    $page_type = $node->field_microsite_page_type->entity;
    // Set the token to null if page type is landing.
    if (!empty($page_type) && $page_type->label() === 'Landing') {
      $replacements['[node:field_microsite_page_type:entity:name]'] = '';
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function nys_senators_views_data_alter(array &$data) {
  $data['taxonomy_term_field_data']['senator_committee_filter'] = [
    'title' => t('Committees'),
    'filter' => [
      'title' => t('Committees'),
      'help' => t('Is this Committee linked to the senator.'),
      'field' => 'tid',
      'id' => 'senator_committee_filter',
    ],
  ];
  $data['taxonomy_term_data']['senator_district'] = [
    'title' => t("Senator's District"),
    'field' => [
      'title' => t("Senator's District"),
      'help' => t('Shows District information of the senator.'),
      'id' => 'senator_district',
    ],
  ];
}

/**
 * Adds Earth Day & Thankful Microsite pages on existing senators.
 */
function _nys_senators_create_microsites(EntityInterface $entity) {
  // Gets the senator name value.
  $senator_name = $entity->label();

  // Creates hero block to be attached to the microsite content.
  $heroBlock = BlockContent::create([
    'info' => $senator_name . ' - Hero block',
    'type' => 'microsite_hero',
    'revision_user' => 1,
    'field_senator' => [
      'target_id' => $entity->id(),
    ],
  ]);
  $heroBlock->save();

  // Creates menu block to be attached to the microsite content.
  $menuBlock = BlockContent::create([
    'info' => $senator_name . ' - Menu block',
    'type' => 'senator_microsite_menu',
    'revision_user' => 1,
  ]);
  $menuBlock->save();

  // Creates thankful block to be attached to the microsite content.
  $thankfulBlock = BlockContent::create([
    'info' => $senator_name . ' - Thankful Letter Block',
    'type' => 'thankful_letter',
    'revision_user' => 1,
    'field_senator' => [
      'target_id' => $entity->id(),
    ],
  ]);
  $thankfulBlock->save();

  // Creates earth day block to be attached to the microsite content.
  $earthDayBlock = BlockContent::create([
    'info' => $senator_name . ' - Earth Day Letter Block',
    'type' => 'earth_day_letter',
    'revision_user' => 1,
    'field_senator' => [
      'target_id' => $entity->id(),
    ],
  ]);
  $earthDayBlock->save();

  // Creates sincerely block to be attached to the microsite content.
  $sincerelyBlock = BlockContent::create([
    'info' => $senator_name . ' - Sincerely Block',
    'type' => 'sincerely',
    'revision_user' => 1,
    'field_senator' => [
      'target_id' => $entity->id(),
    ],
  ]);
  $sincerelyBlock->save();

  $termEntityManager = \Drupal::service('entity_type.manager')
    ->getStorage('taxonomy_term');
  $micrositeTypes = $termEntityManager->loadByProperties([
    'vid' => 'microsite_page_type',
  ]);

  $senatorMicrosites = [
    'Earth Day',
    'Thankful',
  ];

  foreach ($micrositeTypes as $micrositeType) {
    if (in_array($micrositeType->getName(), $senatorMicrosites)) {
      // Default node values.
      $nodeValues = [
        'type' => 'microsite_page',
        'status' => 1,
        'uid' => 1,
        'field_microsite_page_type' => [
          'target_id' => $micrositeType->id(),
        ],
        'field_block' => [
          [
            'target_id' => $heroBlock->id(),
            'target_revision_id' => $heroBlock->getRevisionId(),
          ],
          [
            'target_id' => $menuBlock->id(),
            'target_revision_id' => $menuBlock->getRevisionId(),
          ],
        ],
        'field_senator_multiref' => [
          [
            'target_id' => $entity->id(),
          ],
        ],
      ];

      switch ($micrositeType->getName()) {
        case 'Thankful':
          $nodeValues['title'] = '2021 Thanksgiving Day Creative Celebration';
          $nodeValues['field_block'][] = [
            'target_id' => $thankfulBlock->id(),
            'target_revision_id' => $thankfulBlock->getRevisionId(),
          ];
          break;

        case 'Earth Day':
          $nodeValues['title'] = '2021 Earth Day Poster Contest Celebration';
          $nodeValues['field_block'][] = [
            'target_id' => $earthDayBlock->id(),
            'target_revision_id' => $earthDayBlock->getRevisionId(),
          ];
          break;

      }

      $nodeValues['field_block'][] = [
        'target_id' => $sincerelyBlock->id(),
        'target_revision_id' => $sincerelyBlock->getRevisionId(),
      ];

      $node = Node::create($nodeValues);
      $node->save();
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function nys_senators_node_presave(NodeInterface $entity): void {
  _nys_senators_rules_title_all_caps($entity);
  _nys_senators_rules_no_issues($entity);
}

/**
 * Posts a warning message if an entity's title is all capital letters.
 */
function _nys_senators_rules_title_all_caps(NodeInterface $entity): void {
  $bundles_to_check = [
    'article',
    'petition',
    'promotional_banner',
  ];
  if (
    in_array($entity->bundle(), $bundles_to_check)
    && strtoupper($entity->getTitle()) === $entity->getTitle()
  ) {
    // Generate the message (with embedded links).
    $link_gen = \Drupal::linkGenerator();
    // Link 1 ("best practices") was a link, but the URL is no longer valid.
    // Replace if one is ever found.
    $links = [
      '@link_1' => t('best practices'),
      '@link_2' => $link_gen->generate(t('title case'), Url::fromUri('http://www.titlecase.com')),
      '@link_3' => $link_gen->generate('helpline@nysenate.gov', Url::fromUri('mailto:helpline@nysenate.gov?Subject=Bulk headline conversion request')),
    ];
    $msg_text = t("The title of this piece of content includes words typeset in ALL CAPS. This style is inconsistent with @link_1, and it is not supported well by NYSenate.gov's header typeface. For readability purposes, please consider posting in @link_2 instead. If you would like assistance bulk converting all of your content headlines to title case, please send a request to @link_3.", $links);
    \Drupal::messenger()->addWarning($msg_text);
  }
}

/**
 * Updates the Earth Day & Thankful Microsite pages on existing senators.
 */
function _nys_senators_update_microsites(EntityInterface $entity) {
  // Gets the senator name value.
  $senator_name = $entity->label();

  $termEntityManager = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  $micrositeTypes = $termEntityManager->loadByProperties([
    'vid' => 'microsite_page_type',
  ]);

  $senatorMicrosites = [
    'Earth Day',
    'Thankful',
  ];

  foreach ($micrositeTypes as $micrositeType) {
    if (in_array($micrositeType->getName(), $senatorMicrosites)) {

      $microsite_page = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
        'type' => 'microsite_page',
        'field_senator_multiref' => $entity->id(),
        'field_microsite_page_type' => $micrositeType->id(),
      ]);

      $page = NULL;
      if (!empty($microsite_page)) {
        $page = reset($microsite_page);

        if ($page->hasField('field_block') && !$page->get('field_block')->isEmpty()) {
          foreach ($page->get('field_block') as $key => $value) {
            /** @var \Drupal\block_content\Entity\BlockContent $block_content */
            $block_content = $value->entity ?? NULL;
            if ($block_content instanceof BlockContent) {
              if ($block_content->bundle() == 'earth_day_letter') {
                $block = BlockContent::create([
                  'info' => $senator_name . ' - Earth Day Letter Block',
                  'type' => 'senator_microsite_school_forms',
                  'revision_user' => 1,
                  'field_microsite_school_form' => [
                    'plugin_id' => 'nys_senators_microsite_school_forms',
                    'settings' => [],
                  ],
                ]);
                $block->save();

                $page->field_block[$key] = [
                  'target_id' => $block->id(),
                  'target_revision_id' => $block->getRevisionId(),
                ];
                $page->save();
              }
              elseif ($block_content->bundle() == 'thankful_letter') {
                $block = BlockContent::create([
                  'info' => $senator_name . ' - Thankful Letter Block',
                  'type' => 'senator_microsite_school_forms',
                  'revision_user' => 1,
                  'field_microsite_school_form' => [
                    'plugin_id' => 'nys_senators_microsite_school_forms',
                    'settings' => [],
                  ],
                ]);
                $block->save();

                $page->field_block[$key] = [
                  'target_id' => $block->id(),
                  'target_revision_id' => $block->getRevisionId(),
                ];
                $page->save();
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Posts a warning message if no related issues have been set on an entity.
 */
function _nys_senators_rules_no_issues(NodeInterface $entity): void {
  $bundles_to_check = [
    'article',
    'event',
    'petition',
    'public_hearing',
    'video',
  ];
  if (in_array($entity->bundle(), $bundles_to_check)
    && ($field = $entity->get('field_issues'))
    && (!count($field->referencedEntities()))
  ) {
    $link_gen = \Drupal::linkGenerator();
    $link = $link_gen->generate(t('issues'), Url::fromUri('internal:/explore-issues', ['absolute' => TRUE]));
    $msg = t('No @link have been associated with this piece of content. Add up to three issue tags to help users discover this content.', ['@link' => $link]);
    \Drupal::messenger()->addWarning($msg);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function nys_senators_query_nys_senators_access_alter(AlterableInterface $query) {
  // Add op metadata so node_access is used.
  $query->addMetaData('op', 'update');
}

/**
 * Rearrange the Earth Day & Thankful Microsite pages blocks order.
 */
function _nys_senators_rearrange_microsites_blocks(EntityInterface $entity) {
  // Gets the senator name value.
  $senator_name = $entity->label();

  $termEntityManager = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  $micrositeTypes = $termEntityManager->loadByProperties([
    'vid' => 'microsite_page_type',
  ]);

  $senatorMicrosites = [
    'Earth Day',
    'Thankful',
  ];

  foreach ($micrositeTypes as $micrositeType) {
    if (in_array($micrositeType->getName(), $senatorMicrosites)) {

      $microsite_page = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
        'type' => 'microsite_page',
        'field_senator_multiref' => $entity->id(),
        'field_microsite_page_type' => $micrositeType->id(),
      ]);

      $page = NULL;
      if (!empty($microsite_page)) {
        $page = reset($microsite_page);

        if ($page->hasField('field_block') && !$page->get('field_block')->isEmpty()) {
          foreach ($page->get('field_block') as $key => $value) {
            /** @var \Drupal\block_content\Entity\BlockContent $block_content */
            $block_content = $value->entity ?? NULL;

            // Revert the Letter blocks.
            if ($key == 2) {
              switch ($micrositeType->getName()) {
                case 'Thankful':
                  $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties([
                    'type' => 'thankful_letter',
                    'info' => $senator_name . ' - Thankful Letter Block',
                  ]);
                  if (!empty($block)) {
                    $thankfulBlock = reset($block);
                  }
                  else {
                    $thankfulBlock = BlockContent::create([
                      'info' => $senator_name . ' - Thankful Letter Block',
                      'type' => 'thankful_letter',
                      'revision_user' => 1,
                    ]);
                    $thankfulBlock->save();
                  }
                  $page->field_block[$key] = [
                    'target_id' => $thankfulBlock->id(),
                    'target_revision_id' => $thankfulBlock->getRevisionId(),
                  ];
                  break;

                case 'Earth Day':
                  $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties([
                    'type' => 'earth_day_letter',
                    'info' => $senator_name . ' - Earth Day Letter Block',
                  ]);
                  if (!empty($block)) {
                    $earthDayBlock = reset($block);
                  }
                  else {
                    $earthDayBlock = BlockContent::create([
                      'info' => $senator_name . ' - Earth Day Letter Block',
                      'type' => 'earth_day_letter',
                      'revision_user' => 1,
                    ]);
                    $earthDayBlock->save();
                  }
                  $page->field_block[$key] = [
                    'target_id' => $earthDayBlock->id(),
                    'target_revision_id' => $earthDayBlock->getRevisionId(),
                  ];
                  break;

                default:
                  break;
              }
            }
          }

          // Re-add the Submission Results Block.
          switch ($micrositeType->getName()) {
            case 'Thankful':
              $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties([
                'type' => 'senator_microsite_school_forms',
                'info' => $senator_name . ' - Thankful Letter Block',
              ]);
              if (!empty($block)) {
                $thankfulBlock = reset($block);
                $thankfulBlock->info = $senator_name . ' - Submission Results Block';
                $thankfulBlock->save();
              }
              else {
                $thankfulBlock = BlockContent::create([
                  'info' => $senator_name . ' - Submission Results Block',
                  'type' => 'senator_microsite_school_forms',
                  'revision_user' => 1,
                  'field_microsite_school_form' => [
                    'plugin_id' => 'nys_senators_microsite_school_forms',
                    'settings' => [],
                  ],
                ]);
                $thankfulBlock->save();
              }
              $page->field_block[] = [
                'target_id' => $thankfulBlock->id(),
                'target_revision_id' => $thankfulBlock->getRevisionId(),
              ];
              break;

            case 'Earth Day':
              $block = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties([
                'type' => 'senator_microsite_school_forms',
                'info' => $senator_name . ' - Earth Day Letter Block',
              ]);
              if (!empty($block)) {
                $earthDayBlock = reset($block);
                $earthDayBlock->info = $senator_name . ' - Submission Results Block';
                $earthDayBlock->save();
              }
              else {
                $earthDayBlock = BlockContent::create([
                  'info' => $senator_name . ' - Submission Results Block',
                  'type' => 'senator_microsite_school_forms',
                  'revision_user' => 1,
                  'field_microsite_school_form' => [
                    'plugin_id' => 'nys_senators_microsite_school_forms',
                    'settings' => [],
                  ],
                ]);
                $earthDayBlock->save();
              }
              $page->field_block[] = [
                'target_id' => $earthDayBlock->id(),
                'target_revision_id' => $earthDayBlock->getRevisionId(),
              ];
              break;

            default:
              break;
          }

          // Save the node.
          $page->save();
        }
      }
    }
  }
}

/**
 * Remove the Earth Day & Thankful Letter blocks.
 */
function _nys_senators_remove_letter_blocks(EntityInterface $entity) {
  // Gets the senator name value.
  $senator_name = $entity->label();

  $termEntityManager = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  $micrositeTypes = $termEntityManager->loadByProperties([
    'vid' => 'microsite_page_type',
  ]);

  $senatorMicrosites = [
    'Earth Day',
    'Thankful',
  ];

  foreach ($micrositeTypes as $micrositeType) {
    if (in_array($micrositeType->getName(), $senatorMicrosites)) {

      $microsite_page = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
        'type' => 'microsite_page',
        'field_senator_multiref' => $entity->id(),
        'field_microsite_page_type' => $micrositeType->id(),
      ]);

      $page = NULL;
      if (!empty($microsite_page)) {
        $page = reset($microsite_page);

        if ($page->hasField('field_block') && !$page->get('field_block')->isEmpty()) {
          foreach ($page->get('field_block') as $key => $value) {
            /** @var \Drupal\block_content\Entity\BlockContent $block_content */
            $block_content = $value->entity ?? NULL;

            if ($block_content instanceof BlockContent) {
              // Remove the Letter blocks.
              if ($key == 2) {
                if ($block_content->bundle() == 'thankful_letter') {
                  unset($page->field_block[$key]);
                }
                elseif ($block_content->bundle() == 'earth_day_letter') {
                  unset($page->field_block[$key]);
                }

                // Save the node.
                $page->save();
              }
            }
          }
        }
      }
    }
  }
}
