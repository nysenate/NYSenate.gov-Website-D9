<?php

/**
 * @file
 * Functions to support theming in the NY Senate theme.
 */

declare(strict_types=1);

use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function nys_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add page suggestions based on the current page route.
  $route_name = \Drupal::routeMatch()->getRouteName();
  $route_name = str_replace('-', '_', $route_name);
  $route_name = str_replace('.', '__', $route_name);
  $suggestions[] = "page__route__{$route_name}";
}

/**
 * Implements hook_preprocess_nys_senator_dashboard_constituent_engagement().
 */
function nys_preprocess_nys_senator_dashboard_constituent_engagement(&$variables) {
  foreach ($variables['items'] as &$item) {
    $item['icon'] = match ($item['id']) {
      'new-constituents' => 'group',
      'responses-to-bills' => 'gavel',
      'responses-to-petitions' => 'question',
      'responses-to-questionnaires' => 'clipboard',
      default => '',
    };
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function nys_preprocess_menu__senator_dashboard__header_menu(&$variables) {
  // Find the items that are overview pages.
  $find_overview = function (&$items) {
    foreach ($items as $key => &$item) {
      if (str_ends_with($key, '.overview')) {
        $item['attributes']->addClass('c-menu--item-overview');
      }
    }
  };

  // Strip out dropdown for nested management sections.
  $setup_mega_menu = function (&$items) {
    foreach ($items as &$item) {
      if ($item['below']) {
        $item['is_expanded'] = FALSE;
        $item['url'] = Url::fromRoute('<nolink>');
      }
    }
  };

  foreach ($variables['items'] as $key => &$item) {
    // Set icons for primary level items.
    $item['icon'] = match ($key) {
      'senator_dashboard.manage_senator' => 'file-pen',
      'senator_dashboard.constituent_activity' => 'users',
      default => '',
    };

    // Set class for mega menu in dashboard.
    if ($key == 'senator_dashboard.manage_senator') {
      $item['attributes']->addClass('c-menu__item-mega');
      $setup_mega_menu($item['below']);
    }

    if ($item['below']) {
      $item['url'] = Url::fromRoute('<button>');
      $find_overview($item['below']);
    }
  }

  _nys_prepare_menu_items($variables['items']);
}

/**
 * Implements hook_preprocess_menu().
 */
function nys_preprocess_menu__senator_dashboard__manage_senator_menu(&$variables) {
  $variables['items'] = _nys_prepare_activity_menu_items(
    $variables['items'],
    'senator_dashboard.manage_senator'
  );
}

/**
 * Implements hook_preprocess_menu().
 */
function nys_preprocess_menu__senator_dashboard__constituent_activity_menu(&$variables) {
  $variables['items'] = _nys_prepare_activity_menu_items(
    $variables['items'],
    'senator_dashboard.constituent_activity'
  );
}

/**
 * Implements hook_preprocess_nys_senator_dashboard().
 */
function nys_preprocess_nys_senator_dashboard__set_active_senator_menu(&$variables) {
  // Massage senator data to align with general menu items as well. $active_link
  // should serve as the top level menu item. Any additional items should be
  // nested below. We also toggle out what is used for the URL if $active_link
  // is the only item.
  $variables['items'] = [];
  $active_link = [];
  $additional_links = [];

  foreach ($variables['active_senator_links'] as $link) {
    $link['title'] = $link['label'];
    $link['attributes'] = new Attribute();

    if ($link['is_active']) {
      $active_link = $link;
      $active_link['is_expanded'] = TRUE;
      $active_link['is_collapsed'] = FALSE;
      $active_link['in_active_trail'] = FALSE;
    }
    else {
      $additional_links[] = $link;
    }
  }

  if (!empty($active_link)) {
    $active_link['url'] = !empty($active_link['url'])
      ? Url::fromRoute('<button>')
      : Url::fromUri($active_link['homepage_url']);

    $active_link['icon'] = 'briefcase';
    $active_link['below'] = $additional_links;
    $variables['items'][] = $active_link;
  }

  _nys_prepare_menu_items($variables['items']);
}

/**
 * Process default items into menus.
 *
 * @param array $items
 *   An array of menu items.
 */
function _nys_prepare_menu_items(array &$items) {
  foreach ($items as &$item) {
    $link_attributes = $item['url']->getOption('attributes') ?? [];

    if (isset($link_attributes['class']) && is_string($link_attributes['class'])) {
      $link_attributes['class'] = explode(' ', $link_attributes['class']);
    }

    $link_attributes['class'][] = 'c-menu__link';

    // Add the data-plugin-id attribute based on the menu link's plugin ID.
    // This is utilized in the menu components.
    if (isset($item['original_link'])) {
      $plugin_id = $item['original_link']->getPluginId();
      $link_attributes['data-plugin-id'] = Html::getUniqueId($plugin_id);
    }

    $item['url']->setOption('attributes', $link_attributes);

    // Set classes for the link wrapper.
    $item_classes = ['c-menu__item'];

    if ($item['is_expanded'] ?? FALSE) {
      $item_classes[] = 'c-menu__item-expanded';
    }

    if ($item['is_collapsed'] ?? FALSE) {
      $item_classes[] = 'c-menu__item-collapsed';
    }

    if ($item['in_active_trail'] ?? FALSE) {
      $item_classes[] = 'c-menu__item-active-trail';
    }

    $item['attributes']->addClass($item_classes);

    if (!empty($item['below'])) {
      _nys_prepare_menu_items($item['below']);
    }
  }
}

/**
 * Remove extra items from passed items for a senator dashboard overview page.
 *
 * @param array $items
 *   The menu items.
 * @param string $parent
 *   The menu route items to clean up.
 *
 * @return array
 *   The cleaned up menu items.
 */
function _nys_prepare_activity_menu_items(array $items = [], string $parent = ''): array {
  // Manipulate the data to only show the manage senator links. This is making
  // several assumptions. The top level is the container for the overall menu.
  // This is because the menu would likely contain other sections. Below that
  // there is an overview link we don't want. We'll only need the other items.
  $items = $items[$parent]['below'];

  foreach ($items as $key => $item) {
    if (str_ends_with($key, '.overview')) {
      unset($items[$key]);
    }
  }

  return $items;
}
