<?php

/**
 * @file
 * Functions to support theming in the NY Senate theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_menu().
 */
function nys_preprocess_menu__senator_dashboard(&$variables) {
  // Find the items that are overview pages.
  $find_overview = function (&$items) {
    foreach ($items as $key => &$item) {
      $item['is_overview'] = str_ends_with($key, '.overview');
    }
  };

  foreach ($variables['items'] as $key => &$item) {
    // Set icons for primary level items.
    $item['icon'] = match ($key) {
      'senator_dashboard.manage_senator' => 'file-pen',
      'senator_dashboard.constituent_activity' => 'users',
      default => '',
    };

    // Set class for mega menu in dashboard.
    if ($key == 'senator_dashboard.manage_senator') {
      $item['attributes']->addClass('c-menu__item-mega');
    }

    if ($item['below']) {
      $item['url'] = Url::fromRoute('<button>');
      $find_overview($item['below']);
    }
  }

  _nys_prepare_menu_items($variables['items']);
}

/**
 * Implements hook_preprocess_nys_senator_dashboard().
 */
function nys_preprocess_nys_senator_dashboard__set_active_senator_menu(&$variables) {
  // Massage senator data to align with general menu items as well. $active_link
  // should serve as the top level menu item. Any additional items should be
  // nested below. We also toggle out what is used for the URL if $active_link
  // is the only item.
  $variables['items'] = [];
  $active_link = [];
  $additional_links = [];

  foreach ($variables['active_senator_links'] as $link) {
    $link['title'] = $link['label'];
    $link['attributes'] = new Attribute();

    if ($link['is_active']) {
      $active_link = $link;
      $active_link['is_expanded'] = TRUE;
      $active_link['is_collapsed'] = FALSE;
      $active_link['in_active_trail'] = FALSE;
    }
    else {
      $additional_links[] = $link;
    }
  }

  $active_link['url'] = !empty($active_link['url'])
    ? Url::fromRoute('<button>')
    : Url::fromUri($active_link['homepage_url']);

  $active_link['icon'] = 'briefcase';
  $active_link['below'] = $additional_links;
  $variables['items'][] = $active_link;

  _nys_prepare_menu_items($variables['items']);
}

/**
 * Process default items into menus.
 *
 * @param array $items
 *   An array of menu items.
 */
function _nys_prepare_menu_items(array &$items) {
  foreach ($items as &$item) {
    $link_attributes = $item['url']->getOption('attributes') ?? [];

    if (isset($link_attributes['class']) && is_string($link_attributes['class'])) {
      $link_attributes['class'] = explode(' ', $link_attributes['class']);
    }

    $link_attributes['class'][] = 'c-menu__link';

    // Add the data-plugin-id attribute based on the menu link's plugin ID.
    // This is utilized in the menu components.
    if (isset($item['original_link'])) {
      $plugin_id = $item['original_link']->getPluginId();
      $link_attributes['data-plugin-id'] = Html::getUniqueId($plugin_id);
    }

    $item['url']->setOption('attributes', $link_attributes);

    // Set classes for the link wrapper.
    $item_classes = ['c-menu__item'];

    if ($item['is_expanded'] ?? FALSE) {
      $item_classes[] = 'c-menu__item-expanded';
    }

    if ($item['is_collapsed'] ?? FALSE) {
      $item_classes[] = 'c-menu__item-collapsed';
    }

    if ($item['in_active_trail'] ?? FALSE) {
      $item_classes[] = 'c-menu__item-active-trail';
    }

    $item['attributes']->addClass($item_classes);

    if (!empty($item['below'])) {
      _nys_prepare_menu_items($item['below']);
    }
  }
}
