<?php

/**
 * @file
 * Functions to support theming in the rain_theme theme.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\views\Views;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Component\Utility\Html;
use Drupal\taxonomy\TermInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\block_content\Entity\BlockContent;
use Drupal\address\Plugin\Field\FieldType\AddressItem;

/**
 * Implements hook_preprocess_menu_ID().
 */
function nysenate_theme_preprocess_menu__socials(&$variables) {
  $socials = [];
  foreach ($variables['items'] as $link) {
    $socials[] = [
      'icon' => $link['title'],
      'url' => $link['url']->toString(),
    ];
  }
  $variables['socials'] = $socials;
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__system_branding_block(&$variables) {
  $variables['site_branding'] = [
    'text' => $variables['site_name'],
    'img' => [
      'url' => 'https://www.nysenate.gov/sites/all/themes/nysenate/images/nys_logo224x224.png',
      'alt' => 'New York State Senate Seal',
    ],
    'link' => Url::fromRoute('<front>'),
  ];
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__twitterblock(&$variables) {
  $args = [
    '@username' => $variables['configuration']['username'],
  ];

  // Follow link.
  $variables['content']['follow_link'] = [
    '#type' => 'link',
    '#title' => t('Follow'),
    '#url' => Url::fromUri(strtr('https://twitter.com/intent/follow?screen_name=@username', $args)),
  ];

  // Account link.
  $variables['content']['account_link'] = [
    '#type' => 'link',
    '#title' => strtr('@@username', $args),
    '#url' => Url::fromUri(strtr('https://twitter.com/@username', $args)),
  ];

  // Profile image.
  $variables['content']['profile_image'] = [
    '#markup' => strtr('<img src="https://unavatar.io/twitter/@username" width="100" height"100" />', $args),
  ];
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__article(&$variables) {
  $variables['title'] = $variables['label'][0]['#context']['value'];
  if (isset($variables['content']['field_date'][0]['#markup'])) {
    $variables['field_date'] = $variables['content']['field_date'][0]['#markup'];
  }

  if (isset($variables['content']['field_issues'])) {
    $issues = [];
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
      $issues[] = $url;
    }
    $variables['issues'] = $issues;
  }

  if (isset($variables['content']['field_majority_issue_tag'])) {
    foreach ($variables['content']['field_majority_issue_tag'] as $key => $field_majority_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $variables['majority_issue'] = Link::fromTextAndUrl($field_majority_issues['#title'], $field_majority_issues['#url']);
    }
  }

  if (isset($variables['content']['field_image_caption'][0])) {
    $variables['image_caption'] = $variables['content']['field_image_caption'][0]['#context']['value'];
  }

}

/**
 * Implements hook_preprocess_block_content__ID().
 */
function nysenate_theme_preprocess_block_content__microsite_contact(&$variables) {
  $block = $variables['elements']['#block_content'];

  $id = NULL;
  if ($block->hasField('field_senator') && !$block->get('field_senator')->isEmpty()) {
    $id = $block->field_senator->target_id;
  }

  $contact_type = '';
  if ($block->hasField('field_contact_type') && !$block->get('field_contact_type')->isEmpty()) {
    $contact_type = $block->field_contact_type->value;
    $variables['contact_type'] = $contact_type;
  }

  $senator = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->load($id);

  if (isset($senator->name->value) && !empty($senator->name->value)) {
    $variables['title'] = $senator->name->value . '\'s';
  }

  if ($contact_type == 'full') {
    if ($senator->hasField('field_email') && !$senator->get('field_email')->isEmpty()) {
      $variables['email'] = $senator->field_email->value;
    }

    if ($senator->hasField('field_offices') && !$senator->get('field_offices')->isEmpty()) {
      $offices = [];
      foreach ($senator->field_offices as $field_office) {
        $office = $field_office->entity;
        $name = '';
        $street = '';
        $additional = '';
        $city = '';
        $province = '';
        $postal_code = '';
        if ($office->hasField('field_office_address') && !$office->get('field_office_address')->isEmpty()) {
          $address = $office->field_office_address;
          $loc = '';
          if (!empty($address->organization)) {
            $name = $address->organization;
          }

          if (!empty($address->address_line1)) {
            $street = $address->address_line1;
            $loc = $street . ', ';
          }

          if (!empty($address->address_line2)) {
            $additional = $address->address_line2;
            $loc = $additional . ', ';
          }

          if (!empty($address->locality)) {
            $city = $address->locality;
            $loc .= $city . ', ';
          }

          if (!empty($address->administrative_area)) {
            $province = $address->administrative_area;
            $loc .= $province . ', ';
          }

          if (!empty($address->postal_code)) {
            $postal_code = $address->postal_code;
            $loc .= $postal_code;
          }
        }

        // Office hours.
        $office_hours = '';
        if ($office->hasField('field_office_hours') && !$office->get('field_office_hours')->isEmpty()) {
          $office_hours = $office->field_office_hours->value;
        }

        // Phone number.
        $phone = '';
        if ($office->hasField('field_office_contact_phone') && !$office->get('field_office_contact_phone')->isEmpty()) {
          $phone = $office->field_office_contact_phone->value;
        }

        // Fax.
        $fax = '';
        if ($office->hasField('field_fax') && !$office->get('field_fax')->isEmpty()) {
          $fax = $office->field_fax->value;
        }

        $offices[] = [
          'name' => $name,
          'street' => $street,
          'additional' => $additional,
          'city' => $city,
          'province' => $province,
          'postal_code' => $postal_code,
          'office_hours' => $office_hours,
          'phone' => $phone,
          'fax' => $fax,
          'loc' => !empty($loc) ? urlencode($loc) : '',
        ];
      }

      $variables['office_locations'] = $offices;
    }

    if ($senator->hasField('field_office_contacts') && !$senator->get('field_office_contacts')->isEmpty()) {
      $contacts = [];
      foreach ($senator->field_office_contacts as $office_contact) {
        $contact = $office_contact->entity;

        $contacts[] = [
          'name' => $contact->field_office_contact_name->value ?? '',
          'title' => $contact->field_office_contact_title->value ?? '',
          'phone' => $contact->field_office_contact_phone->value ?? '',
          'email' => $contact->field_office_contact_email->value ?? '',
        ];
      }

      $variables['office_contacts'] = $contacts;
    }
  }
  elseif ($contact_type == 'media_inquiries') {
    if ($senator->hasField('field_media_contact') && !$senator->get('field_media_contact')->isEmpty()) {
      $variables['name'] = $senator->field_media_contact->value;
    }

    if ($senator->hasField('field_media_email') && !$senator->get('field_media_email')->isEmpty()) {
      $variables['email'] = $senator->field_media_email->value;
    }

    if ($senator->hasField('field_media_phone') && !$senator->get('field_media_phone')->isEmpty()) {
      $variables['phone'] = $senator->field_media_phone->value;
    }

    if ($senator->hasField('field_media_fax') && !$senator->get('field_media_fax')->isEmpty()) {
      $variables['fax'] = $senator->field_media_fax->value;
    }
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__microsite_hero(&$variables) {
  $sid = $variables['content']['field_senator'][0]['#plain_text'];
  $senator = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->load($sid);

  // Senator name.
  $senator_name = '';
  if ($senator->field_senator_name) {
    $title = $senator->field_senator_name->title ?? '';
    $given = $senator->field_senator_name->given ?? '';
    $family = $senator->field_senator_name->family ?? '';
    $senator_name = $title . ' ' . $given . ' ' . $family;
    $senator_name = trim($senator_name);
  }

  // Party Affiliation.
  $party_affiliation = $senator->get('field_party')->getValue();
  $arr_party = [];
  foreach ($party_affiliation as $party) {
    $arr_party[] = $party['value'];
  }
  $party = implode(', ', $arr_party);

  // District.
  $district_url = '';
  $query = \Drupal::database()->select('taxonomy_term__field_senator', 's')
    ->fields('s', ['entity_id'])
    ->condition('s.field_senator_target_id', $sid);
  $district_id = $query->execute()->fetchField();

  if (!empty($district_id)) {
    $district = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($district_id);
    $district_url = $district->toUrl()->toString();
  }

  $district_number = [
    'url' => $district_url,
    'text' => get_senator_district($sid) ?? '',
  ];

  // Social links.
  $socials = [];
  if (!empty($senator->field_facebook_url->value)) {
    $socials[] = [
      'name' => 'facebook',
      'url' => $senator->field_facebook_url->value,
    ];
  }

  if (!empty($senator->field_twitter_url->value)) {
    $socials[] = [
      'name' => 'twitter',
      'url' => $senator->field_twitter_url->value,
    ];
  }

  if (!empty($senator->field_youtube_url->value)) {
    $socials[] = [
      'name' => 'youtube',
      'url' => $senator->field_youtube_url->value,
    ];
  }

  if (!empty($senator->field_instagram_url->value)) {
    $socials[] = [
      'name' => 'instagram',
      'url' => $senator->field_instagram_url->value,
    ];
  }

  $variables['is_collapsed'] = strtolower($variables['content']['field_collapsed'][0]['#markup']) == 'on' ? TRUE : FALSE;
  $variables['senator_name'] = $senator_name;
  $variables['senator_party'] = '( ' . $party . ' )';
  $variables['current_duties'] = $senator->field_current_duties->value;
  $variables['district_number'] = $district_number;
  $variables['is_active'] = $senator->field_active_senator->value == 1 ? TRUE : FALSE;
  $variables['socials'] = $socials;
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_senator_microsite_menu_block(&$variables) {
  if (!empty($variables['menu_links'])) {
    $links = [];
    foreach ($variables['menu_links'] as $link) {
      $links[] = [
        'text' => $link['menu_title'],
        'url' => $link['menu_url'],
      ];
    }
    $variables['links'] = $links;
    /** @var \Drupal\node\NodeInterface $micrositeNode */
    $micrositeNode = \Drupal::routeMatch()->getParameter('node');
    if ($micrositeNode->hasField('field_senator_multiref') && !$micrositeNode->get('field_senator_multiref')->isEmpty()) {
      $tid = $micrositeNode->get('field_senator_multiref')->first()->getString() ?? '';
      if (!empty($tid)) {
        $senatorName = Term::load($tid)->get('name')->value;
        $variables['senatorName'] = $senatorName;
      }
    }
  }
}

/**
 * Implements hook_preproces_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__honoree_profile_block(&$variables) {
  $variables['title'] = $variables['elements']['#block_content']->label();
  if (!empty($variables['content']['field_link'][0])) {
    $variables['cta'] = [
      'text' => $variables['content']['field_link'][0]['#title'],
      'url' => $variables['content']['field_link'][0]['#url']->toString(),
    ];
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__quick_facts(&$variables) {
  $facts = [];
  $current_year = date('Y');
  if ($current_year % 2 == 0) {
    $session_year = $current_year - 1;
    $first_year   = $session_year;
    $second_year  = substr($current_year, -2);
  }
  else {
    $session_year = $current_year;
    $first_year   = $current_year;
    $second_year  = substr($current_year + 1, -2);
  }

  foreach ($variables['content']['field_quick_facts'] as $key => $items) {
    if (!is_numeric($key)) {
      continue;
    }

    $description = '';
    $statistic = '';

    if ($items['#paragraph']->field_pg_quick_facts_label->getValue()) {
      $description = $items['#paragraph']->field_pg_quick_facts_label->getValue();
      $description = reset($description)['value'];
    }

    if ($items['#paragraph']->field_pg_quick_facts_no->getValue()) {
      $statistic = $items['#paragraph']->field_pg_quick_facts_no->getValue();
      $statistic = reset($statistic)['value'];
    }

    $facts[] = [
      'description' => $description,
      'statistic' => $statistic,
    ];
  }

  // Set static status for the facts.
  $facts[0]['status'] = 'signed';
  $facts[1]['status'] = 'waiting';
  $facts[2]['status'] = 'vetoed';

  $bill_status = '';
  foreach ($facts as $key => $fact) {
    switch ($fact['status']) {
      case 'signed':
        $bill_status = 'SIGNED_BY_GOV';
        break;

      case 'waiting':
        $bill_status = 'DELIVERED_TO_GOV';
        break;

      case 'vetoed':
        $bill_status = 'VETOED';
        break;

      default:
        break;
    }

    // Arrange array for url params.
    $params = [
      'searched' => 'true',
      'type' => 'f_bill',
      'bill_session_year' => $session_year,
      'bill_status' => $bill_status,
      'page' => 1,
    ];
    $link = Url::fromUserInput('/search/legislation', ['query' => $params])->toString();
    $facts[$key]['link'] = $link;
  }

  $variables['facts'] = $facts;

  $year = $first_year . '-' . $second_year;
  $title = $year . ', ' . $variables['elements']['#block_content']->info->getValue()[0]['value'];
  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__featured_image(&$variables) {
  $variables['title'] = $variables['elements']['#block_content']->info->value;
  if (isset($variables['content']['field_pg_full_width_bleed'][0]) && !empty($variables['content']['field_pg_full_width_bleed'][0])) {
    $variables['full_width_bleed'] = strtolower($variables['content']['field_pg_full_width_bleed'][0]['#markup']) == 'on' ? TRUE : FALSE;
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__featured_bill(&$variables) {
  if (isset($variables['content']['field_bills']) && !empty($variables['content']['field_bills'])) {
    $bills = [];
    foreach ($variables['content']['field_bills'] as $key => $bill) {
      if (!is_numeric($key)) {
        continue;
      }
      $node = $bill['#node'];

      // Published date.
      $date = \Drupal::service('date.formatter')->format(strtotime($node->field_ol_publish_date->value), '', 'F d, Y');

      // Last status.
      $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
      $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';
      // All status.
      $positions = nysenate_bill_positions($node);

      $sponsor_name = NULL;
      if ($node->hasField('field_ol_sponsor') && !$node->get('field_ol_sponsor')->isEmpty()) {
        $sponsor = $node->field_ol_sponsor->entity;

        $given = $sponsor->field_senator_name->given ?? '';
        $family = $sponsor->field_senator_name->family ?? '';
        $sponsor_name = $given . ' ' . $family;
      }

      $bills[] = [
        'number' => $node->label(),
        'description' => $node->field_ol_name->value,
        'date' => $date,
        'update_location' => $last_status,
        'sponsor' => $sponsor_name ?? '',
        'positions' => $positions,
      ];

      $variables['bills'] = $bills;
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nysenate_theme_preprocess_block_content__featured_content(&$variables) {
  $field_content = $variables['content']['field_content'];
  $position = 'c-block--even';
  foreach ($field_content as $key => $item) {
    if (!is_numeric($key)) {
      continue;
    }

    $node = $item['#node'];
    if ($node->bundle() == 'promotional_banner') {

      if (!empty($node->field_promotional_banner_image->getValue())) {
        $position = 'c-block--even';
      }
      else {
        $variables['content']['field_content'][$key]['#attributes']['class'][] = $position;
        $position = $position == 'c-block--even' ? 'c-block--odd' : 'c-block--even';
      }
    }
    else {
      $position = 'c-block--even';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nysenate_theme_preprocess_block(&$variables) {
  if (isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->type->target_id == 'text') {
      $variables['content']['#block_content']->label_display = $variables['configuration']['label_display'];
    }
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__text(&$variables) {
  $text = [];
  if (isset($variables['content']['field_body_left'][0])) {
    $text['left'] = [
      'text' => $variables['content']['field_body_left'][0]['#text'],
    ];
  }

  if (isset($variables['content']['field_body_right'][0])) {
    $text['right'] = [
      'text' => $variables['content']['field_body_right'][0]['#text'],
    ];
  }

  $variables['text'] = $text;
  $variables['is_two_column'] = count($text) == 2 ? TRUE : FALSE;
  if (isset($variables['content']['field_is_full_bleed'][0])) {
    $variables['is_full_bleed'] = strtolower($variables['content']['field_is_full_bleed'][0]['#markup']) == 'on' ? TRUE : FALSE;
  }

  if (isset($variables['content']['field_with_background'][0])) {
    $variables['with_bg'] = strtolower($variables['content']['field_with_background'][0]['#markup']) == 'on' ? TRUE : FALSE;
  }

  // Set default value for label display.
  $variables['label_display'] = TRUE;
  // Override value if the title display is being controlled
  // by 'Display Title' checkbox in block configuration.
  if (isset($variables['elements']['#block_content']->label_display)) {
    $variables['label_display'] = $variables['elements']['#block_content']->label_display == 'visible' ? TRUE : FALSE;
  }
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__views_block__homepage_hero_homepage_hero(&$variables) {
  $result = $variables["content"]["#view"]->result;
  foreach ($result as $node) {
    $node = $node->_entity;
    if ($node instanceof NodeInterface && $node->bundle() == 'session') {
      $date = NULL;
      if (isset($node->field_date_range)) {
        $date_range = $node->field_date_range;
        if (!empty($date_range->start_date)) {
          /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
          $start_date = $date_range->start_date;
          $date = \Drupal::service('date.formatter')->format(
            $start_date->getTimestamp(), 'custom', 'F d, Y'
          );
        }
      }

      if (!$node->field_session_calendars->isEmpty() && $node->field_session_calendars->entity instanceof NodeInterface) {
        $url_calendar = $node->field_session_calendars->entity->toUrl()->toString();
      }

      if (!$node->field_ustream->isEmpty()) {
        $media_id = $node->field_ustream->value ?? [];
      }

      $variables['homepage_hero'] = [
        'date' => $date ?? '',
        'url_calendar' => $url_calendar ?? '#',
        'media_id' => $media_id ?? [],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_block_content_TYPE().
 */
function nysenate_theme_preprocess_block_content__promotional_banner(&$variables) {
  $banners = [];
  $entity_manager = \Drupal::entityTypeManager();

  if ($variables['content']['field_promotional_banner']) {
    foreach ($variables['content']['field_promotional_banner'] as $key => $banner) {
      if (!is_numeric($key)) {
        continue;
      }

      $modifier = '';
      if ($key > 0) {
        $modifier = 'two-up';
      }

      // Media image.
      $mid = NULL;
      if ($banner['#node']->hasField('field_promotional_banner_image') && !$banner['#node']->get('field_promotional_banner_image')->isEmpty()) {
        $mid = $banner['#node']->field_promotional_banner_image->target_id;
      }

      $media_image = NULL;
      if (!empty($mid)) {
        $media_image = $entity_manager->getStorage('media')->load($mid);
      }

      // Retrieve the URL.
      $url = '';
      if ($banner['#node']->field_link_type->value == 'internal') {
        $node = $entity_manager->getStorage('node')->load($banner['#node']->field_promotional_content->target_id);
        $url = $node->toUrl()->toString();
      }

      elseif ($banner['#node']->field_link_type->value == 'external') {
        $url = $banner['#node']->field_link->uri;
      }

      // Call to action string.
      $text = t('Read More');
      $senator_name = NULL;
      if ($banner['#node']->hasField('field_call_to_action') && !$banner['#node']->get('field_call_to_action')->isEmpty()) {
        $text = $banner['#node']->field_call_to_action->getSetting('allowed_values');
        $text = $text[$banner['#node']->field_call_to_action->value];

        // Add senator name.
        if ($banner['#node']->field_call_to_action->value == 'petition') {
          $node = \Drupal::routeMatch()->getParameter('node');
          if ($node instanceof NodeInterface) {
            if ($node->bundle() == 'microsite_page') {
              if (!empty($node->field_senator_multiref->target_id)) {
                // Load the senator taxonomy term found
                // in field_senator_multiref field.
                $senator = $entity_manager->getStorage('taxonomy_term')->load($node->field_senator_multiref->target_id);
              }

              if (!empty($senator)) {
                // Senator name.
                if ($senator->field_senator_name) {
                  $title = $senator->field_senator_name->title ?? '';
                  $given = $senator->field_senator_name->given ?? '';
                  $family = $senator->field_senator_name->family ?? '';
                  $senator_name = $title . ' ' . $given . ' ' . $family;
                  $senator_name = trim($senator_name);
                }
              }
            }
          }
        }
      }

      $banners[] = [
        'modifier' => $modifier,
        'image' => !empty($media_image) ? $entity_manager->getViewBuilder('media')->view($media_image, 'default') : NULL,
        'title' => $banner['#node']->getTitle(),
        'senator_name' => $senator_name,
        'cta' => [
          'url' => $url,
          'text' => $text,
          'value' => $banner['#node']->field_call_to_action->value,
        ],
      ];
    }
  }

  $variables['promotional_banners'] = $banners;
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function nysenate_theme_preprocess_paragraph__promotional_banners(&$variables) {
  $variables['cta'] = [];

  $variables['cta']['text'] = $variables['content']['field_call_to_action'][0]['#markup'] ?? '';
  if (isset($variables['content']['field_link_type'][0])) {
    if ($variables['content']['field_link_type']['#items']->value == 'internal') {
      if (isset($variables['content']['field_promotional_content'][0])) {
        $variables['cta']['url'] = $variables['content']['field_promotional_content'][0]['#url']->toString();
      }
    }
    elseif ($variables['content']['field_link_type']['#items']->value == 'external') {
      if ($variables['content']['field_external_cta'][0]) {
        $variables['cta']['url'] = $variables['content']['field_external_cta'][0]['#url']->toString();
      }
    }
  }

  if ($variables['content']['field_is_2_up'][0]) {
    $variables['modifier'] = strtolower($variables['content']['field_is_2_up'][0]['#markup']) == 'on' ? 'two-up' : '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_views_view__senator_events(&$variables) {
  if ($variables['view']->current_display == 'senator_today_events') {
    foreach ($variables['view']->result as $node) {
      if ($node->_entity->bundle() === 'event') {
        $date = new \Datetime($node->_entity->field_date_range->value, new DateTimeZone('UTC'));
        $date->setTimezone(new DateTimeZone('America/New_York'));
        $end_date = new \Datetime($node->_entity->field_date_range->end_value, new DateTimeZone('UTC'));
        $end_date->setTimezone(new DateTimeZone('America/New_York'));
        $now = new \Datetime();
        $street_2 = $node->_entity->field_location[0]->locality . ', '
        . $node->_entity->field_location[0]->administrative_area . ' ' . $node->_entity->field_location[0]->postal_code;
        if ($date->format('d:M:Y') === $now->format('d:M:Y')) {
          $variables['items_today'][] = [
            'title' => $node->_entity->label(),
            'url' => $node->_entity->toUrl()->toString(),
            'location' => $node->_entity->field_location[0]->organization ?? '',
            'meeting_location' => $node->_entity->field_meeting_location->value ?? '',
            'street_1' => $node->_entity->field_location[0]->address_line1 ?? '',
            'street_2' => !empty($node->_entity->field_location[0]->locality) ? $street_2 : '',
            'time' => $date->format('g:i A') . ' to ' . $end_date->format('g:i A'),
          ];
          $variables['now'] = $date->format('M jS');
        }
      }
    }
  }

  if ($variables['view']->current_display == 'featured_event') {
    foreach ($variables['view']->result as $node) {
      if ($node->_entity->bundle() === 'event') {
        $date = new \Datetime($node->_entity->field_date_range->value, new DateTimeZone('UTC'));
        $date->setTimezone(new DateTimeZone('America/New_York'));
        $date_end = new \Datetime($node->_entity->field_date_range->end_value, new DateTimeZone('UTC'));
        $date_end->setTimezone(new DateTimeZone('America/New_York'));
        $street_2 = $node->_entity->field_location[0]->locality . ', '
        . $node->_entity->field_location[0]->administrative_area . ' ' . $node->_entity->field_location[0]->postal_code;
        $variables['item_featured'] = [
          'title' => $node->_entity->label(),
          'url' => $node->_entity->toUrl()->toString(),
          'day' => $date->format('d'),
          'month' => $date->format('M'),
          'year' => $date->format('Y'),
          'url_location' => 'http://maps.google.com/?q=' . $node->_entity->field_location[0]->address_line1 . '+'
          . $node->_entity->field_location[0]->administrative_area . '%2C+'
          . $node->_entity->field_location[0]->locality . '%2C+'
          . $node->_entity->field_location[0]->postal_code,
          'location' => $node->_entity->field_location[0]->organization,
          'meeting_location' => $node->_entity->field_meeting_location->value ?? '',
          'street_1' => $node->_entity->field_location[0]->address_line1,
          'street_2' => !empty($node->_entity->field_location[0]->locality) ? $street_2 : '',
          'time_start' => $date->format('g:i A'),
          'time_end' => $date_end->format('g:i A'),
        ];

        if (!empty($node->_entity->field_feature_image->getValue())) {
          $variables['item_featured']['image'] = $node->_entity->field_feature_image[0]->entity->field_image;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID().
 */
function nysenate_theme_preprocess_views_view__senator_microsite_content(&$variables) {
  $variables['attributes']['class'][] = 'newsroom-content';

  $view = $variables['view'];
  $display_id = $view->getDisplay();
  $display_id = $display_id->display['id'];
  if ($display_id == 'microsite_legislation_content') {
    $result = $view->result;

    if (!empty($result)) {
      $tid = $view->args[0];
      $filter_input = $view->exposed_raw_input;
      $filter_input = $filter_input['type'];
      $session = nysenate_current_legislative_session();

      $title = '';
      $args = [];
      $url_string = '/search/legislation';
      $options = [
        'query' => [
          'searched' => 'true',
        ],
        'attributes' => [
          'class' => [
            'c-container--link',
          ],
        ],
      ];
      // Type 1 stands for Bills filter, 2 for Resolution.
      if ($filter_input == '1') {
        $title = 'View All Bills';
        $args = [
          'type' => 'f_bill',
          'bill_session_year' => $session,
          'bill_sponsor' => $tid,
        ];
      }
      elseif ($filter_input == '2') {
        $title = 'View All Resolutions';
        $args = [
          'type' => 'f_resolution',
          'resolution_session_year' => $session,
          'resolution_sponsor' => $tid,
        ];
      }
      $options['query'] = array_merge($options['query'], $args);
      $url = Url::fromUserInput($url_string, ['query' => $args]);
      // Override the More Link in views using the constructed url.
      $variables['more'] = Link::fromTextAndUrl($title, $url)->toRenderable();
      $variables['more']['#prefix'] = '<div class="more-link">';
      $variables['more']['#suffix'] = '</div>';
    }
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function nysenate_theme_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $current_path = \Drupal::service('path.current')->getPath();
  $aliased_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $media_storage = \Drupal::entityTypeManager()->getStorage('media');

  // Newsroom Landing.
  if ($view->id() == 'senator_microsite_content' && $view->current_display == 'block_1') {
    $items = [];
    foreach ($view->result as $row) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = $row->_entity;
      $allowed_values = [];
      if ($node->hasField('field_category')) {
        $allowed_values = $node->field_category->getSetting('allowed_values');
      }
      $term = NULL;
      if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
        /** @var \Drupal\taxonomy\Entity\Term $term */
        $term = !empty($node->field_issues->target_id) ? $term_storage->load($node->field_issues->target_id) : NULL;
      }

      $news_image = NULL;
      if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
        $media = !empty($node->field_image_main->target_id) ? $media_storage->load($node->field_image_main->target_id) : NULL;
        if (!empty($media)) {
          $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
          if (!empty($file)) {
            $news_image = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
          }
        }
      }

      $items[] = [
        'news_title' => !empty($allowed_values) ? $allowed_values[$node->field_category->value] : '',
        'news_url' => $node->toUrl()->toString(),
        'news_image' => $news_image,
        'news_name' => $node->getTitle(),
        'news_topic' => [
          'url' => !empty($term) ? $term->toUrl()->toString() : '',
          'text' => !empty($term) ? $term->label() : '',
        ],
      ];
    }

    $variables['cta_url'] = $aliased_path . '/newsroom';
    $variables['items'] = $items;
  }

  // Events Landing.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_events_landing') {
    $items = [];
    foreach ($view->result as $row) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = $row->_entity;
      $start_date = NULL;
      $end_date = NULL;
      if ($node->hasField('field_date_range') && !$node->get('field_date_range')->isEmpty()) {
        $start_date = $node->get('field_date_range')->getValue()[0]['value'];
        $end_date = $node->get('field_date_range')->getValue()[0]['end_value'];
      }
      $states = \Drupal::service('address.subdivision_repository')->getList(['US']);

      $address = '';
      $location_url = '';
      $location_name = '';
      /** @var Drupal\address\Plugin\Field\FieldType\AddressItem $field_location */
      $field_location = ($node->hasField('field_location') && !$node->get('field_location')->isEmpty()) ? $node->get('field_location')->first() : '';
      if ($field_location instanceof AddressItem) {
        $location_name = $field_location->getOrganization() ?? '';

        if ($field_location->getAddressLine1()) {
          $address = $field_location->getAddressLine1() . '<br>';
        }

        if ($field_location->getLocality()) {
          $address .= $field_location->getLocality() . ', ';
        }

        if ($field_location->getAdministrativeArea()) {
          $address .= $states[$field_location->getAdministrativeArea()] . ' ';
        }

        if ($field_location->getPostalCode()) {
          $address .= $field_location->getPostalCode();
        }
      }

      if (!empty($address)) {
        $location_url = str_replace('<br>', ' ', $address);
        $location_url = 'http://maps.google.com/?q=' . urlencode($location_url);
      }

      $items[] = [
        'event_date' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'd') : '',
        'event_month' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'M') : '',
        'event_url' => $node->toUrl()->toString(),
        'event_name' => $node->getTitle(),
        'event_location_url' => $location_url,
        'event_location_name' => $location_name,
        'event_address' => $address,
        'event_time_start' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'g:i A') : '',
        'event_time_end' => !empty($end_date) ? \Drupal::service('date.formatter')->format(strtotime($end_date), '', 'g:i A') : '',
      ];

      $variables['cta_url'] = $aliased_path . '/calendar';
      $variables['items'] = $items;
    }
  }

  // Legislation Landing.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_legislation_landing') {
    $items = [];
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $allowed_values = '';
      if ($node->hasField('field_ol_last_status')) {
        $allowed_values = $node->field_ol_last_status->getSetting('allowed_values');
      }
      $published_date = '';
      if ($node->hasField('field_ol_publish_date') &&
        !$node->get('field_ol_publish_date')->isEmpty()) {
        $published_date = $node->field_ol_publish_date->value;
      }

      $last_status = '';
      if ($node->hasField('field_ol_last_status') && !$node->get('field_ol_last_status')->isEmpty()) {
        $last_status = $allowed_values[$node->field_ol_last_status->value];
      }

      $items[] = [
        'bill_number' => $node->getTitle(),
        'bill_url' => $node->toUrl()->toString(),
        'bill_description' => $node->field_ol_name->value,
        'bill_date' => !empty($published_date) ? \Drupal::service('date.formatter')->format(strtotime($published_date), '', 'F d, Y') : '',
        'bill_positions' => nysenate_bill_positions($node),
        'bill_status' => $last_status,
      ];
    }
    $variables['cta_url'] = $aliased_path . '/legislation';
    $variables['items'] = $items;
  }

  // Newsroom.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_newsroom_content') {
    $contents = [];
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $bundle = $node->bundle();
      if ($bundle == 'article' && $node->hasField('field_category')
        && !$node->get('field_category')->isEmpty()) {
        $bundle = $node->field_category->getSetting('allowed_values');
        $bundle = $bundle[$node->field_category->value];
      }

      $issues = [];
      if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
        if ($node->field_issues->target_id) {
          /** @var \Drupal\taxonomy\Entity\Term $term */
          $term = $term_storage->load($node->field_issues->target_id);
          if ($term instanceof TermInterface) {
            $issues[] = [
              'name' => $term->label(),
              'url' => $term->toUrl()->toString(),
            ];
          }
        }
      }

      $image_main = NULL;
      if (isset($node->field_image_main) && !empty($node->field_image_main->target_id)) {
        $media = $media_storage->load($node->field_image_main->target_id);
        $file = File::load($media->field_image->target_id);
        $image_main = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
      }

      $contents[] = [
        'title' => ($bundle == 'video') ? ucfirst($bundle) : $bundle,
        'topics' => $issues,
        'description' => [
          'text' => $node->label(),
          'url' => $node->toUrl()->toString(),
        ],
        'date' => $node->field_date->value ? \Drupal::service('date.formatter')->format(strtotime($node->field_date->value), '', 'F j, Y') : NULL,
        'img_src' => $image_main,
      ];
    }

    $variables['contents'] = $contents;
  }

  // Legislation.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_legislation_content') {
    $contents = [];
    $bill = [];
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $bundle = $node->bundle();

      // Published date.
      $date = '';
      if ($node->hasField('field_ol_publish_date') && !$node->get('field_ol_publish_date')->isEmpty()) {
        $date = \Drupal::service('date.formatter')->format(strtotime($node->field_ol_publish_date->value), '', 'F d, Y');
      }

      // Last status.
      $last_status = '';
      if (!empty($node->field_ol_last_status)) {
        $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
        $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';
      }

      $bill = [
        'featured' => FALSE,
        'small' => TRUE,
        'is_poll' => FALSE,
        'resolution' => FALSE,
        'link' => $node->toUrl()->toString(),
        'number' => $node->getTitle(),
        'description_position' => 'top',
        'description' => !empty($node->field_ol_name->value) ? $node->field_ol_name->value : '',
        'date' => $date,
        'update_location' => $last_status,
        'positions' => nysenate_bill_positions($node),
      ];

      $contents[] = [
        'bill' => $bill,
      ];
    }

    $variables['contents'] = $contents;
  }

  // Featured issue EVA.
  if ($view->id() == 'featured_issue' && $view->current_display == 'featured_issue') {
    $results = $view->result;
    if (!empty($results)) {
      $issues = [];
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');
      $featured_issue = $term_storage->load($view->args[0]);

      foreach ($results as $row) {
        $node = $row->_entity;

        $image = NULL;
        if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
          $image = $media_storage->load($node->field_image_main->target_id);
          $image = $view_builder->view($image, 'default');
        }

        $issues[] = [
          'thumb_image' => $image,
          'link' => $node->toUrl()->toString(),
          'title' => $node->label(),
        ];
      }

      $variables['featured_issue_link'] = $featured_issue->toUrl()->toString();
      $variables['featured_issue_name'] = $featured_issue->label();

      // Set the first element as the main issue.
      $main_issue = array_shift($issues);
      $variables['main_issue'] = [
        'large_image' => $main_issue['thumb_image'],
        'link' => $main_issue['link'],
        'title' => $main_issue['title'],
      ];

      $variables['issues'] = $issues;
    }
  }

  if ($view->id() == 'news_by_issue' && $view->current_display == 'petition') {
    $results = $view->result;
    if (!empty($results)) {
      $petitions = [];
      foreach ($results as $row) {
        $node = $row->_entity;
        $senator_name = '';
        if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
          $senator = $node->field_senator_multiref->entity;
          $senator_name = $senator->getName();
        }

        $petitions[] = [
          'title' => $node->getTitle(),
          'senator_name' => $senator_name,
          'cta' => [
            'url' => $node->toUrl()->toString(),
            'text' => 'Review the Petition',
            'value' => 'petition',
          ],
        ];
      }

      $variables['title'] = 'Petitions Related to this Issue';
      $variables['petitions'] = $petitions;
    }
  }
}

/**
 * Implements hook_theme_suggestions_TYPE_alter().
 */
function nysenate_theme_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables, $hook) {
  $term = $variables['elements']['#taxonomy_term'];
  $suggestions[] = $hook . '__' . $term->bundle() . '__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_form_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = $hook . '__' . $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node->bundle() == 'microsite_page') {
    $suggestions[] = $hook . '__node__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables, $hook) {
  $view = $variables['view'];
  $view_id = $view->id();

  // Add theme hook suggestions for taxonomy_term page.
  if ($view_id == 'taxonomy_term') {
    if (isset($view->args) && !empty($view->args)) {
      $tid = $view->args[0];
      $term = Term::load($tid);

      // Override the issues bundle.
      if (!empty($term) && $term->bundle() == 'issues') {
        $suggestions[] = $hook . '__' . $view_id . '__' . $term->bundle();
      }
    }
  }

  // Add theme hook suggestions for Microsite content.
  if ($view_id == 'senator_microsite_content') {
    // kint($view->id()); exit;.
    $display_id = $view->getDisplay();
    $display_id = $display_id->display['id'];
    $suggestions[] = $hook . '__' . $view_id . '__' . $display_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_semanticviews_row_alter(array &$suggestions, array $variables, $hook) {
  $view = $variables['view'];
  $display_id = $view->getDisplay();
  $display_id = $display_id->display['id'];
  $suggestions[] = $hook . '__' . $view->id() . '__' . $display_id;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__news(&$variables) {
  $node = $variables['row']->_entity;

  // Retrieve the article category if Article content type.
  if ($node->bundle() == 'article') {
    if ($node->hasField('field_category') && !$node->get('field_category')->isEmpty()) {
      $allowed_values = $node->field_category->getSetting('allowed_values');
      $variables['title'] = $allowed_values[$node->field_category->value];
    }
  }
  // If other content type...
  else {
    $variables['title'] = $node->type->entity->label();
  }

  if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
    $node->field_issues->entity;
    $issues = [];
    foreach ($node->field_issues as $value) {
      $term = $value->entity;
      $issues[] = [
        'name' => $term->getName(),
        'url' => $term->toUrl()->toString(),
      ];
    }
    $variables['issues'] = $issues;
  }

  if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
    $media = \Drupal::entityTypeManager()->getStorage('media')->load($node->field_image_main->target_id);
    if (!empty($media)) {
      $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
      if (!empty($file)) {
        $variables['img_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
      }
    }
  }

  if ($node->hasField('field_date') && !$node->get('field_date')->isEmpty()) {
    $field_date = $node->field_date->value;
    $variables['date'] = \Drupal::service('date.formatter')->format(strtotime($field_date), '', 'F j, Y');
  }

  if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
    $senator = $node->get('field_senator_multiref')->first()->entity;
    $variables['senator'] = [
      'name' => $senator->name->value,
      'url' => $senator->toUrl()->toString(),
    ];
  }

  $variables['description'] = [
    'url' => $node->toUrl()->toString(),
    'text' => $node->getTitle(),
  ];
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__news_by_bill(&$variables) {
  $node = $variables['row']->_entity;
  $bill = [
    'featured' => FALSE,
    'small' => TRUE,
    'is_poll' => FALSE,
    'resolution' => FALSE,
    'link' => $node->toUrl()->toString(),
    'number' => $node->getTitle(),
    'description_position' => 'top',
  ];

  if ($node->hasField('field_ol_name') && !$node->get('field_ol_name')->isEmpty()) {
    $bill['description'] = $node->field_ol_name->value;
  }

  if ($node->hasField('field_ol_last_status_date') && !$node->get('field_ol_last_status_date')->isEmpty()) {
    $last_status_date = $node->field_ol_last_status_date->value;
    $bill['date'] = \Drupal::service('date.formatter')->format(strtotime($last_status_date), '', 'F j, Y');
  }

  if ($node->hasField('field_ol_last_status') && !$node->get('field_ol_last_status')->isEmpty()) {
    $allowed_values = $node->get('field_ol_last_status')->getSetting('allowed_values');
    $bill['update_location'] = $allowed_values[$node->field_ol_last_status->value];
  }

  if ($node->hasField('field_ol_all_statuses') && !$node->get('field_ol_all_statuses')->isEmpty()) {
    $bill['positions'] = nysenate_bill_positions($node);
  }

  if ($node->hasField('field_ol_sponsor') && !$node->get('field_ol_sponsor')->isEmpty()) {
    $sponsor = $node->field_ol_sponsor->entity;
    $bill['ol_sponsor'] = [
      'text' => $sponsor->getName(),
      'url' => $sponsor->toUrl()->toString(),
    ];
  }

  $variables['bill'] = $bill;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__meeting_by_issue(&$variables) {
  $node = $variables['row']->_entity;

  if ($node->bundle() == 'public_hearing') {
    if ($node->hasField('field_date_range') && !$node->get('field_date_range')->isEmpty()) {
      $variables['date'] = \Drupal::service('date.formatter')->format(strtotime($node->field_date_range->value), '', 'd');
      $variables['month'] = \Drupal::service('date.formatter')->format(strtotime($node->field_date_range->value), '', 'M');
    }

    $address = '';
    if ($node->hasField('field_location') && !$node->get('field_location')->isEmpty()) {
      if (isset($node->field_location[0]->address_line1) && !empty($node->field_location[0]->address_line1)) {
        $address = $node->field_location[0]->address_line1;
      }

      if (isset($node->field_location[0]->locality) && !empty($node->field_location[0]->locality)) {
        $address .= $node->field_location[0]->locality . ', ';
      }

      if (isset($node->field_location[0]->administrative_area) && !empty($node->field_location[0]->administrative_area)) {
        $address .= $node->field_location[0]->administrative_area . ', ';
      }

      if (isset($node->field_location[0]->postal_code) && !empty($node->field_location[0]->postal_code)) {
        $address .= $node->field_location[0]->postal_code . ', ';
      }

      if (!empty($address)) {
        $variables['location']['link'] = 'http://maps.google.com/?q=' . urlencode($address);
      }
    }
  }

  if ($node->hasField('field_meeting_location') && !$node->get('field_meeting_location')->isEmpty()) {
    $variables['location']['name'] = $node->field_meeting_location->value;
  }

  $variables['event_name'] = $node->getTitle();
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__video(&$variables) {
  $view = $variables['view'];
  $tid = $view->args[0];
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->load($tid);

  if (!empty($term) && is_object($term)) {
    $variables['title'] = t('Latest %term_name Video', ['%term_name' => $term->name->value]);
  }
}

/**
 * Implements hook_preprocess_page__node__TYPE().
 */
function nysenate_theme_preprocess_page__node__microsite_page(&$variables) {
  $node = $variables['node'];

  if ($node->hasField('field_block') && !$node->get('field_block')->isEmpty()) {
    $block_types = [
      'microsite_hero',
      'senator_microsite_menu',
    ];
    foreach ($node->get('field_block') as $key => $value) {
      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
      $block_content = $value->entity;

      if ($block_content instanceof BlockContent) {
        // Alter the field_block contents to be displayed.
        if (in_array($block_content->bundle(), $block_types)) {
          if ($block_content->bundle() == 'microsite_hero') {
            $variables['microsite_hero'] = \Drupal::entityTypeManager()
              ->getViewBuilder('block_content')
              ->view($block_content);
          }
          elseif ($block_content->bundle() == 'senator_microsite_menu') {
            $variables['microsite_menu'] = \Drupal::entityTypeManager()
              ->getViewBuilder('block_content')
              ->view($block_content);
          }

          // Set both microsite blocks to empty array
          // to prevent from rendering in the display.
          $node->get('field_block')[$key] = [];
        }
      }
    }
  }

  // Override the main content.
  // Display the microsite node with altered contents.
  $variables['page']['content']['system_main'] = \Drupal::entityTypeManager()->getViewBuilder('node')
    ->view($node, 'full');
}

/**
 * Implements hook_theme_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__senator__sponsor_list(&$variables) {
  $term = $variables['term'];
  $district = get_senator_district($term->id());
  $party = $term->field_party->getValue();
  $parties = implode(', ', array_map(function ($item) {
    return $item['value'];
  }, $party));
  $variables['party'] = t('@party @district <span>Senate District</span>',
    [
      '@party' => $parties ? '(' . $parties . ')' : '',
      '@district' => $district,
    ]
  );
}

/**
 * Implements hook_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__senator__senators_involved(&$variables) {
  $term = $variables['term'];
  $variables['district'] = get_senator_district($term->id());
}

/**
 * Implements hook_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__issues(&$variables) {
  $user = \Drupal::entityTypeManager()->getStorage('user')
    ->load(\Drupal::currentUser()->id());

  $senator_name = '';
  $senator_image = NULL;
  if ($user->hasField('field_senator_multiref') && !$user->get('field_senator_multiref')->isEmpty()) {
    $tid = $user->get('field_senator_multiref')->first()->getString() ?? '';
    $senator = NULL;
    if (!empty($tid)) {
      $senator = Term::load($tid);
    }
    $variables['senator'] = $senator;

    // Senator name.
    if (!empty($senator)) {
      if (isset($senator->name->value) && !empty($senator->name->value)) {
        $senator_name = $senator->name->value;
      }

      // Senator image.
      if ($senator->hasField('field_image_headshot') && !$senator->get('field_image_headshot')->isEmpty()) {
        $senator_image = $senator->field_member_headshot->entity;
      }
    }

  }

  // Generate the contact your senator variables.
  $url = '';
  $title = '';
  $link = [];
  $is_out_of_state = \Drupal::service('nys_users.user_helper')->isOutOfState($user);
  if ($is_out_of_state) {
    $title = t('Contact the Senate about this issue');
    $link = [
      'url' => '/contact',
      'text' => t('Contact Senate'),
    ];
  }

  else {
    $title = t('Contact your Senator about this issue');
    $link = [
      'url' => '/user/dashboard/inbox/new?context=issue&issue_id=' . $variables['term']->id(),
      'text' => t('Contact %senator', ['%senator' => $senator_name]),
    ];
  }

  $variables['contact_your_senator'] = [
    'logged_in' => \Drupal::currentUser()->isAuthenticated(),
    'title' => $title,
    'senator_image' => $senator_image,
    'link' => $link,
  ];

  $variables['is_senator'] = \Drupal::service('nys_users.user_helper')->isSenator($user);
  $variables['absolute_url'] = \Drupal::request()->getSchemeAndHttpHost() . $variables['url'];

  // Quick facts.
  $variables['quick_facts'] = [
    '#theme' => 'nysenate_issue_quick_facts',
    '#term' => $variables['term'],
  ];

  // Senators talking about this issue.
  $variables['senators_talking_about_this_issue'] = [
    '#theme' => 'nysenate_senators_talking_about_this_issue',
    '#term' => $variables['term'],
  ];

  // Petitions related to this issue.
  $args = [$variables['term']->id()];
  $petition_view = Views::getView('news_by_issue');
  if (is_object($petition_view)) {
    $petition_view->setArguments($args);
    $petition_view->setDisplay('petition');
    $petition_view->preExecute();
    $petition_view->execute();
    $variables['petitions'] = $petition_view->buildRenderable('petition', $args);
  }

  // News.
  $news_view = Views::getView('news_by_issue');
  if (is_object($news_view)) {
    $variables['news'] = $news_view->buildRenderable('news', $args);
  }

  // Legislation.
  $news_by_bill_view = Views::getView('news_by_issue');
  if (is_object($news_by_bill_view)) {
    $variables['news_by_bill'] = $news_by_bill_view->buildRenderable('news_by_bill', $args);
  }

  // Meetings.
  $meeting_by_issue_view = Views::getView('news_by_issue');
  if (is_object($meeting_by_issue_view)) {
    $variables['meeting_by_issue'] = $meeting_by_issue_view->buildRenderable('meeting_by_issue', $args);
  }

  // Video.
  $video_view = Views::getView('news_by_issue');
  if (is_object($video_view)) {
    $variables['video'] = $video_view->buildRenderable('video', $args);
  }

  // Set the cache tags for the issues taxonomy.
  // Invalidation will occur on nys_senators_user_presave method.
  $variables['#cache']['tags'][] = 'taxonomy_term_list:issues';
}

/**
 * Retrieves the senator district in ordinal format.
 *
 * @param int $tid
 *   The taxonomy term id.
 *
 * @return string
 *   The ordinal number.
 */
function get_senator_district($tid) {
  $db = \Drupal::database();

  $query = $db->select('taxonomy_term__field_senator', 's')
    ->fields('s', ['entity_id'])
    ->condition('s.field_senator_target_id', $tid);
  $district_id = $query->execute()->fetchField();

  $district_number = '';
  if (!empty($district_id)) {
    $district = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($district_id);

    $district_number = (int) $district->field_district_number->value;
    return ordinal_suffix($district_number);
  }

  return $district_number;
}

/**
 * Sets the ordinal format of the number.
 *
 * @param int $number
 *   The district number.
 * @param int $ss
 *   Turn super script on/off.
 *
 * @return string
 *   The ordinal number.
 */
function ordinal_suffix($number, $ss = 0) {
  // Check for 11, 12, 13.
  if ($number % 100 > 10 && $number % 100 < 14) {
    $os = 'th';
  }
  // Check if number is zero.
  elseif ($number == 0) {
    $os = '';
  }
  else {
    // Get the last digit.
    $last = substr($number, -1, 1);

    switch ($last) {
      case "1":
        $os = 'st';
        break;

      case "2":
        $os = 'nd';
        break;

      case "3":
        $os = 'rd';
        break;

      default:
        $os = 'th';
    }
  }

  // Add super script.
  $os = $ss == 0 ? $os : '<sup>' . $os . '</sup>';
  return $number . $os;
}

/**
 * Implements hook_theme().
 */
function nysenate_theme_theme($existing, $type, $theme, $path) {
  return [
    'nysenate_sponsor' => [
      'variables' => [
        'bill' => NULL,
      ],
      'path' => $path . '/src/templates',
    ],
    'nysenate_issue_quick_facts' => [
      'variables' => [
        'term' => NULL,
      ],
      'path' => $path . '/src/templates',
    ],
    'nysenate_senators_talking_about_this_issue' => [
      'variables' => [
        'term' => NULL,
      ],
      'path' => $path . '/src/templates',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_nysenate_sponsor(&$variables) {
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term');
  $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Sponsor.
  if ($variables['bill']->field_ol_sponsor->target_id) {
    $ol_sponsor = $storage->load($variables['bill']->field_ol_sponsor->target_id);
    $ol_sponsor = $view_builder->view($ol_sponsor, 'sponsor_list');

    $variables['ol_sponsor'] = $ol_sponsor;
  }

  // Sponsor name.
  if ($variables['bill']->field_ol_sponsor_name->value) {
    $variables['ol_sponsor_name'] = $variables['bill']->field_ol_sponsor_name->value;
  }

  // Additional sponsor.
  if ($variables['bill']->field_ol_add_sponsors->target_id) {
    $ol_add_sponsors = $storage->load($variables['bill']->field_ol_add_sponsors->target_id);
    $ol_add_sponsors = $view_builder->view($ol_add_sponsors, 'sponsor_list');

    $variables['ol_add_sponsors'] = $ol_add_sponsors;
  }

  // Additional Sponsor Names.
  if ($variables['bill']->field_ol_add_sponsor_names->value) {
    $sponsor_names = [];
    $ol_add_sponsor_names = json_decode($variables['bill']->field_ol_add_sponsor_names->value);
    foreach ($ol_add_sponsor_names as $key => $sponsor) {
      $sponsor_names[] = $sponsor->fullName;
    }

    $variables['sponsor_names'] = implode(', ', $sponsor_names);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_nysenate_issue_quick_facts(&$variables) {
  $term = $variables['term'];
  $variables['title'] = $term->getName() . ' Quick Facts';

  // Get quick fact counts #quick_facts #quickfacts for bills and resolutions.
  $query = "SELECT count(*) from node__field_issues fi
    JOIN node_field_data n on n.nid = fi.entity_id
    WHERE n.type IN ('bill', 'resolution')
    AND n.status = 1 AND fi.field_issues_target_id = :tid";

  $bills_facts_count = (int) \Drupal::database()
    ->query($query, [':tid' => $term->id()])->fetchField();

  // Get quick fact counts #quick_facts #quickfacts for news and stories.
  $query = "SELECT count(*)from node__field_issues fi
    JOIN node_field_data n on n.nid = fi.entity_id
    WHERE n.type IN ('article','in_the_news','press_release','video')
    AND n.status = 1 and fi.field_issues_target_id = :tid;";

  $news_stories_facts_count = (int) \Drupal::database()
    ->query($query, [':tid' => $term->id()])->fetchField();

  // Get quick fact counts #quick_facts #quickfacts for event types.
  $query = "SELECT count(*)from node__field_issues fi
    JOIN node_field_data n on n.nid = fi.entity_id
    WHERE n.type IN ('meeting','public_hearing','events')
    AND n.status = 1 AND fi.field_issues_target_id = :tid";

  $meetings_facts_count = (int) \Drupal::database()
    ->query($query, [':tid' => $term->id()])->fetchField();

  $variables['facts'] = [
    [
      'panel_id' => '2',
      'statistic' => $bills_facts_count,
      'description' => "Bills and Resolutions",
    ],
    [
      'panel_id' => '1',
      'statistic' => $news_stories_facts_count,
      'description' => "News Stories",
    ],
    [
      'panel_id' => '3',
      'statistic' => $meetings_facts_count,
      'description' => "Meetings or Public Hearings",
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_nysenate_senators_talking_about_this_issue(&$variables) {
  $term = $variables['term'];
  $senators = [];

  $cid = 'senators_talking_about_' . $term->id();
  if ($cache = \Drupal::cache()->get($cid)) {
    $senators = $cache->data;
  }
  else {

    $query = "SELECT COUNT(*) as count, fs.field_senator_multiref_target_id tid FROM node__field_issues fi
    JOIN node__field_senator_multiref fs ON fs.entity_id = fi.entity_id
    AND fs.bundle = fi.bundle
    JOIN taxonomy_term__field_active_senator fa ON fa.entity_id = fs.field_senator_multiref_target_id
    AND fa.bundle = 'senator'
    WHERE fi.bundle IN ('article', 'in_the_news', 'press_release', 'video') AND fi.field_issues_target_id = :tid
    AND fa.field_active_senator_value = 1
    GROUP by fs.field_senator_multiref_target_id ORDER BY count DESC;
    ";
    $result = \Drupal::database()->query($query, [':tid' => $term->id()])->fetchAll();

    foreach ($result as $r) {
      $senator_term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($r->tid);

      if (!empty($senator_term) && $senator_term->hasField('field_active_senator') && !$senator_term->get('field_active_senator')->isEmpty()) {
        $senator = \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term')->view($senator_term, 'senators_involved');
        $senators[] = $senator;
      }
    }
    \Drupal::cache()->set($cid, $senators);
  }

  $variables['senators'] = $senators;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__bill(&$variables) {
  $node = $variables['node'];
  if (isset($variables['content']['field_issues'][0]) && $variables['view_mode'] == 'full') {
    $issues = [];
    foreach ($variables['content']['field_issues'][0]['#items'] as $issue) {
      $url = Link::fromTextAndUrl($issue['#title'], $issue['#url']);
      $issues[] = $url;
    }
    $variables['issues'] = $issues;
  }

  if (isset($variables['content']['field_majority_issue_tag'])) {
    foreach ($variables['content']['field_majority_issue_tag'] as $key => $field_majority_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $variables['majority_issue'] = Link::fromTextAndUrl($field_majority_issues['#title'], $field_majority_issues['#url']);
    }
  }

  // Bill PDF Link.
  $openleg_config = \Drupal::config('nys_openleg.settings');
  $base_path = $openleg_config->get('base_path');
  if (isset($variables['content']['field_ol_session'][0]['#markup'])) {
    $variables['pdf_link'] = $base_path . '/pdf/bills/' . $variables['content']['field_ol_session'][0]['#markup'] . '/' . $variables['label'][0]['#context']['value'];
  }

  $variables['active_amend_url'] = $node->toUrl('canonical', ['absolute' => TRUE])->toString();

  $variables['sponsored_by'] = [
    '#theme' => 'nysenate_sponsor',
    '#bill' => $node,
  ];

  // In D7, this value is being set in a form.
  // We are getting the current year for the mean time.
  $current_year = \Drupal::state()->get('nys_session_year', date('Y'));
  $variables['current_session_year'] = $current_year - (1 - $current_year % 2);

  // A few immediate references for the bill object.
  $bill_session_year                   = $node->field_ol_session->value;
  $bill_base_print_no                  = $node->field_ol_base_print_no->value;
  $bill_sub_by                         = $node->field_ol_substituted_by->value;
  $variables['sub_bill_base_print_no'] = ($node->field_ol_substituted_by->value ?? '');

  // Detect bill substitutions.  If a substitution exists, load the target.
  $variables['is_substituted'] = FALSE;
  $state_node = NULL;
  if ($bill_sub_by) {
    $sub_temp = \Drupal::service('nys_bill.bills_helper')->getBillVersions($node->bundle(), $bill_sub_by, $bill_session_year);
    $subst_versions = array_combine(
        array_map(function ($v) {
          return $v['title'];
        }, $sub_temp),
        array_map(function ($v) {
          return $v['nid'];
        }, $sub_temp)
    );
    krsort($subst_versions);
    if (!empty($subst_versions)) {
      $subst_node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->load(reset($subst_versions));
      if ($subst_node) {
        $variables['is_substituted'] = TRUE;
        $state_node = $subst_node;
      }
    }
  }

  // Build Bill Status Content Section.
  $variables['positions'] = nysenate_bill_positions($node);

  // Build actions list, including substituted actions if applicable.
  if ($node->hasField('field_ol_all_actions') && !empty($node->field_ol_all_actions->value)) {
    $all_actions = $node->field_ol_all_actions->value;
    $actions = json_decode($all_actions, TRUE);
    if (!empty($actions) && isset($actions['items'])) {
      $actions = $actions['items'];
      $grouped_actions = [];
      // Mark the actions from this bill as the original actions.
      foreach ($actions as &$action) {
        $action['orig'] = TRUE;
      }
      if ($variables['is_substituted']) {
        // If the bill was substituted,
        // add the subbed bill's actions from the point of substitution.
        $sub_actions = NULL;
        if (!empty($state_node) && $state_node->hasField('field_ol_all_actions')) {
          $ol_all_actions = $state_node->field_ol_all_actions->value;
          $sub_actions = json_decode($ol_all_actions, TRUE);
        }
        $action_text_to_find = 'SUBSTITUTED FOR';
        $action_text_to_find_len = strlen($action_text_to_find);
        $from_index = 0;
        if (!empty($sub_actions)) {
          foreach ($sub_actions['items'] as $i => $v) {
            if (substr($v['text'], 0, $action_text_to_find_len) === $action_text_to_find) {
              $from_index = $i;
              break;
            }
          }
          $actions = array_merge($actions, array_slice($sub_actions['items'], $from_index));
        }
      }
      // Sort by reverse chronological date
      // and group by base print no -> version -> date.
      $actions = array_reverse($actions);
      $variables['actions_count'] = count($actions);
      foreach ($actions as &$action) {
        $basePrintNo = $action['billId']['basePrintNo'];
        $version = $action['billId']['version'];
        $date = $action['date'];
        if (!isset($grouped_actions[$basePrintNo])) {
          $grouped_actions[$basePrintNo] = [];
        }
        if (!isset($grouped_actions[$basePrintNo][$version])) {
          $grouped_actions[$basePrintNo][$version] = [];
        }
        if (!isset($grouped_actions[$basePrintNo][$version][$date])) {
          $grouped_actions[$basePrintNo][$version][$date] = [];
        }
        array_push($grouped_actions[$basePrintNo][$version][$date], $action);
      }

      $variables['grouped_actions'] = $grouped_actions;
    }
  }
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function nysenate_theme_preprocess_node__bill__teaser(&$variables) {
  $node = $variables['node'];
  $bills = [];
  // Published date.
  $date = '';
  if ($node->hasField('field_ol_publish_date') && !$node->get('field_ol_publish_date')->isEmpty()) {
    $date = \Drupal::service('date.formatter')->format(strtotime($node->field_ol_publish_date->value), '', 'F d, Y');
  }

  // Last status.
  $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
  $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';

  // All status.
  $positions = nysenate_bill_positions($node);

  $sponsor = NULL;
  if (!empty($node->field_ol_sponsor->target_id)) {
    $sponsor = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($node->field_ol_sponsor->target_id);
  }

  if (!empty($sponsor)) {
    $given = $sponsor->field_senator_name->given ?? '';
    $family = $sponsor->field_senator_name->family ?? '';
    $sponsor_name = $given . ' ' . $family;
  }

  $bills[] = [
    'featured' => TRUE,
    'small' => FALSE,
    'is_poll' => TRUE,
    'resolution' => TRUE,
    'link' => $node->toUrl()->toString(),
    'number' => $node->label(),
    'description' => $node->field_ol_name->value,
    'date' => $date,
    'update_location' => $last_status ?? '',
    'sponsor' => $sponsor_name ?? '',
    'positions' => $positions,
  ];

  $variables['bills'] = $bills;
}

/**
 * Generate the bill positions array.
 *
 * @param object $node
 *   The node object.
 *
 * @return array
 *   The positions array.
 */
function nysenate_bill_positions($node) {

  // If the bill is substituted, load the new bill instead.
  if ($node->hasField('field_ol_substituted_by') && !$node->get('field_ol_substituted_by')->isEmpty()) {
    $sub_bill_base_print_no = $node->field_ol_substituted_by->value;
    $ol_session = '';
    if ($node->hasField('field_ol_session') && !$node->get('field_ol_session')->isEmpty()) {
      $ol_session = $node->field_ol_session->value;
    }
    $sub_bill_versions = \Drupal::service('nys_bill.bills_helper')->getBillVersions($node->bundle(), $sub_bill_base_print_no, $ol_session);
    if (!empty($sub_bill_versions)) {
      $node = \Drupal::entityTypeManager()->getStorage('node')
        ->load(end($sub_bill_versions)['nid']);
    }
  }

  $positions = [];
  if ($node->hasField('field_ol_all_statuses') && isset($node->field_ol_all_statuses->value)) {
    // Set default values.
    $comm_sen = FALSE;
    $floor_sen = FALSE;
    $passed_sen = FALSE;
    $comm_assembly = FALSE;
    $floor_assembly = FALSE;
    $passed_assembly = FALSE;
    $delivered_to_gov = FALSE;
    $signed_by_gov = FALSE;

    // All status.
    $all_statuses = $node->field_ol_all_statuses->value;
    $all_statuses = json_decode($all_statuses);

    if (!empty($all_statuses) && isset($all_statuses->items)) {
      foreach ($all_statuses->items as $key => $value) {
        if (isset($value->statusType) && !empty($value->statusType)) {
          switch ($value->statusType) {
            case 'IN_SENATE_COMM':
              $comm_sen = TRUE;
              break;

            case 'SENATE_FLOOR':
              $floor_sen = TRUE;
              break;

            case 'PASSED_SENATE':
              $passed_sen = TRUE;
              break;

            case 'IN_ASSEMBLY_COMM':
              $comm_assembly = TRUE;
              break;

            case 'ASSEMBLY_FLOOR':
              $floor_assembly = TRUE;
              break;

            case 'PASSED_ASSEMBLY':
              $passed_assembly = TRUE;
              break;

            case 'DELIVERED_TO_GOV':
              $delivered_to_gov = TRUE;
              break;

            case 'SIGNED_BY_GOV':
              $signed_by_gov = TRUE;
              break;

            default:
              break;
          }
        }
      }
    }

    // Arrange the positions value.
    $positions = [
      [
        'text' => t('Introduced'),
        'is_passed' => TRUE,
      ],
      [
        'text' => t('In Committee'),
        'is_passed' => ($comm_sen && $comm_assembly),
      ],
      [
        'text' => t('On Floor Calendar'),
        'is_passed' => ($floor_sen && $floor_assembly),
      ],
      [
        'is_grouped' => TRUE,
        'items' => [
          [
            'text' => t('Passed Senate'),
            'is_passed' => $passed_sen,
          ],
          [
            'text' => t('Passed Assembly'),
            'is_passed' => $passed_assembly,
          ],
        ],
      ],
      [
        'text' => t('Delivered to Governor'),
        'is_passed' => $delivered_to_gov,
      ],
      [
        'text' => t('Signed by Governor'),
        'is_passed' => $signed_by_gov,
      ],
    ];
  }
  return $positions;
}

/**
 * Calculates current legislative session, e.g. 2015.
 */
function nysenate_current_legislative_session() {
  $year = date('Y');
  if ($year % 2 == 0) {
    $year--;
  }
  return $year;
}

/**
 * Implements hook_preprocess_media().
 */
function nysenate_theme_preprocess_media(&$variables) {
  if (isset($variables['content']['field_media_file'])) {
    $file_name = $variables['name'];
    $file = $variables['media']->field_media_file->entity;
    $file->setFilename($file_name);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__resolution(&$variables) {
  $node = $variables['node'];

  $variables['label'] = $variables['label'][0]['#context']['value'] ?? '';
  $variables['ol_name'] = isset($variables['elements']['field_ol_name'][0]) ? $variables['elements']['field_ol_name'][0]['#context']['value'] : '';
  $variables['featured_quote'] = isset($variables['elements']['field_featured_quote'][0]) ? $variables['elements']['field_featured_quote'][0]['#context']['value'] : '';
  $variables['ol_law_section'] = isset($variables['elements']['field_ol_law_section'][0]) ? $variables['elements']['field_ol_law_section'][0]['#context']['value'] : '';

  $variables['sponsored_by'] = [
    '#theme' => 'nysenate_sponsor',
    '#bill' => $node,
  ];

  $variables['sponsor_block'] = $node->field_ol_co_sponsor_names->value;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__event(&$variables) {
  $start_date = NULL;
  $end_date = NULL;
  $node = $variables['node'];
  // If the start and end date is the same,
  // set then end_date same as the start_date.
  if ($node instanceof NodeInterface && $node->hasField('field_date_range') && !empty($node->get('field_date_range')->value)) {
    $start_date = new DateTime($node->get('field_date_range')->value, new DateTimeZone('UTC'));
    $start_date->setTimezone(new DateTimeZone('America/New_York'));
    $end_date = $start_date;

    // If there's a start_date key, probably there's
    // end_date key also.
    if (isset($node->get('field_date_range')->end_value)) {
      $end_date = new DateTime($node->get('field_date_range')->end_value, new DateTimeZone('UTC'));
      $end_date->setTimezone(new DateTimeZone('America/New_York'));
    }
  }

  // Set up reference variables indicating if this event spans multiple days.
  $is_multiday = FALSE;
  if (!empty($start_date) && !empty($end_date)) {
    $is_multiday = !($start_date->format('Ymd') == $end_date->format('Ymd'));
  }

  $variables['is_multiday'] = $is_multiday;
  $variables['start_date'] = $start_date ?? '';
  $variables['end_date'] = $end_date ?? '';

  $address = '';
  if (isset($variables['content']['field_location'][0])) {
    if (!empty($variables['content']['field_location'][0]['address_line1']['#value'])) {
      $address = $variables['content']['field_location'][0]['address_line1']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['locality']['#value'])) {
      $address .= $variables['content']['field_location'][0]['locality']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['administrative_area']['#value'])) {
      $address .= $variables['content']['field_location'][0]['administrative_area']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['postal_code']['#value'])) {
      $address .= $variables['content']['field_location'][0]['postal_code']['#value'];
    }
    $variables['location_url'] = urlencode($address);
  }

  $issues = [];
  if (!empty($variables['content']['field_issues'])) {
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
      $issues[] = $url;
    }
  }
  $variables['field_issues'] = $issues;

  // Only generate the calendar links
  // if there's a start date.
  if (!empty($start_date)) {
    $title = $variables['node']->getTitle();
    $description = $variables['content']['body'][0]['#text'] ?? '';
    $variables['calendar_links'] = nysenate_theme_generate_add_to_calendar($title, $start_date, $end_date, $is_multiday, $description, $address);
  }

}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__honoree(&$variables) {
  $variables['vet_archive_list'] = views_embed_view('honoree_profiles', 'vets_senator');
  $variables['women_archive_list'] = views_embed_view('honoree_profiles', 'block_3');

  $variables['title'] = $variables['label'][0]['#context']['value'];

  $issues = [];
  if (!empty($variables['content']['field_issues'])) {
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
      $issues[] = $url;
    }
  }
  $variables['issues'] = $issues;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__session(&$variables) {
  $date_value = [];
  $start_date = NULL;
  $end_date = NULL;
  if (isset($variables['content']['field_date_range'][0])) {
    // If date range has same values.
    if (isset($variables['content']['field_date_range'][0]['#text'])) {
      $start_date = new DateTime($variables['content']['field_date_range'][0]['#text']);
      $end_date = new DateTime($variables['content']['field_date_range'][0]['#text']);
    }
    // If date range have different start and end dates.
    elseif (isset($variables['content']['field_date_range'][0]['start_date']['#text'])) {
      $start_date = new DateTime($variables['content']['field_date_range'][0]['start_date']['#text']);
      $end_date = new DateTime($variables['content']['field_date_range'][0]['end_date']['#text']);
    }

    if (isset($start_date) && isset($end_date)) {
      $date_value['day'] = date_format($start_date, "d");
      $date_value['month'] = date_format($start_date, "M");
      $date_value['year'] = date_format($start_date, "Y");
      $date_value['from_time'] = date_format($start_date, "h:i A");
      $date_value['to_time'] = date_format($end_date, "h:i A");
      $date_value['start_date'] = date_format($start_date, "m/d/Y h:i A");
      $date_value['end_date'] = date_format($end_date, "m/d/Y h:i A");
    }

  }

  $video_status = [];
  if (isset($variables['content']['field_video_status'][0])) {
    $video_status['key'] = $variables['content']['field_video_status']['#items']->value;
    $video_status['value'] = $variables['content']['field_video_status'][0]['#markup'];
  }

  $address = '';
  if (isset($variables['content']['field_location'][0])) {
    if (!empty($variables['content']['field_location'][0]['address_line1']['#value'])) {
      $address = $variables['content']['field_location'][0]['address_line1']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['address_line2']['#value'])) {
      $address .= $variables['content']['field_location'][0]['address_line2']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['locality']['#value'])) {
      $address .= $variables['content']['field_location'][0]['locality']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['administrative_area']['#value'])) {
      $address .= $variables['content']['field_location'][0]['administrative_area']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['postal_code']['#value'])) {
      $address .= $variables['content']['field_location'][0]['postal_code']['#value'];
    }
  }

  $location_url = '';
  if (!empty($variables['content']['field_location'][0]['organization']['#value'])) {
    $location_url = $variables['content']['field_location'][0]['organization']['#value'] . ', ' . $address;
  }

  // Only generate the calendar invite
  // if there's start_date.
  if (isset($start_date)) {
    $title = $variables['node']->getTitle();
    // Set up reference variables indicating if this event spans multiple days.
    $is_multiday = !($start_date->format('Ymd') == $end_date->format('Ymd'));
    $description = $variables['content']['body'][0]['#text'] ?? '';
    $variables['calendar_links'] = nysenate_theme_generate_add_to_calendar($title, $start_date, $end_date, $is_multiday, $description, $address);
  }

  $variables['location_url'] = !empty($location_url) ? urlencode($location_url) : urlencode($address);
  $variables['date_value'] = $date_value;
  $variables['video_status'] = $video_status;
  $variables['location'] = $address;
}

/**
 * Method for generating the Add to Calendar links.
 */
function nysenate_theme_generate_add_to_calendar($title, $start_date, $end_date, $is_multiday, $description, $address) {
  $links = [];
  $calendar_types = [
    'ics' => 'Apple iCalendar',
    'google' => 'Google',
    'webOffice' => 'Outlook',
    'webOutlook' => 'Outlook.com',
    'yahoo' => 'Yahoo',
  ];

  $calendar_link_service = \Drupal::service('calendar_link.twig_extension');
  // The end_date of the method calendarLink cannot
  // be empty. Assign the start_date as the end_date
  // if its empty.
  if (empty($end_date)) {
    $end_date = $start_date;
  }

  foreach ($calendar_types as $key => $calendar) {
    $link_text = $calendar_link_service->calendarLink(
      $key,
      $title,
      $start_date,
      $end_date,
      $is_multiday,
      $description,
      $address,
    );

    $class = strtolower($key);
    switch ($key) {
      case 'ics':
        $class = 'apple-cal';
        break;

      case 'webOffice':
        $class = 'outlook';
        break;

      case 'webOutlook':
        $class = 'outlookcom';
        break;

      default:
        break;
    }

    $is_online = FALSE;
    if (in_array($key, ['google', 'webOutlook', 'yahoo'])) {
      $is_online = TRUE;
    }

    $links[] = [
      'type' => $calendar,
      'class' => $class,
      'is_online' => $is_online,
      'url' => $link_text,
    ];
  }

  return $links;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  if ($variables['view_mode'] == 'upcoming_event') {
    $node = $variables['elements']['#node'];
    if ($node->bundle() === 'event') {
      $date = new \Datetime($node->field_date_range->value, new DateTimeZone('UTC'));
      $date->setTimezone(new DateTimeZone('America/New_York'));
      $date_end = new \Datetime($node->field_date_range->end_value, new DateTimeZone('UTC'));
      $date_end->setTimezone(new DateTimeZone('America/New_York'));
      $street_2 = $node->field_location[0]->locality . ', '
        . $node->field_location[0]->administrative_area . ' ' . $node->field_location[0]->postal_code;
      $variables['item'] = [
        'title' => $node->label(),
        'url' => $node->toUrl()->toString(),
        'day' => $date->format('d'),
        'month' => $date->format('M'),
        'location' => $node->field_location[0]->organization,
        'meeting_location' => $node->field_meeting_location->value ?? '',
        'street_1' => $node->field_location[0]->address_line1,
        'street_2' => !empty($node->field_location[0]->locality) ? $street_2 : '',
        'time' => $date->format('g:i A') . ' to ' . $date_end->format('g:i A'),
      ];
    }
  }

  $variables['title'] = $variables['label'][0]['#context']['value'];

  $issues = [];
  if (!empty($variables['content']['field_issues'])) {
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      if (isset($field_issues['#title']) && isset($field_issues['#url'])) {
        $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
        $issues[] = $url;
      }
    }
  }
  $variables['issues'] = $issues;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__open_data(&$variables) {
  $node = $variables['elements']['#node'];
  if ($node->bundle() == 'open_data') {
    $date = new \Datetime($node->field_date->value);
    $end_date = new \Datetime($node->field_end_date->value);
    $publication_date = new \Datetime($node->field_publication_date->value);
    $variables['date'] = $date->format('F d, Y');
    $variables['end_date'] = $end_date->format('F d, Y');
    $variables['open_date_type'] = $node->field_open_date_type
      ->getSetting('allowed_values')[$node->field_open_date_type->value];
    $variables['published_on'] = $publication_date->format('F d, Y');
    $variables['body'] = $node->body->view();
    $variables['title'] = $node->getTitle();
    $variables['title_social'] = $node->toUrl()->toString();
    $variables['url'] = $node->toUrl()->setAbsolute()->toString();
    $variables['cta'] = 'Check out this open data report';

    if (!empty($node->field_open_data_file->getValue())) {
      foreach ($node->field_open_data_file as $item) {
        if ($item->isDisplayed()) {
          $file = File::load($item->target_id);
          $file_url_generator = \Drupal::service('file_url_generator');
          $variables['file_items'][] = [
            'url' => $file_url_generator->generateAbsoluteString($file->getFileUri()),
            'text' => ($item->description !== '') ? $item->description : $file->getFilename(),
            'type' => $file->getMimeType(),
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__article__featured_content(&$variables) {
  $variables['image_main'] = !empty($variables['content']['field_image_main'][0]) ? $variables['content']['field_image_main'][0] : [];
  $field_issues = $variables['content']['field_issues'];
  foreach ($field_issues as $key => $issue) {
    if (!is_numeric($key)) {
      continue;
    }

    $variables['tags'][] = [
      'url' => $issue['#url'],
      'text' => $issue['#title'],
    ];
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__bill__featured_content(&$variables) {
  $variables['item_cta'] = [
    'url' => $variables['url'],
    'text' => 'Read More',
    'value' => 'read_more',
  ];

  $current_node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($current_node->field_senator_multiref->getValue())) {
    $senator = $current_node->field_senator_multiref->entity;
    $party = $senator->field_party->getValue();
    $parties = implode(', ', array_map(function ($item) {
      return $item['value'];
    }, $party));
    $variables['senator_name'] = $senator->getName();
    $variables['senator_link'] = $senator->toUrl()->toString();
    $variables['senator_image'] = $senator->field_member_headshot->view('full')[0];
    $variables['party'] = '(' . $parties . ')';
  }

  $node = $variables['node'];
  $allowed_values = '';
  if ($node->hasField('field_ol_last_status')) {
    $allowed_values = $node->field_ol_last_status->getSetting('allowed_values');
  }
  $published_date = '';
  if ($node->hasField('field_ol_publish_date') &&
    !$node->get('field_ol_publish_date')->isEmpty()) {
    $published_date = $node->field_ol_publish_date->value;
  }

  $last_status = '';
  if ($node->hasField('field_ol_last_status') && !$node->get('field_ol_last_status')->isEmpty()) {
    $last_status = $allowed_values[$node->field_ol_last_status->value];
  }

  $variables['bill'] = [
    'featured' => TRUE,
    'small' => FALSE,
    'is_poll' => TRUE,
    'resolution' => TRUE,
    'link' => $node->toUrl()->toString(),
    'number' => $node->getTitle(),
    'description_position' => 'bottom',
    'description' => !empty($node->field_ol_name->value) ? $node->field_ol_name->value : '',
    'date' => !empty($published_date) ? \Drupal::service('date.formatter')->format(strtotime($published_date), '', 'F d, Y') : '',
    'update_location' => $last_status,
    'positions' => nysenate_bill_positions($node),
  ];
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__event__featured_content(&$variables) {
  $content = $variables['content'];
  $variables['image_main'] = !empty($content['field_image_main'][0]) ? $content['field_image_main'][0] : [];
  $location = $content['field_location'][0];
  $street_2 = $location['locality']['#value'] . ', '
    . $location['administrative_area']['#value'] . ' ' . $location['postal_code']['#value'];
  $variables['location'] = $location['organization'];
  $variables['meeting_location'] = $content['field_meeting_location'][0] ?? '';
  $variables['street_1'] = $location['address_line1'] ?? '';
  $variables['street_2'] = !empty($location['locality']['#value']) ? $street_2 : '';
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__promotional_banner__featured_content(&$variables) {
  $variables['banner_image'] = !empty($variables['content']['field_promotional_banner_image'][0]) ? $variables['content']['field_promotional_banner_image'][0] : [];
  if ($variables['node']->hasField('field_call_to_action') && !$variables['node']->field_call_to_action->isEmpty()) {
    $banner_cta_value = $variables['node']->field_call_to_action->value;
    $allowed_values = $variables['node']->field_call_to_action->getSetting('allowed_values');
    $variables['item_cta'] = [
      'url' => $variables['node']->field_link->uri ?? '',
      'text' => $allowed_values[$banner_cta_value],
      'value' => $banner_cta_value,
    ];
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function nysenate_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $views_id = [
    'views-exposed-form-senator-microsite-content-microsite-newsroom-content',
    'views-exposed-form-senator-microsite-content-microsite-legislation-content',
  ];

  if (!empty($form['#id']) && in_array($form['#id'], $views_id)) {
    $form['#attributes']['class'][] = 'l-tab-bar';
    $form['#attached']['library'][] = 'nysenate_theme/newsroom-content';

    if ($form['#id'] == 'views-exposed-form-senator-microsite-content-microsite-newsroom-content') {
      $form['type_1']['#options']['All'] = t('All News');
    }

    if ($form['#id'] == 'views-exposed-form-senator-microsite-content-microsite-legislation-content') {
      unset($form['type']['#options']['All']);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function nysenate_theme_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_newsroom_content') {
    // Retrieve the filter inputs.
    $filter = $view->exposed_raw_input;
    $filter = $filter['type_1'];
    // 1 stands for Press Release.
    if ($filter == '1') {
      $results = $view->result;
      $filteredResults = [];
      foreach ($results as $result) {
        // Get all the press_release category nodes.
        /** @var \Drupal\node\Entity\Node $node */
        $node = $result->_entity;
        if ($node->hasField('field_category') && !$node->get('field_category')->isEmpty()) {
          if ($node->field_category->value == 'press_release') {
            $filteredResults[] = $result;
          }
        }
      }
      // Override the views results.
      $view->result = $filteredResults;
      $view->total_rows = count($filteredResults);
    }
  }
}

/**
 * Implements hook_form_element_alter().
 */
function nysenate_theme_preprocess_form_element(&$variables) {
  if (!empty($variables['element']['#parents'])) {
    if (array_intersect(['type_1', 'type'], $variables['element']['#parents'])) {
      $variables['attributes']['class'][] = 'c-tab';
      $variables['label']['#attributes']['class'][] = 'c-tab-link';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function nysenate_theme_preprocess_page(&$variables) {
  $menu_tree = \Drupal::menuTree();
  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('socials');
  // Load the tree based on this set of parameters.
  $tree = $menu_tree->load('socials', $parameters);

  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  // Transform the tree using the manipulators you want.
  $tree = $menu_tree->transform($tree, $manipulators);
  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  if (isset($menu['#items'])) {
    $socials = [];
    foreach ($menu['#items'] as $link) {
      $socials[] = [
        'icon' => $link['title'],
        'url' => $link['url']->toString(),
      ];
    }
    $variables['socials'] = $socials;
  }

  // Microsite theme settings.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node->bundle() == 'microsite_page') {
    if (!empty($node->field_senator_multiref)) {
      $sid = $node->field_senator_multiref->target_id;
      $senator = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->load($sid);

      if (!empty($senator->field_microsite_theme)) {
        $variables['theme'] = $senator->field_microsite_theme->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__promotional_banner__card_list(&$variables) {
  if ($variables['node']->hasField('field_call_to_action') && !$variables['node']->field_call_to_action->isEmpty()) {
    $banner_cta_value = $variables['node']->field_call_to_action->value;
    $allowed_values = $variables['node']->field_call_to_action->getSetting('allowed_values');
    $variables['item_cta'] = [
      'url' => $variables['node']->field_link->uri ?? '',
      'text' => $allowed_values[$banner_cta_value],
      'value' => $banner_cta_value,
    ];
  }
}

/**
 * Implements hook_preprocess_page().
 */
function nysenate_theme_preprocess_node__microsite_page__full(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node->hasField('field_microsite_page_type') &&
    !$node->get('field_microsite_page_type')->isEmpty()) {
    $term = $node->field_microsite_page_type->entity ?? [];
    if ($term instanceof TermInterface) {
      $name = $term->name->value ?? '';
      if ($name === 'About') {
        $variables['microsite_type'] = strtolower($name);
        $variables['title'] = $node->getTitle();
        if ($node->hasField('field_short_title') && !$node->get('field_short_title')->isEmpty()) {
          $variables['short_title'] = $node->field_short_title->value;
        }

        if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
          $senator = $node->field_senator_multiref->first()->entity;

          if ($senator->hasField('field_party') && !$senator->get('field_party')->isEmpty()) {
            $party_values = $senator->field_party->getSetting('allowed_values');
            $party = $senator->field_party->value;
            $variables['party'] = $party_values[$party];
          }

          $district_name = '';
          $query = \Drupal::database()->select('taxonomy_term__field_senator', 's');
          $query->condition('s.field_senator_target_id', $senator->id());
          $query->fields('s', ['entity_id']);
          $result = $query->execute()->fetchAssoc();
          if (!empty($result)) {
            $id = $result['entity_id'];
            $district = Term::load($id);
            $district_name = $district->label();
            if (strpos($district_name, 'NY Senate') !== FALSE) {
              $district_name = trim(str_replace('NY Senate', '', $district_name));
            }

            $variables['district_name'] = $district_name;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node__TYPE().
 *
 * Create the variables needed for the Transcript content type.
 */
function nysenate_theme_preprocess_node__transcript__full(&$variables) {
  $session_type = $variables['content']['field_ol_session_type'][0]['#context']['value'] ?? '';
  $publish_date = $variables['content']['field_ol_publish_date'][0]['#text'] ?? '';
  $publish_date = !empty($publish_date) ? strtotime($publish_date) : '';

  $ol_base_url = \Drupal::state()->get('openleg_base_url', 'http://legislation.nysenate.gov');
  $transcript_base_url = $ol_base_url . '/pdf/';
  $transcript_type = $variables['content']['field_ol_transcript_type'][0]['#markup'] ?? '';
  $is_hearing = NULL;
  if ($transcript_type) {
    $is_hearing = ($transcript_type === 'public_hearing');
  }

  $is_hearing = ($variables['content']['field_ol_transcript_type'][0]['#markup'] === 'public_hearing');
  $pointer_type = (($is_hearing) ? 'hearings' : 'transcripts');
  $pointer = '';
  if ($is_hearing) {
    $pointer = rawurlencode($variables['content']['field_ol_filename'][0]['#context']['value']);
  }
  else {
    if (!empty($publish_date)) {
      $pointer = date("Y-m-d\TH:i", $publish_date);
    }
  }

  // Set a label indicating the type of transcript.
  $tx_type_field = ($is_hearing) ? t('Public Hearing') : Html::escape(ucwords(strtolower($session_type)));

  // Trailing slash is needed in the pdf url.
  $variables['pdf_url'] = $transcript_base_url . $pointer_type . '/' . $pointer . '/';
  $variables['node_id'] = $variables['node']->id();
  $title_date = '';
  if (!empty($publish_date)) {
    $title_date = date('F j, Y', $publish_date);
  }
  $variables['transcript_title'] = $tx_type_field . ' - ' . $title_date;
}
