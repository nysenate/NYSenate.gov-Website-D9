<?php

/**
 * @file
 * Functions to support theming in the rain_theme theme.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\user\Entity\User;
use Drupal\nys_users\UsersHelper;
use Drupal\views\Views;
use Drupal\file\Entity\File;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Component\Utility\Html;
use Drupal\taxonomy\TermInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\block_content\Entity\BlockContent;
use Drupal\address\Plugin\Field\FieldType\AddressItem;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function nysenate_theme_preprocess_html(&$variables) {
  $path_args = explode('/', \Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      $variables['attributes']['class'][] = $suggestion;
    }
  }
}

/**
 * Implements hook_preprocess_menu_ID().
 */
function nysenate_theme_preprocess_menu__socials(&$variables) {
  $socials = [];
  foreach ($variables['items'] as $link) {
    $socials[] = [
      'icon' => $link['title'],
      'url' => $link['url']->toString(),
    ];
  }
  $variables['socials'] = $socials;
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__system_branding_block(&$variables) {
  $variables['site_branding'] = [
    'text' => $variables['site_name'],
    'img' => [
      'url' => 'https://www.nysenate.gov/sites/all/themes/nysenate/images/nys_logo224x224.png',
      'alt' => 'New York State Senate Seal',
    ],
    'link' => Url::fromRoute('<front>'),
  ];
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block_content__how_senate_works(&$variables) {
  if (!empty($variables['elements']['field_link'][0])) {
    $variables['cta'] = [
      'text' => $variables['elements']['field_link'][0]['#title'],
      'link' => $variables['elements']['field_link'][0]['#url']->toString(),
    ];
  }

  $steps = [];
  foreach ($variables['elements']['field_steps'] as $key => $items) {
    if (!is_numeric($key)) {
      continue;
    }

    $title = '';
    $description = '';

    if ($items['#paragraph']->field_title->getValue()) {
      $title = $items['#paragraph']->field_title->getValue();
      $title = reset($title)['value'];
    }

    if ($items['#paragraph']->field_description->getValue()) {
      $description = $items['#paragraph']->field_description->getValue();
      $description = reset($description)['value'];
    }

    $steps[] = [
      'title' => $title,
      'description' => $description,
    ];
  }

  $variables['steps'] = $steps;
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__article(&$variables) {
  $variables['title'] = $variables['label'][0]['#context']['value'];
  if (isset($variables['content']['field_date'][0]['#markup'])) {
    $variables['field_date'] = $variables['content']['field_date'][0]['#markup'];
  }

  if (isset($variables['content']['field_issues'])) {
    $issues = [];
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
      $issues[] = $url;
    }
    $variables['issues'] = $issues;
  }

  if (isset($variables['content']['field_majority_issue_tag'])) {
    foreach ($variables['content']['field_majority_issue_tag'] as $key => $field_majority_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $variables['majority_issue'] = Link::fromTextAndUrl($field_majority_issues['#title'], $field_majority_issues['#url']);
    }
  }

  if (isset($variables['content']['field_image_caption'][0])) {
    $variables['image_caption'] = $variables['content']['field_image_caption'][0]['#context']['value'];
  }

}

/**
 * Implements hook_preprocess_block_content__ID().
 */
function nysenate_theme_preprocess_block_content__microsite_contact(&$variables) {
  $block = $variables['elements']['#block_content'];

  $id = NULL;
  if ($block->hasField('field_senator') && !$block->get('field_senator')->isEmpty()) {
    $id = $block->field_senator->target_id;
  }

  $contact_type = '';
  if ($block->hasField('field_contact_type') && !$block->get('field_contact_type')->isEmpty()) {
    $contact_type = $block->field_contact_type->value;
    $variables['contact_type'] = $contact_type;
  }

  $senator = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->load($id);

  if (isset($senator->name->value) && !empty($senator->name->value)) {
    $variables['title'] = $senator->name->value . '\'s';
  }

  if ($contact_type == 'full') {
    if ($senator->hasField('field_email') && !$senator->get('field_email')->isEmpty()) {
      $variables['email'] = $senator->field_email->value;
    }

    if ($senator->hasField('field_offices') && !$senator->get('field_offices')->isEmpty()) {
      $offices = [];
      foreach ($senator->field_offices as $field_office) {
        $office = $field_office->entity;
        $name = '';
        $street = '';
        $additional = '';
        $city = '';
        $province = '';
        $postal_code = '';
        if ($office->hasField('field_office_address') && !$office->get('field_office_address')->isEmpty()) {
          $address = $office->field_office_address;
          $loc = '';
          if (!empty($address->organization)) {
            $name = $address->organization;
          }

          if (!empty($address->address_line1)) {
            $street = $address->address_line1;
            $loc = $street . ', ';
          }

          if (!empty($address->address_line2)) {
            $additional = $address->address_line2;
            $loc = $additional . ', ';
          }

          if (!empty($address->locality)) {
            $city = $address->locality;
            $loc .= $city . ', ';
          }

          if (!empty($address->administrative_area)) {
            $province = $address->administrative_area;
            $loc .= $province . ', ';
          }

          if (!empty($address->postal_code)) {
            $postal_code = $address->postal_code;
            $loc .= $postal_code;
          }
        }

        // Office hours.
        $office_hours = '';
        if ($office->hasField('field_office_hours') && !$office->get('field_office_hours')->isEmpty()) {
          $office_hours = $office->field_office_hours->value;
        }

        // Phone number.
        $phone = '';
        if ($office->hasField('field_office_contact_phone') && !$office->get('field_office_contact_phone')->isEmpty()) {
          $phone = $office->field_office_contact_phone->value;
        }

        // Fax.
        $fax = '';
        if ($office->hasField('field_fax') && !$office->get('field_fax')->isEmpty()) {
          $fax = $office->field_fax->value;
        }

        $offices[] = [
          'name' => $name,
          'street' => $street,
          'additional' => $additional,
          'city' => $city,
          'province' => $province,
          'postal_code' => $postal_code,
          'office_hours' => $office_hours,
          'phone' => $phone,
          'fax' => $fax,
          'loc' => !empty($loc) ? urlencode($loc) : '',
        ];
      }

      $variables['office_locations'] = $offices;
    }

    if ($senator->hasField('field_office_contacts') && !$senator->get('field_office_contacts')->isEmpty()) {
      $contacts = [];
      foreach ($senator->field_office_contacts as $office_contact) {
        $contact = $office_contact->entity;

        $contacts[] = [
          'name' => $contact->field_office_contact_name->value ?? '',
          'title' => $contact->field_office_contact_title->value ?? '',
          'phone' => $contact->field_office_contact_phone->value ?? '',
          'email' => $contact->field_office_contact_email->value ?? '',
        ];
      }

      $variables['office_contacts'] = $contacts;
    }
  }
  elseif ($contact_type == 'media_inquiries') {
    if ($senator->hasField('field_media_contact') && !$senator->get('field_media_contact')->isEmpty()) {
      $variables['name'] = $senator->field_media_contact->value;
    }

    if ($senator->hasField('field_media_email') && !$senator->get('field_media_email')->isEmpty()) {
      $variables['email'] = $senator->field_media_email->value;
    }

    if ($senator->hasField('field_media_phone') && !$senator->get('field_media_phone')->isEmpty()) {
      $variables['phone'] = $senator->field_media_phone->value;
    }

    if ($senator->hasField('field_media_fax') && !$senator->get('field_media_fax')->isEmpty()) {
      $variables['fax'] = $senator->field_media_fax->value;
    }
    if ($senator->hasField('field_press_kit') && !$senator->get('field_press_kit')->isEmpty()) {
      $file = File::load($senator->field_press_kit->target_id);
      $variables['press_kit'] = \Drupal::service('file_url_generator')->generate($file->get('uri')->value);
    }
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__microsite_hero(&$variables) {

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node->bundle() == 'microsite_page') {
    $current_path = \Drupal::request()->getRequestUri();
    $arr_path = explode('/', $current_path);
    $variables['message_senator_link'] = '/senators/' . $arr_path[2] . '/message';
  }

  $sid = $variables['content']['field_senator'][0]['#plain_text'];
  $senator = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->load($sid);

  // Senator name.
  $senator_name = '';
  if ($senator->field_senator_name) {
    $title = $senator->field_senator_name->title ?? '';
    $given = $senator->field_senator_name->given ?? '';
    $family = $senator->field_senator_name->family ?? '';
    $senator_name = $title . ' ' . $given . ' ' . $family;
    $senator_name = trim($senator_name);
  }

  // Image hero.
  if ($senator->hasField('field_image_hero') && !$senator->get('field_image_hero')->isEmpty()) {
    $microsite_hero_id = $senator->field_image_hero->target_id;
    $microsite_hero = \Drupal::entityTypeManager()->getStorage('media')
      ->load($microsite_hero_id);

    $variables['image_hero'] = \Drupal::entityTypeManager()->getViewBuilder('media')->view($microsite_hero, 'senator_microsite_hero');
  }

  if ($senator->hasField('field_member_headshot') && !$senator->get('field_member_headshot')->isEmpty()) {
    $headshot_id = $senator->field_member_headshot->target_id;
    $headshot = \Drupal::entityTypeManager()->getStorage('media')
      ->load($headshot_id);

    $variables['senator_headshot'] = \Drupal::entityTypeManager()->getViewBuilder('media')->view($headshot, 'thumbnail');
  }

  if ($node->hasField('field_microsite_page_type') && !$node->get('field_microsite_page_type')->isEmpty()) {
    $term = $node->field_microsite_page_type->entity ?? [];
    if ($term instanceof TermInterface) {
      $name = $term->name->value ?? '';
      $micrositeType = [
        'Landing',
        'Inactive',
      ];
      $variables['is_senator_landing'] = in_array($name, $micrositeType) ? TRUE : FALSE;
    }
  }

  $microsite_home = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'microsite_page',
    // Landing page.
    'field_microsite_page_type' => '200005',
    'field_senator_multiref' => $senator->id(),
  ]);

  if (!empty($microsite_home)) {
    $home = reset($microsite_home);
    $variables['senator_microsite_link'] = $home->toUrl()->toString();
  }

  // Party Affiliation.
  $party_affiliation = $senator->get('field_party')->getValue();
  $arr_party = [];
  foreach ($party_affiliation as $party) {
    $arr_party[] = $party['value'];
  }
  $party = implode(', ', $arr_party);

  // District.
  $district_url = '';
  $query = \Drupal::database()->select('taxonomy_term__field_senator', 's')
    ->fields('s', ['entity_id'])
    ->condition('s.field_senator_target_id', $sid);
  $district_id = $query->execute()->fetchField();

  if (!empty($district_id)) {
    $district = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($district_id);
    $district_url = $district->toUrl()->toString();
  }

  $district_number = [
    'url' => $district_url,
    'text' => get_senator_district($sid) ?? '',
  ];

  // Social links.
  $socials = [];
  if (!empty($senator->field_facebook_url->value)) {
    $socials[] = [
      'name' => 'facebook',
      'url' => $senator->field_facebook_url->value,
    ];
  }

  if (!empty($senator->field_twitter_url->value)) {
    $socials[] = [
      'name' => 'twitter',
      'url' => $senator->field_twitter_url->value,
    ];
  }

  if (!empty($senator->field_youtube_url->value)) {
    $socials[] = [
      'name' => 'youtube',
      'url' => $senator->field_youtube_url->value,
    ];
  }

  if (!empty($senator->field_instagram_url->value)) {
    $socials[] = [
      'name' => 'instagram',
      'url' => $senator->field_instagram_url->value,
    ];
  }

  $variables['user_id'] = \Drupal::currentUser()->id();
  $variables['senator_name'] = $senator_name;
  $variables['senator_party'] = '( ' . $party . ' )';
  $variables['current_duties'] = $senator->field_current_duties->value;
  $variables['district_number'] = $district_number;
  $variables['is_active'] = $senator->field_active_senator->value == 1 ? TRUE : FALSE;
  $variables['socials'] = $socials;
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_senator_microsite_menu_block(&$variables) {
  if (!empty($variables['menu_links'])) {
    $links = [];
    foreach ($variables['menu_links'] as $link) {
      $links[] = [
        'text' => $link['menu_title'],
        'url' => $link['menu_url'],
      ];
    }
    $variables['links'] = $links;
    /** @var \Drupal\node\NodeInterface $micrositeNode */
    $micrositeNode = \Drupal::routeMatch()->getParameter('node');
    if ($micrositeNode->hasField('field_senator_multiref') && !$micrositeNode->get('field_senator_multiref')->isEmpty()) {
      $tid = $micrositeNode->get('field_senator_multiref')->first()->getString() ?? '';
      if (!empty($tid)) {
        $senatorName = Term::load($tid)->get('name')->value;
        $variables['senatorName'] = $senatorName;
      }
    }
  }
}

/**
 * Implements hook_preproces_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__honoree_profile_block(&$variables) {
  $variables['title'] = $variables['elements']['#block_content']->label();
  if (!empty($variables['content']['field_link'][0])) {
    $variables['cta'] = [
      'text' => $variables['content']['field_link'][0]['#title'],
      'url' => $variables['content']['field_link'][0]['#url']->toString(),
    ];
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__quick_facts(&$variables) {
  $facts = [];
  $current_year = date('Y');
  if ($current_year % 2 == 0) {
    $session_year = $current_year - 1;
    $first_year   = $session_year;
    $second_year  = substr($current_year, -2);
  }
  else {
    $session_year = $current_year;
    $first_year   = $current_year;
    $second_year  = substr($current_year + 1, -2);
  }

  foreach ($variables['content']['field_quick_facts'] as $key => $items) {
    if (!is_numeric($key)) {
      continue;
    }

    $description = '';
    $statistic = '';

    if ($items['#paragraph']->field_pg_quick_facts_label->getValue()) {
      $description = $items['#paragraph']->field_pg_quick_facts_label->getValue();
      $description = reset($description)['value'];
    }

    if ($items['#paragraph']->field_pg_quick_facts_no->getValue()) {
      $statistic = $items['#paragraph']->field_pg_quick_facts_no->getValue();
      $statistic = reset($statistic)['value'];
    }

    $facts[] = [
      'description' => $description,
      'statistic' => $statistic,
    ];
  }

  // Set static status for the facts.
  $facts[0]['status'] = 'signed';
  $facts[1]['status'] = 'waiting';
  $facts[2]['status'] = 'vetoed';

  $bill_status = '';
  foreach ($facts as $key => $fact) {
    if (!empty($facts['status'])) {
      switch ($fact['status']) {
        case 'signed':
          $bill_status = 'SIGNED_BY_GOV';
          break;

        case 'waiting':
          $bill_status = 'DELIVERED_TO_GOV';
          break;

        case 'vetoed':
          $bill_status = 'VETOED';
          break;

        default:
          break;
      }
    }
    // Arrange array for url params.
    $params = [
      'searched' => 'true',
      'type' => 'f_bill',
      'bill_session_year' => $session_year,
      'bill_status' => $bill_status,
      'page' => 1,
    ];
    $link = Url::fromUserInput('/search/legislation', ['query' => $params])->toString();
    $facts[$key]['link'] = $link;
  }

  $variables['facts'] = $facts;

  $year = $first_year . '-' . $second_year;
  $title = $year . ', ' . $variables['elements']['#block_content']->info->getValue()[0]['value'];
  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__featured_image(&$variables) {
  $variables['title'] = $variables['elements']['#block_content']->info->value;
  if (isset($variables['content']['field_pg_full_width_bleed'][0]) && !empty($variables['content']['field_pg_full_width_bleed'][0])) {
    $variables['full_width_bleed'] = strtolower($variables['content']['field_pg_full_width_bleed'][0]['#markup']) == 'on' ? TRUE : FALSE;
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__featured_bill(&$variables) {
  if (isset($variables['content']['field_bills']) && !empty($variables['content']['field_bills'])) {
    $bills = [];
    foreach ($variables['content']['field_bills'] as $key => $bill) {
      if (!is_numeric($key)) {
        continue;
      }
      $node = $bill['#node'];

      // Published date.
      $date = \Drupal::service('date.formatter')->format(strtotime($node->field_ol_publish_date->value), '', 'F d, Y');

      // Last status.
      $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
      $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';
      // All status.
      $positions = nysenate_bill_positions($node);

      $sponsor_name = NULL;
      if ($node->hasField('field_ol_sponsor') && !$node->get('field_ol_sponsor')->isEmpty()) {
        $sponsor = $node->field_ol_sponsor->entity;

        $given = $sponsor->field_senator_name->given ?? '';
        $family = $sponsor->field_senator_name->family ?? '';
        $sponsor_name = $given . ' ' . $family;
      }

      $bills[] = [
        'number' => $node->label(),
        'description' => $node->field_ol_name->value,
        'date' => $date,
        'update_location' => $last_status,
        'sponsor' => $sponsor_name ?? '',
        'positions' => $positions,
      ];

      $variables['bills'] = $bills;
    }
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__featured_legislation(&$variables) {

  if (isset($variables['content']['field_featured_legislation']) && !empty($variables['content']['field_featured_legislation'])) {

    $current_node = \Drupal::routeMatch()->getParameter('node');
    if (!empty($current_node->field_senator_multiref->getValue())) {
      $senator = $current_node->field_senator_multiref->entity;
      $party = $senator->field_party->getValue();
      $parties = implode(', ', array_map(function ($item) {
        return $item['value'];
      }, $party));
      $variables['senator_name'] = $senator->getName();
      $variables['senator_link'] = $senator->toUrl()->toString();
      $variables['party'] = '(' . $parties . ')';

      if ($senator->hasField('field_member_headshot') && !$senator->get('field_member_headshot')->isEmpty()) {
        $variables['senator_image'] = !empty($senator->field_member_headshot->view('full')) ?
          $senator->field_member_headshot->view('full')[0] : $senator->field_member_headshot->view()[0];
      }
    }

    $bills = [];
    $itemsFeaturedLegislation = $variables['content']['field_featured_legislation']['#items']->getValue();
    foreach ($itemsFeaturedLegislation as $item) {

      $content = Paragraph::load($item['target_id']);
      if ($content->hasField('field_featured_quote') && !$content->get('field_featured_quote')->isEmpty()) {

        $quote = $content->field_featured_quote->value;
        $bill_id = $content->get('field_featured_bill')->first()->getValue()['target_id'];
        $bill = Node::load($bill_id);

        $allowed_values = '';
        if ($bill->hasField('field_ol_last_status')) {
          $allowed_values = $bill->field_ol_last_status->getSetting('allowed_values');
        }
        $published_date = '';
        if ($bill->hasField('field_ol_publish_date') &&
          !$bill->get('field_ol_publish_date')->isEmpty()) {
          $published_date = $bill->field_ol_publish_date->value;
        }

        // If published_date is not timestamp, use strtotime().
        if (!empty($published_date) && strpos($published_date, 'T') !== FALSE) {
          $published_date = strtotime($published_date);
        }

        $last_status = '';
        if ($bill->hasField('field_ol_last_status') && !$bill->get('field_ol_last_status')->isEmpty()) {
          $last_status = $allowed_values[$bill->field_ol_last_status->value];
        }
        $bills[] = [
          'bill' => [
            'featured' => TRUE,
            'small' => FALSE,
            'is_poll' => TRUE,
            'resolution' => TRUE,
            'link' => $bill->toUrl()->toString(),
            'number' => $bill->getTitle(),
            'description_position' => 'bottom',
            'description' => !empty($bill->field_ol_name->value) ? $bill->field_ol_name->value : '',
            'date' => !empty($published_date) ? \Drupal::service('date.formatter')->format($published_date, '', 'F d, Y') : '',
            'update_location' => $last_status,
            'positions' => nysenate_bill_positions($bill),
          ],
          'quote' => $quote,
        ];
      }
    }

    $variables['bills'] = $bills;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nysenate_theme_preprocess_block_content__featured_content(&$variables) {
  $field_content = $variables['content']['field_content'];
  $position = 'c-block--even';
  foreach ($field_content as $key => $item) {
    if (!is_numeric($key)) {
      continue;
    }

    $node = $item['#node'];
    if ($node->bundle() == 'promotional_banner') {

      if (!empty($node->field_promotional_banner_image->getValue())) {
        $position = 'c-block--even';
      }
      else {
        $variables['content']['field_content'][$key]['#attributes']['class'][] = $position;
        $position = $position == 'c-block--even' ? 'c-block--odd' : 'c-block--even';
      }
    }
    else {
      $position = 'c-block--even';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nysenate_theme_preprocess_block(&$variables) {
  if (isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->type->target_id == 'text') {
      $variables['content']['#block_content']->label_display = $variables['configuration']['label_display'];
    }
  }
}

/**
 * Implements hook_preprocess_block_content_ID().
 */
function nysenate_theme_preprocess_block_content__text(&$variables) {
  $text = [];
  if (isset($variables['content']['field_body_left'][0])) {
    $text['left'] = [
      'text' => $variables['content']['field_body_left'][0]['#text'],
    ];
  }

  if (isset($variables['content']['field_body_right'][0])) {
    $text['right'] = [
      'text' => $variables['content']['field_body_right'][0]['#text'],
    ];
  }

  $variables['text'] = $text;
  $variables['is_two_column'] = count($text) == 2 ? TRUE : FALSE;
  if (isset($variables['content']['field_is_full_bleed'][0])) {
    $variables['is_full_bleed'] = strtolower($variables['content']['field_is_full_bleed'][0]['#markup']) == 'on' ? TRUE : FALSE;
  }

  if (isset($variables['content']['field_with_background'][0])) {
    $variables['with_bg'] = strtolower($variables['content']['field_with_background'][0]['#markup']) == 'on' ? TRUE : FALSE;
  }

  // Set default value for label display.
  $variables['label_display'] = TRUE;
  // Override value if the title display is being controlled
  // by 'Display Title' checkbox in block configuration.
  if (isset($variables['elements']['#block_content']->label_display)) {
    $variables['label_display'] = $variables['elements']['#block_content']->label_display == 'visible' ? TRUE : FALSE;
  }
}

/**
 * Implements hook_preprocess_block_ID().
 */
function nysenate_theme_preprocess_block__views_block__homepage_hero_homepage_hero(&$variables) {
  $media_storage = \Drupal::entityTypeManager()->getStorage('media');
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  $result = $variables["content"]["#view"]->result;

  foreach ($result as $node) {
    $node = $node->_entity;
    $streaming = [
      'session',
      'public_hearing',
    ];

    if ($node instanceof NodeInterface && in_array($node->bundle(), $streaming)) {
      $date = NULL;
      if (isset($node->field_date_range)) {
        $date_range = $node->field_date_range;
        if (!empty($date_range->start_date)) {
          /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
          $start_date = $date_range->start_date;
          $date = \Drupal::service('date.formatter')->format(
            $start_date->getTimestamp(), 'custom', 'F d, Y'
          );
        }
      }

      if ($node->hasField('field_session_calendars') && !$node->field_session_calendars->isEmpty() && $node->field_session_calendars->entity instanceof NodeInterface) {
        $url_calendar = $node->field_session_calendars->entity->toUrl()->toString();
      }

      if (!$node->field_ustream->isEmpty()) {
        $media_id = $node->field_ustream->value ?? [];
      }

      $variables['homepage_hero'] = [
        'type' => $node->bundle(),
        'date' => $date ?? '',
        'url_calendar' => $url_calendar ?? '#',
        'media_id' => $media_id ?? [],
      ];
    }
    else {
      $image_main = NULL;
      if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
        $media = !empty($node->field_image_main->target_id) ? $media_storage->load($node->field_image_main->target_id) : NULL;
        if (!empty($media)) {
          $image_main = \Drupal::entityTypeManager()->getViewBuilder('media')->view($media, 'default');
        }
      }

      $date = '';
      if ($node->hasField('field_date')) {
        $date = $node->field_date->value ? \Drupal::service('date.formatter')->format(strtotime($node->field_date->value), '', 'F j, Y') : NULL;
      }
      elseif ($node->hasField('field_date_range')) {
        $date_range = $node->field_date_range;
        if (!empty($date_range->start_date)) {
          /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
          $start_date = $date_range->start_date;
          $date = \Drupal::service('date.formatter')->format(
            $start_date->getTimestamp(), 'custom', 'F d, Y'
          );
        }
      }

      $committee = NULL;
      if ($node->hasField('field_committee') && !empty($node->field_committee->getValue())) {
        $field_committee = $node->field_committee[0]->target_id;
        $term = !empty($field_committee) ? $term_storage->load($field_committee) : NULL;
        $committee = $term->toLink()->toRenderable() ?? NULL;
      }

      $variables['homepage_hero'] = [
        'type' => $node->bundle(),
        'date' => $date,
        'title' => $node->getTitle(),
        'url' => $node->toUrl()->toString(),
        'committee' => $committee,
        'image_hero' => $image_main,
      ];

    }
  }

  // Invalidate cache tags on views:homepage_hero.
  $variables['#cache']['tags'][] = 'views:homepage_hero';
}

/**
 * Implements hook_preprocess_block_content_TYPE().
 */
function nysenate_theme_preprocess_block_content__promotional_banner(&$variables) {
  $banners = [];
  $entity_manager = \Drupal::entityTypeManager();

  if ($variables['content']['field_promotional_banner']) {
    foreach ($variables['content']['field_promotional_banner'] as $key => $banner) {
      if (!is_numeric($key)) {
        continue;
      }

      $modifier = '';
      if ($key > 0) {
        $modifier = 'two-up';
      }

      // Media image.
      $mid = NULL;
      if ($banner['#node']->hasField('field_promotional_banner_image') && !$banner['#node']->get('field_promotional_banner_image')->isEmpty()) {
        $mid = $banner['#node']->field_promotional_banner_image->target_id;
      }

      $media_image = NULL;
      if (!empty($mid)) {
        $media_image = $entity_manager->getStorage('media')->load($mid);
      }

      // Retrieve the URL.
      $url = '';
      if ($banner['#node']->field_link_type->value == 'internal') {
        $node = $entity_manager->getStorage('node')->load($banner['#node']->field_promotional_content->target_id);
        $url = $node->toUrl()->toString();
      }

      elseif ($banner['#node']->field_link_type->value == 'external') {
        $url = $banner['#node']->field_link->uri;
      }

      // Call to action string.
      $text = t('Read More');
      $senator_name = NULL;
      if ($banner['#node']->hasField('field_call_to_action') && !$banner['#node']->get('field_call_to_action')->isEmpty()) {
        $text = $banner['#node']->field_call_to_action->getSetting('allowed_values');
        $text = $text[$banner['#node']->field_call_to_action->value];

        // Add senator name.
        if ($banner['#node']->field_call_to_action->value == 'petition') {
          $node = \Drupal::routeMatch()->getParameter('node');
          if ($node instanceof NodeInterface) {
            if ($node->bundle() == 'microsite_page') {
              if (!empty($node->field_senator_multiref->target_id)) {
                // Load the senator taxonomy term found
                // in field_senator_multiref field.
                $senator = $entity_manager->getStorage('taxonomy_term')->load($node->field_senator_multiref->target_id);
              }

              if (!empty($senator)) {
                // Senator name.
                if ($senator->field_senator_name) {
                  $title = $senator->field_senator_name->title ?? '';
                  $given = $senator->field_senator_name->given ?? '';
                  $family = $senator->field_senator_name->family ?? '';
                  $senator_name = $title . ' ' . $given . ' ' . $family;
                  $senator_name = trim($senator_name);
                }
              }
            }
          }
        }
      }

      $banners[] = [
        'modifier' => $modifier,
        'image' => !empty($media_image) ? $entity_manager->getViewBuilder('media')->view($media_image, 'default') : NULL,
        'title' => $banner['#node']->getTitle(),
        'senator_name' => $senator_name,
        'cta' => [
          'url' => $url,
          'text' => $text,
          'value' => $banner['#node']->field_call_to_action->value,
        ],
      ];
    }
  }

  $variables['promotional_banners'] = $banners;
}

/**
 * Implements hook_preprocess_block_content_TYPE().
 */
function nysenate_theme_preprocess_block_content__media(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  // Remove field_title for Media Block Content
  // on all Microsite Page.
  if ($node->bundle() == 'microsite_page') {
    if ($variables['content']['field_title']) {
      $variables['content']['field_title'] = [];
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function nysenate_theme_preprocess_paragraph__promotional_banners(&$variables) {
  $variables['cta'] = [];

  $variables['cta']['text'] = $variables['content']['field_call_to_action'][0]['#markup'] ?? '';
  if (isset($variables['content']['field_link_type'][0])) {
    if ($variables['content']['field_link_type']['#items']->value == 'internal') {
      if (isset($variables['content']['field_promotional_content'][0])) {
        $variables['cta']['url'] = $variables['content']['field_promotional_content'][0]['#url']->toString();
      }
    }
    elseif ($variables['content']['field_link_type']['#items']->value == 'external') {
      if ($variables['content']['field_external_cta'][0]) {
        $variables['cta']['url'] = $variables['content']['field_external_cta'][0]['#url']->toString();
      }
    }
  }

  if ($variables['content']['field_is_2_up'][0]) {
    $variables['modifier'] = strtolower($variables['content']['field_is_2_up'][0]['#markup']) == 'on' ? 'two-up' : '';
  }
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID().
 */
function nysenate_theme_preprocess_views_view__constituent_updates(&$variables) {
  if ($variables['view']->current_display == 'constituent_all_bill_updates') {
    // Get User's District Senator.
    $current_user = \Drupal::entityTypeManager()->getStorage('user')
      ->load(\Drupal::currentUser()->id());
    $senator = UsersHelper::getSenator($current_user);

    $microsite_legislation = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'type' => 'microsite_page',
      // Legislation page.
      'field_microsite_page_type' => '200003',
      'field_senator_multiref' => $senator->id(),
    ]);

    $senator_microsite_link = '';
    if (!empty($microsite_legislation)) {
      $legislation = reset($microsite_legislation);
      $legislation_link = $legislation->toUrl()->toString();
      $senator_microsite_link = ' or <a href="/' . $legislation_link . '"> browse legislation that your Senator\'s been working on</a>';
    }

    $variables['empty'] = [
      '#markup' => '<p>No Updates to show.<br />To get updates on bills that matter to you, <a href="/legislation">search all Senate legislation</a>' . $senator_microsite_link . '.</p>',
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_views_view__senator_events(&$variables) {
  if ($variables['view']->current_display == 'senator_today_events') {
    foreach ($variables['view']->result as $node) {
      if ($node->_entity->bundle() === 'event') {
        $date = new \Datetime($node->_entity->field_date_range->value, new DateTimeZone('UTC'));
        $date->setTimezone(new DateTimeZone('America/New_York'));
        $end_date = new \Datetime($node->_entity->field_date_range->end_value, new DateTimeZone('UTC'));
        $end_date->setTimezone(new DateTimeZone('America/New_York'));
        $now = new \Datetime();
        $street_2 = $node->_entity->field_location[0]->locality . ', '
        . $node->_entity->field_location[0]->administrative_area . ' ' . $node->_entity->field_location[0]->postal_code;
        if ($date->format('d:M:Y') === $now->format('d:M:Y')) {
          $variables['items_today'][] = [
            'title' => $node->_entity->label(),
            'url' => $node->_entity->toUrl()->toString(),
            'location' => $node->_entity->field_location[0]->organization ?? '',
            'meeting_location' => $node->_entity->field_meeting_location->value ?? '',
            'street_1' => $node->_entity->field_location[0]->address_line1 ?? '',
            'street_2' => !empty($node->_entity->field_location[0]->locality) ? $street_2 : '',
            'time' => $date->format('g:i A') . ' to ' . $end_date->format('g:i A'),
          ];
          $variables['now'] = $date->format('M jS');
        }
      }
    }
  }

  if ($variables['view']->current_display == 'featured_event') {
    foreach ($variables['view']->result as $node) {
      if ($node->_entity->bundle() === 'event') {
        $date = new \Datetime($node->_entity->field_date_range->value, new DateTimeZone('UTC'));
        $date->setTimezone(new DateTimeZone('America/New_York'));
        $date_end = new \Datetime($node->_entity->field_date_range->end_value, new DateTimeZone('UTC'));
        $date_end->setTimezone(new DateTimeZone('America/New_York'));
        $street_2 = $node->_entity->field_location[0]->locality . ', '
        . $node->_entity->field_location[0]->administrative_area . ' ' . $node->_entity->field_location[0]->postal_code;
        $variables['item_featured'] = [
          'title' => $node->_entity->label(),
          'url' => $node->_entity->toUrl()->toString(),
          'day' => $date->format('d'),
          'month' => $date->format('M'),
          'year' => $date->format('Y'),
          'url_location' => 'http://maps.google.com/?q=' . $node->_entity->field_location[0]->address_line1 . '+'
          . $node->_entity->field_location[0]->administrative_area . '%2C+'
          . $node->_entity->field_location[0]->locality . '%2C+'
          . $node->_entity->field_location[0]->postal_code,
          'location' => $node->_entity->field_location[0]->organization,
          'meeting_location' => $node->_entity->field_meeting_location->value ?? '',
          'street_1' => $node->_entity->field_location[0]->address_line1,
          'street_2' => !empty($node->_entity->field_location[0]->locality) ? $street_2 : '',
          'time_start' => $date->format('g:i A'),
          'time_end' => $date_end->format('g:i A'),
        ];

        if (!empty($node->_entity->field_feature_image->getValue())) {
          $variables['item_featured']['image'] = $node->_entity->field_feature_image[0]->entity->field_image;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID().
 */
function nysenate_theme_preprocess_views_view__senator_microsite_content(&$variables) {
  $variables['attributes']['class'][] = 'newsroom-content';

  $view = $variables['view'];
  $display_id = $view->getDisplay();
  $display_id = $display_id->display['id'];
  if ($display_id == 'microsite_legislation_content') {
    $result = $view->result;

    if (!empty($result)) {
      $tid = $view->args[0];
      $filter_input = $view->exposed_raw_input;
      $filter_input = $filter_input['type'];
      $session = nysenate_current_legislative_session();

      $title = '';
      $args = [];
      $url_string = '/legislation/laws/search';
      $options = [
        'query' => [
          'searched' => 'true',
        ],
        'attributes' => [
          'class' => [
            'c-container--link',
          ],
        ],
      ];
      // Type 1 stands for Bills filter, 2 for Resolution.
      if ($filter_input == '1') {
        $title = 'View All Bills';
        $args = [
          'type' => 'f_bill',
          'bill_session_year' => $session,
          'bill_sponsor' => $tid,
        ];
      }
      elseif ($filter_input == '2') {
        $title = 'View All Resolutions';
        $args = [
          'type' => 'f_resolution',
          'resolution_session_year' => $session,
          'resolution_sponsor' => $tid,
        ];
      }
      $options['query'] = array_merge($options['query'], $args);
      $url = Url::fromUserInput($url_string, ['query' => $args]);
      // Override the More Link in views using the constructed url.
      $variables['more'] = Link::fromTextAndUrl($title, $url)->toRenderable();
      $variables['more']['#prefix'] = '<div class="more-link">';
      $variables['more']['#suffix'] = '</div>';
    }
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function nysenate_theme_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $current_path = \Drupal::service('path.current')->getPath();
  $aliased_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $media_storage = \Drupal::entityTypeManager()->getStorage('media');
  $bundle_info = \Drupal::service("entity_type.bundle.info")->getAllBundleInfo();
  // Newsroom Landing.
  if ($view->id() == 'senator_microsite_content' && $view->current_display == 'block_1') {
    $items = [];
    foreach ($view->result as $row) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = $row->_entity;
      $allowed_values = [];
      if ($node->hasField('field_category')) {
        $allowed_values = $node->field_category->getSetting('allowed_values');
      }
      $term = NULL;
      if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
        /** @var \Drupal\taxonomy\Entity\Term $term */
        $term = !empty($node->field_issues->target_id) ? $term_storage->load($node->field_issues->target_id) : NULL;
      }

      $news_image = NULL;
      if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
        $media = !empty($node->field_image_main->target_id) ? $media_storage->load($node->field_image_main->target_id) : NULL;
        if (!empty($media)) {
          $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
          if (!empty($file)) {
            $news_image = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
          }
        }
      }

      $items[] = [
        'news_title' => !empty($allowed_values) ? $allowed_values[$node->field_category->value] : $bundle_info[$node->getEntityTypeId()][$node->bundle()]['label'],
        'news_url' => $node->toUrl()->toString(),
        'news_image' => $news_image,
        'news_name' => $node->getTitle(),
        'news_topic' => [
          'url' => !empty($term) ? $term->toUrl()->toString() : '',
          'text' => !empty($term) ? $term->label() : '',
        ],
      ];
    }

    $variables['cta_url'] = $aliased_path . '/newsroom';
    $variables['items'] = $items;
  }

  // Events Landing.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_events_landing') {
    $items = [];
    foreach ($view->result as $row) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = $row->_entity;
      $start_date = NULL;
      $end_date = NULL;
      if ($node->hasField('field_date_range') && !$node->get('field_date_range')->isEmpty()) {
        $start_date = $node->get('field_date_range')->getValue()[0]['value'];
        $end_date = $node->get('field_date_range')->getValue()[0]['end_value'];
      }
      $states = \Drupal::service('address.subdivision_repository')->getList(['US']);

      $address = '';
      $location_url = '';
      $location_name = '';
      /** @var Drupal\address\Plugin\Field\FieldType\AddressItem $field_location */
      $field_location = ($node->hasField('field_location') && !$node->get('field_location')->isEmpty()) ? $node->get('field_location')->first() : '';
      if ($field_location instanceof AddressItem) {
        $location_name = $field_location->getOrganization() ?? '';

        if ($field_location->getAddressLine1()) {
          $address = $field_location->getAddressLine1() . '<br>';
        }

        if ($field_location->getLocality()) {
          $address .= $field_location->getLocality() . ', ';
        }

        if ($field_location->getAdministrativeArea()) {
          $address .= $states[$field_location->getAdministrativeArea()] . ' ';
        }

        if ($field_location->getPostalCode()) {
          $address .= $field_location->getPostalCode();
        }
      }

      if (!empty($address)) {
        $location_url = str_replace('<br>', ' ', $address);
        $location_url = 'http://maps.google.com/?q=' . urlencode($location_url);
      }

      $items[] = [
        'event_date' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'd') : '',
        'event_month' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'M') : '',
        'event_url' => $node->toUrl()->toString(),
        'event_name' => $node->getTitle(),
        'event_location_url' => $location_url,
        'event_location_name' => $location_name,
        'event_address' => $address,
        'event_time_start' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'g:i A') : '',
        'event_time_end' => !empty($end_date) ? \Drupal::service('date.formatter')->format(strtotime($end_date), '', 'g:i A') : '',
      ];

      $variables['cta_url'] = $aliased_path . '/calendar';
      $variables['items'] = $items;
    }
  }

  // Legislation Landing.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_legislation_landing') {
    $items = [];
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $allowed_values = '';
      if ($node->hasField('field_ol_last_status')) {
        $allowed_values = $node->field_ol_last_status->getSetting('allowed_values');
      }
      $published_date = '';
      if ($node->hasField('field_ol_publish_date') &&
        !$node->get('field_ol_publish_date')->isEmpty()) {
        $published_date = $node->field_ol_publish_date->value;
      }

      $last_status = '';
      if ($node->hasField('field_ol_last_status') && !$node->get('field_ol_last_status')->isEmpty()) {
        $last_status = $allowed_values[$node->field_ol_last_status->value];
      }

      $items[] = [
        'bill_number' => $node->getTitle(),
        'bill_url' => $node->toUrl()->toString(),
        'bill_description' => $node->field_ol_name->value,
        'bill_date' => !empty($published_date) ? \Drupal::service('date.formatter')->format(strtotime($published_date), '', 'F d, Y') : '',
        'bill_positions' => nysenate_bill_positions($node),
        'bill_status' => $last_status,
      ];
    }
    $variables['cta_url'] = $aliased_path . '/legislation';
    $variables['items'] = $items;
  }

  // Newsroom.
  elseif (($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_newsroom_content' ||
    $view->id() == 'committee_content' && $view->current_display == 'news' ||
    $view->id() == 'newsroom' && $view->current_display == 'all_news' ||
    $view->id() == 'newsroom' && $view->current_display == 'press_releases' ||
    $view->id() == 'committee_content' && $view->current_display == 'news_meetings' ||
    $view->id() == 'senator_microsite_content' && $view->current_display == 'article_footer' ||
    $view->id() == 'committee_meetings' && $view->current_display == 'news')) {
    $contents = [];
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $bundle = $node->bundle();
      if ($bundle == 'article' && $node->hasField('field_category')
        && !$node->get('field_category')->isEmpty()) {
        $allowed_values = $node->field_category->getSetting('allowed_values');
        $bundle = $allowed_values[$node->field_category->value];
      }

      $issues = [];
      if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
        if ($node->field_issues->target_id) {
          /** @var \Drupal\taxonomy\Entity\Term $term */
          $term = $term_storage->load($node->field_issues->target_id);
          if ($term instanceof TermInterface) {
            $issues[] = [
              'name' => $term->label(),
              'url' => $term->toUrl()->toString(),
            ];
          }
        }
      }

      $image_main = NULL;
      if (isset($node->field_image_main) && !empty($node->field_image_main->target_id)) {
        $media = $media_storage->load($node->field_image_main->target_id);
        if ($media) {
          $file = File::load($media->field_image->target_id);
          $image_main = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
        }
      }
      elseif ($node->bundle() === 'video') {
        $video_id = $node->field_yt->target_id;
        $video = $video_id ? $media_storage->load($video_id) : NULL;
        if ($video) {
          $video->enforceMetadataUpdate();
          $media_storage->save($video);
          $image_file = File::load($video->thumbnail->target_id);
          $image_uri = $image_file->uri->value;
          $image_main = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
        }
      }

      if ($view->id() == 'committee_meetings' && $view->current_display == 'news') {
        $image_main = NULL;
      }

      $contents[] = [
        'title' => ucwords(strtolower(str_replace('_', ' ', $bundle))),
        'topics' => $issues,
        'description' => [
          'text' => $node->label(),
          'url' => $node->toUrl()->toString(),
        ],
        'date' => $node->field_date->value ? \Drupal::service('date.formatter')->format(strtotime($node->field_date->value), '', 'F j, Y') : NULL,
        'img_src' => $image_main,
      ];
    }

    $variables['contents'] = $contents;

    if ($view->current_display == 'microsite_newsroom_content' && $view->exposed_raw_input['type_1']) {
      $pagination_link_text = 'News';
      if ($view->exposed_raw_input['type_1'] == '2') {
        $pagination_link_text = 'Videos';
      }
      $variables['panel']['pagination_link_text'] = $pagination_link_text;
    }
  }

  // Legislation.
  elseif ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_legislation_content') {
    $contents = [];
    $bill = [];
    foreach ($view->result as $row) {
      $node = $row->_entity;
      $bundle = $node->bundle();

      // Published date.
      $date = '';
      if ($node->hasField('field_ol_publish_date') && !$node->get('field_ol_publish_date')->isEmpty()) {
        $date = \Drupal::service('date.formatter')->format(strtotime($node->field_ol_publish_date->value), '', 'F d, Y');
      }

      // Last status.
      $last_status = '';
      if (!empty($node->field_ol_last_status)) {
        $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
        $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';
      }

      $bill = [
        'featured' => FALSE,
        'small' => TRUE,
        'is_poll' => FALSE,
        'resolution' => FALSE,
        'link' => $node->toUrl()->toString(),
        'number' => $node->getTitle(),
        'description_position' => 'top',
        'description' => !empty($node->field_ol_name->value) ? $node->field_ol_name->value : '',
        'date' => $date,
        'update_location' => $last_status,
        'positions' => nysenate_bill_positions($node),
      ];

      $contents[] = [
        'bill' => $bill,
      ];
    }

    $variables['contents'] = $contents;
  }

  // Featured issue EVA.
  if ($view->id() == 'featured_issue' && $view->current_display == 'featured_issue') {
    $results = $view->result;
    if (!empty($results)) {
      $issues = [];
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('media');
      $featured_issue = $term_storage->load($view->args[0]);

      foreach ($results as $row) {
        $node = $row->_entity;

        $image = NULL;
        if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
          $image = $media_storage->load($node->field_image_main->target_id);
          $image = $view_builder->view($image, 'default');
        }

        $issues[] = [
          'thumb_image' => $image,
          'link' => $node->toUrl()->toString(),
          'title' => $node->label(),
        ];
      }

      $variables['featured_issue_link'] = $featured_issue->toUrl()->toString();
      $variables['featured_issue_name'] = $featured_issue->label();

      // Set the first element as the main issue.
      $main_issue = array_shift($issues);
      $variables['main_issue'] = [
        'large_image' => $main_issue['thumb_image'],
        'link' => $main_issue['link'],
        'title' => $main_issue['title'],
      ];

      $variables['issues'] = $issues;
    }
  }

  if ($view->id() == 'news_by_issue' && $view->current_display == 'petition') {
    $results = $view->result;
    if (!empty($results)) {
      $petitions = [];
      foreach ($results as $row) {
        $node = $row->_entity;
        $senator_name = '';
        if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
          $senator = $node->field_senator_multiref->entity;
          $senator_name = $senator->getName();
        }

        $petitions[] = [
          'title' => $node->getTitle(),
          'senator_name' => $senator_name,
          'cta' => [
            'url' => $node->toUrl()->toString(),
            'text' => 'Review the Petition',
            'value' => 'petition',
          ],
        ];
      }

      $variables['title'] = 'Petitions Related to this Issue';
      $variables['petitions'] = $petitions;
    }
  }

  // Committee Meetings.
  if ($view->id() == 'committee_meetings') {
    if ($view->current_display == 'past') {
      $results = $view->result;
      if (!empty($results)) {
        $meetings = [];
        foreach ($results as $row) {
          $node = $row->_entity;

          $issues = [];
          if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
            $node->field_issues->entity;
            foreach ($node->field_issues as $value) {
              $term = $value->entity;
              $issues[] = [
                'name' => $term->getName(),
                'url' => $term->toUrl()->toString(),
              ];
            }
          }

          $event_online_link = '';
          if ($node->hasField('field_event_online_link') && !$node->get('field_event_online_link')->isEmpty()) {
            $event_online_link = Url::fromUri($node->field_event_online_link[0]->uri)->toString();
          }

          $meeting_location = '';
          if ($node->hasField('field_meeting_location') && !$node->get('field_meeting_location')->isEmpty()) {
            $meeting_location = $node->field_meeting_location->value;
          }

          $start_date = NULL;
          $end_date = NULL;
          if ($node->hasField('field_date_range') && !$node->get('field_date_range')->isEmpty()) {
            $start_date = $node->get('field_date_range')->getValue()[0]['value'];
            $end_date = $node->get('field_date_range')->getValue()[0]['end_value'];
          }

          $meetings[] = [
            'title' => $node->getTitle(),
            'cta' => [
              'url' => $node->toUrl()->toString(),
            ],
            'issues' => $issues,
            'event_online_link' => $event_online_link,
            'meeting_location' => $meeting_location,
            'event_date' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'd') : '',
            'event_month' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'M') : '',
            'event_time_start' => !empty($start_date) ? \Drupal::service('date.formatter')->format(strtotime($start_date), '', 'g:i A') : '',
            'event_time_end' => !empty($end_date) ? \Drupal::service('date.formatter')->format(strtotime($end_date), '', 'g:i A') : '',
          ];
        }

        $variables['past_meetings'] = $meetings;
      }
    }
    elseif ($view->current_display == 'committee') {
      $results = $view->result;
      if (!empty($results)) {
        $committees = [];
        foreach ($results as $row) {
          $node = $row->_entity;
          if ($node->hasField('field_committee') && !empty($node->field_committee->getValue())) {
            $field_committee = $node->field_committee[0]->target_id;
            /** @var \Drupal\taxonomy\Entity\Term $committee */
            $committee = !empty($field_committee) ? $term_storage->load($field_committee) : NULL;
            $committee_type = $committee->field_committee_types->value;
            $types = $committee->field_committee_types->getSetting('allowed_values');

            $committees[] = [
              'url' => $committee->toUrl()->toString(),
              'title' => $committee->label(),
              'type' => $types[$committee_type],
            ];
          }
        }

        $variables['committees'] = $committees;
      }
    }
  }

  // Student Program News Main.
  if ($view->id() == 'student_programs_news' && $view->current_display == 'main') {
    $results = $view->result;

    $news = [];
    foreach ($variables['rows'] as $row) {
      $node = $row['content']['#row']->_entity;

      $image = NULL;
      if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
        $media = !empty($node->field_image_main->target_id) ? $media_storage->load($node->field_image_main->target_id) : NULL;
        if (!empty($media)) {
          $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
          if (!empty($file)) {
            $image = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
          }
        }
      }

      $date = '';
      if ($node->hasField('field_date') && !$node->get('field_date')->isEmpty()) {
        $field_date = $node->field_date->value;
        $date = \Drupal::service('date.formatter')->format(strtotime($field_date), '', 'F j, Y');
      }

      $news[] = [
        'title' => $node->getTitle(),
        'url' => $node->toUrl()->toString(),
        'image_src' => $image,
        'date' => $date,
        'type' => $row['content']['#view']->field['type']->last_render,
      ];
    }

    $variables['news'] = $news;

  }

  // Search Global page.
  if ($view->id() == 'core_search' && $view->current_display == 'page_search') {
    $entity_type_manager = \Drupal::entityTypeManager();
    $results = $view->result;
    $search_result = [];
    foreach ($results as $item) {
      if (isset($item->_entity)) {
        $entity = $item->_entity;
        $bundle = $entity->bundle();
        $type = '';
        $title = '';
        if ($entity instanceof NodeInterface) {
          $type = $entity_type_manager->getStorage('node_type')->load($bundle);
          $title = $entity->label();
        }
        elseif ($entity instanceof TermInterface) {
          $type = $entity_type_manager->getStorage('taxonomy_vocabulary')->load($bundle);
          $title = $entity->getName();
        }

        if ($type instanceof EntityInterface) {
          $topics = [];
          $date = '';
          $senator_multiref = [];

          if ($entity->hasField('field_issues') && !$entity->field_issues->isEmpty()) {
            $issues = $entity->field_issues->getValue();
            foreach ($issues as $issue) {
              $term = Term::load($issue['target_id']);
              if (!empty($term)) {
                $topics[] = [
                  'name' => $term->label(),
                  'url' => $term->toUrl(),
                ];
              }
            }
          }
          if ($entity->hasField('field_date') && !$entity->field_date->isEmpty()) {
            $date = $entity->field_date->first()->value;
            $date = \Drupal::service('date.formatter')->format(strtotime($date), '', 'F j, Y');
          }

          if ($entity->hasField('field_senator_multiref') && !$entity->field_senator_multiref->isEmpty()) {
            $senator_list = $entity->field_senator_multiref->getValue();
            foreach ($senator_list as $senator) {
              $term = Term::load($senator['target_id']);
              $senator_multiref = [
                'text' => $term->label(),
                'url' => $term->toUrl(),
                'type' => 'Senator ',
              ];
            }
          }

          $search_result[] = [
            'title' => $type->label(),
            'topics' => $topics,
            'description' => [
              'text' => $title,
              'url' => $entity->toUrl(),
            ],
            'date' => $date,
            'issue_type' => $senator_multiref,
          ];
        }
      }
    }
    $variables['search_result'] = $search_result;
  }
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID__DISPLAY_ID().
 */
function nysenate_theme_preprocess_views_view__explore_issues_tabs__constituents_issues_followed(&$variables) {
  $variables['card_list_title'] = "Issues You're Following";
  $variables['explore_link'] = [
    'text' => 'Explore all issues',
    'url' => '/explore-issues',
  ];
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID__DISPLAY_ID().
 */
function nysenate_theme_preprocess_views_view__news_by_issue__news(&$variables) {
  $args = $variables['view']->args;
  $term = Term::load($args[0]);
  $name = $term->name->value;
  $url = Url::fromUserInput('/search/global/' . $name, ['attributes' => ['class' => 'c-tab--link-more']]);
  $link = Link::fromTextAndUrl('See All News About ' . $name, $url)->toString();
  $variables['footer'] = [
    '#markup' => '<p>' . $link . '</p>',
  ];
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID__DISPLAY_ID().
 */
function nysenate_theme_preprocess_views_view__senator_and_committee_lists__senators_list(&$variables) {
  // Remove filter label.
  $variables['exposed']['senator_committee_filter']['#title_display'] = 'visually_hidden';
  $variables['exposed']['field_party_value']['#title_display'] = 'visually_hidden';
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID__DISPLAY_ID().
 */
function nysenate_theme_preprocess_views_view__senator_and_committee_lists__committee_list(&$variables) {
  $view = $variables['view'];

  $variables['committee']['title'] = $view->header['area_text_custom']->options['content'];

  $groups = [];
  foreach ($variables['rows'] as $row) {
    $committees = [];
    $title = '';

    foreach ($row['#rows'] as $key => $result) {
      $term = $result['#row']->_entity;
      $committee_type = $term->field_committee_types->value;
      $types = $term->field_committee_types->getSetting('allowed_values');
      $title = $types[$committee_type];

      $committees[] = [
        'url' => $term->toUrl()->toString(),
        'title' => $term->name[0]->value,
      ];
    }

    $groups[] = [
      'title' => $title,
      'committees' => $committees,
    ];
  }
  $variables['committee']['groups'] = $groups;
}

/**
 * Implements hook_preprocess_views_view__VIEW_ID__DISPLAY_ID().
 */
function nysenate_theme_preprocess_views_view__student_programs_news__main(&$variables) {
  $view = $variables['view'];
  $variables['title'] = $view->getTitle();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function nysenate_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'node') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $current_path = \Drupal::service('path.current')->getPath();
    $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

    if ($path_alias == '/senators-committees') {
      $suggestions[] = $hook . '__' . $node->bundle() . '__senators_committees';
      $suggestions[] = $hook . '__' . $node->bundle() . '__senators_committees__' . $variables['elements']['#view_mode'];
    }
  }

  if ($hook == 'views_view_fields') {
    $view = $variables['view'];
    $display_id = $view->getDisplay();
    $display_id = $display_id->display['id'];
    $suggestions[] = $hook . '__' . $view->id() . '__' . $display_id;
  }

  if ($hook == 'container' && !empty($variables['element']['submit']['#id'])) {
    $suggestions[] = $hook . '__' . strtr($variables['element']['submit']['#id'], '-', '_');
  }

  // Add suggestion to views_view hook.
  if ($hook == 'views_view') {
    $view = $variables['view'];
    $suggestions[] = $hook . '__' . $view->id();
    $suggestions[] = $hook . '__' . $view->id() . '__' . $view->current_display;
  }

  // Add suggestion to views_view_table hook.
  if ($hook == 'views_view_table') {
    $view = $variables['view'];
    $suggestions[] = $hook . '__' . $view->id();
    $suggestions[] = $hook . '__' . $view->id() . '__' . $view->current_display;
  }

  // Add suggestion to views_view_unformatted hook.
  if ($hook == 'views_view_unformatted') {
    $view = $variables['view'];
    $suggestions[] = $hook . '__' . $view->id() . '__' . $view->current_display;
  }

  // Add suggestions to semanticviews_style hook.
  if ($hook == 'semanticviews_style') {
    $view = $variables['view'];
    $suggestions[] = $hook . '__' . $view->id();
    $suggestions[] = $hook . '__' . $view->id() . '__' . $view->current_display;
  }

  // Add suggestion to form hook.
  if ($hook == 'form' && !empty($variables['element']['#theme'])) {
    $suggestions[] = 'form__' . $variables['element']['#theme'][0];
  }

  // Add suggestion to details hook.
  if ($hook == 'details' && !empty($variables['element']['#parents'])) {
    $suggestions[] = $hook . '__' . $variables['element']['#parents'][0];
  }

  // Add suggestion to private_message_inbox form hook.
  if ($hook == 'form' && !empty($variables['element']['#form_id'])) {
    $current_user = \Drupal::entityTypeManager()->getStorage('user')
      ->load(\Drupal::currentUser()->id());

    $senator_message_form_ids = [];
    $senator_sent_form_ids = [];
    if ($current_user->hasField('field_senator_management') && !$current_user->get('field_senator_management')->isEmpty()) {
      foreach ($current_user->field_senator_management as $senator_management) {
        $senator = $senator_management->entity;
        $senator_message_form_ids[] = 'views_form_private_message_inbox_inbox_' . $senator->field_user_account->target_id;
        $senator_sent_form_ids[] = 'views_form_private_message_inbox_sent_' . $senator->field_user_account->target_id;
      }
    }

    if ($variables['element']['#form_id'] == 'views_form_private_message_inbox_inbox_' . \Drupal::currentUser()->id() ||
      (!empty($senator_message_form_ids) && in_array($variables['element']['#form_id'], $senator_message_form_ids))) {
      $suggestions[] = 'form__views_form_private_message_inbox__list';
    }

    if ($variables['element']['#form_id'] == 'views_form_private_message_inbox_sent_' . \Drupal::currentUser()->id() ||
      (!empty($senator_message_form_ids) && in_array($variables['element']['#form_id'], $senator_message_form_ids))) {
      $suggestions[] = 'form__views_form_private_message_sent__list';
    }
  }

  // Add suggestion to form_element hook.
  if ($hook == 'form_element' && !empty($variables['element']['#name'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#name'];
  }

  // Add suggestion to views_exposed_form hook.
  if ($hook == 'views_exposed_form' && !empty($variables['form']['#theme'])) {
    $suggestions[] = $variables['form']['#theme'][0];
  }
}

/**
 * Implements hook_theme_suggestions_TYPE_alter().
 */
function nysenate_theme_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables, $hook) {
  $term = $variables['elements']['#taxonomy_term'];
  $suggestions[] = $hook . '__' . $term->bundle() . '__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_form_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = $hook . '__' . $variables['element']['#form_id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && is_object($node) && $node->bundle() == 'microsite_page') {
    $suggestions[] = $hook . '__node__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables, $hook) {
  $view = $variables['view'];
  $view_id = $view->id();

  // Add theme hook suggestions for taxonomy_term page.
  if ($view_id == 'taxonomy_term') {
    if (isset($view->args) && !empty($view->args)) {
      $tid = $view->args[0];
      $term = Term::load($tid);

      // Override the issues bundle.
      if (!empty($term) && $term->bundle() == 'issues') {
        $suggestions[] = $hook . '__' . $view_id . '__' . $term->bundle();
      }
    }
  }

  // Add theme hook suggestions for Microsite content.
  if ($view_id == 'senator_microsite_content') {
    $display_id = $view->getDisplay();
    $display_id = $display_id->display['id'];
    $suggestions[] = $hook . '__' . $view_id . '__' . $display_id;
  }

  // Add theme hook suggestions for News by Issue.
  if ($view_id == 'news_by_issue') {
    $display_id = $view->getDisplay();
    $display_id = $display_id->display['id'];
    $suggestions[] = $hook . '__' . $view_id . '__' . $display_id;
  }

  // Add theme hook suggestions for News by Issue.
  if ($view_id == 'committee_meetings') {
    $display_id = $view->getDisplay();
    $display_id = $display_id->display['id'];
    $suggestions[] = $hook . '__' . $view_id . '__' . $display_id;
  }

  // Add theme hook suggestions for Senators and Committees List.
  if ($view_id == 'senator_and_committee_lists') {
    $display_id = $view->getDisplay();
    $display_id = $display_id->display['id'];
    $suggestions[] = $hook . '__' . $view_id . '__' . $display_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nysenate_theme_theme_suggestions_semanticviews_row_alter(array &$suggestions, array $variables, $hook) {
  $view = $variables['view'];
  $display_id = $view->getDisplay();
  $display_id = $display_id->display['id'];
  $suggestions[] = $hook . '__' . $view->id();
  $suggestions[] = $hook . '__' . $view->id() . '__' . $display_id;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__committee_content__news(&$variables) {
  $node = $variables['row']->_entity;

  if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
    $media = \Drupal::entityTypeManager()->getStorage('media')->load($node->field_image_main->target_id);
    if (!empty($media)) {
      $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
      if (!empty($file)) {
        $variables['img_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__constituent_updates(&$variables) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $node = $variables['row']->_entity;

  if (in_array($node->bundle(), ['bill', 'resolution'])) {
    $variables['article']['title'] = $node->type->entity->label() . ' ' . $node->title->value;
    $variables['article']['description'] = [
      'url' => $node->toUrl()->toString(),
      'text' => $node->field_ol_name->value,
    ];
    $variables['article']['issue_type']['text'] = ($node->field_ol_name->value . ' ' ?? '') . 'Committee';
  }
  // If other content type...
  else {
    // Retrieve the article category if Article content type.
    if ($node->bundle() == 'article') {
      if ($node->hasField('field_category') && !$node->get('field_category')->isEmpty()) {
        $allowed_values = $node->field_category->getSetting('allowed_values');
        $variables['article']['title'] = ucwords($allowed_values[$node->field_category->value]);
      }
    }
    else {
      $variables['article']['title'] = $node->type->entity->label();

      $committee = NULL;
      if ($node->hasField('field_committee') && !empty($node->field_committee->getValue())) {
        $field_committee = $node->field_committee[0]->target_id;
        $committee = !empty($field_committee) ? $term_storage->load($field_committee) : NULL;
        $variables['article']['issue_type'] = [
          'text' => $committee->getName(),
          'url' => $committee->toUrl()->toString(),
          'type' => 'In ',
        ];
      }
    }

    $variables['article']['description'] = [
      'url' => $node->toUrl()->toString(),
      'text' => $node->getTitle(),
    ];
  }

  $issues = [];
  if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
    $node->field_issues->entity;
    foreach ($node->field_issues as $value) {
      $term = $value->entity;
      if ($term) {
        $issues[] = [
          'name' => $term->getName(),
          'url' => $term->toUrl()->toString(),
        ];
      }
    }
    $variables['article']['topics'] = $issues;
  }

  if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
    $media = \Drupal::entityTypeManager()->getStorage('media')->load($node->field_image_main->target_id);
    if (!empty($media)) {
      $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
      if (!empty($file)) {
        $variables['article']['img_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
      }
    }
  }

  if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
    $senator = $node->get('field_senator_multiref')->first()->entity;
    $variables['article']['author'] = [
      'name' => $senator->name->value,
      'url' => $senator->toUrl()->toString(),
    ];
  }

  if ($node->hasField('field_date') && !$node->get('field_date')->isEmpty()) {
    $field_date = $node->field_date->value;
    $variables['article']['date'] = \Drupal::service('date.formatter')->format(strtotime($field_date), '', 'F j, Y');
    $bundles = [
      'event',
      'meeting',
      'session',
      'public_hearing',
    ];
    if (in_array($node->bundle(), $bundles)) {
      $variables['article']['time'] = \Drupal::service('date.formatter')->format(strtotime($field_date), '', 'g:i a');
    }
  }
  elseif ($node->hasField('field_ol_publish_date') && !$node->get('field_ol_publish_date')->isEmpty()) {
    $field_ol_publish_date = $node->field_ol_publish_date->value;
    $variables['article']['date'] = \Drupal::service('date.formatter')->format(strtotime($field_ol_publish_date), '', 'F j, Y');
  }

  if ($node->hasField('field_meeting_location') && !$node->get('field_meeting_location')->isEmpty()) {
    $variables['article']['location'] = $node->field_meeting_location->value;
  }
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__news(&$variables) {
  $node = $variables['row']->_entity;

  // Retrieve the article category if Article content type.
  if ($node->bundle() == 'article') {
    if ($node->hasField('field_category') && !$node->get('field_category')->isEmpty()) {
      $allowed_values = $node->field_category->getSetting('allowed_values');
      $variables['title'] = $allowed_values[$node->field_category->value];
    }
  }
  // If other content type...
  else {
    $variables['title'] = $node->type->entity->label();
  }

  if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
    $node->field_issues->entity;
    $issues = [];
    foreach ($node->field_issues as $value) {
      $term = $value->entity;
      $issues[] = [
        'name' => $term->getName(),
        'url' => $term->toUrl()->toString(),
      ];
    }
    $variables['issues'] = $issues;
  }

  if ($node->hasField('field_image_main') && !$node->get('field_image_main')->isEmpty()) {
    $media = \Drupal::entityTypeManager()->getStorage('media')->load($node->field_image_main->target_id);
    if (!empty($media)) {
      $file = !empty($media->field_image->target_id) ? File::load($media->field_image->target_id) : NULL;
      if (!empty($file)) {
        $variables['img_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
      }
    }
  }

  if ($node->hasField('field_date') && !$node->get('field_date')->isEmpty()) {
    $field_date = $node->field_date->value;
    $variables['date'] = \Drupal::service('date.formatter')->format(strtotime($field_date), '', 'F j, Y');
  }

  if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
    $senator = $node->get('field_senator_multiref')->first()->entity;
    $variables['senator'] = [
      'name' => $senator->name->value,
      'url' => $senator->toUrl()->toString(),
    ];
  }

  $variables['description'] = [
    'url' => $node->toUrl()->toString(),
    'text' => $node->getTitle(),
  ];
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__news_by_bill(&$variables) {
  $node = $variables['row']->_entity;
  $bill = [
    'featured' => FALSE,
    'small' => TRUE,
    'is_poll' => FALSE,
    'resolution' => FALSE,
    'link' => $node->toUrl()->toString(),
    'number' => $node->getTitle(),
    'description_position' => 'top',
  ];

  if ($node->hasField('field_ol_name') && !$node->get('field_ol_name')->isEmpty()) {
    $bill['description'] = $node->field_ol_name->value;
  }

  if ($node->hasField('field_ol_last_status_date') && !$node->get('field_ol_last_status_date')->isEmpty()) {
    $last_status_date = $node->field_ol_last_status_date->value;
    $bill['date'] = \Drupal::service('date.formatter')->format(strtotime($last_status_date), '', 'F j, Y');
  }

  if ($node->hasField('field_ol_last_status') && !$node->get('field_ol_last_status')->isEmpty()) {
    $allowed_values = $node->get('field_ol_last_status')->getSetting('allowed_values');
    $bill['update_location'] = $allowed_values[$node->field_ol_last_status->value];
  }

  if ($node->hasField('field_ol_all_statuses') && !$node->get('field_ol_all_statuses')->isEmpty()) {
    $bill['positions'] = nysenate_bill_positions($node);
  }

  if ($node->hasField('field_ol_sponsor') && !$node->get('field_ol_sponsor')->isEmpty()) {
    $sponsor = $node->field_ol_sponsor->entity;
    $bill['ol_sponsor'] = [
      'text' => $sponsor->getName(),
      'url' => $sponsor->toUrl()->toString(),
    ];
  }

  $variables['bill'] = $bill;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__meeting_by_issue(&$variables) {
  $node = $variables['row']->_entity;

  if ($node->hasField('field_date_range') && !$node->get('field_date_range')->isEmpty()) {
    $variables['date'] = \Drupal::service('date.formatter')->format(strtotime($node->field_date_range->value), '', 'd');
    $variables['month'] = \Drupal::service('date.formatter')->format(strtotime($node->field_date_range->value), '', 'M');
  }

  $address = '';
  if ($node->hasField('field_location') && !$node->get('field_location')->isEmpty()) {
    if (isset($node->field_location[0]->address_line1) && !empty($node->field_location[0]->address_line1)) {
      $address = $node->field_location[0]->address_line1;
    }

    if (isset($node->field_location[0]->locality) && !empty($node->field_location[0]->locality)) {
      $address .= $node->field_location[0]->locality . ', ';
    }

    if (isset($node->field_location[0]->administrative_area) && !empty($node->field_location[0]->administrative_area)) {
      $address .= $node->field_location[0]->administrative_area . ', ';
    }

    if (isset($node->field_location[0]->postal_code) && !empty($node->field_location[0]->postal_code)) {
      $address .= $node->field_location[0]->postal_code . ', ';
    }

    if (!empty($address)) {
      $variables['location']['link'] = 'http://maps.google.com/?q=' . urlencode($address);
    }
  }

  if ($node->hasField('field_meeting_location') && !$node->get('field_meeting_location')->isEmpty()) {
    $variables['location']['name'] = $node->field_meeting_location->value;
  }

  $variables['event_name'] = $node->getTitle();
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_row__news_by_issue__video(&$variables) {
  $view = $variables['view'];
  $tid = $view->args[0];
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->load($tid);

  if (!empty($term) && is_object($term)) {
    $variables['title'] = t('Latest %term_name Video', ['%term_name' => $term->name->value]);
  }
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_style__constituent_bills(&$variables) {
  $bills = [];
  foreach ($variables['rows'] as $row) {
    $node = $row['content']['#row']->_entity;

    // Last status.
    $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
    $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';

    // Published Date.
    $published_date = '';
    if ($node->hasField('field_ol_publish_date') &&
      !$node->get('field_ol_publish_date')->isEmpty()) {
      $published_date = $node->field_ol_publish_date->value;
    }
    // If published_date is not timestamp, use strtotime().
    if (!empty($published_date) && strpos($published_date, 'T') !== FALSE) {
      $published_date = strtotime($published_date);
    }

    // Issues.
    $issues = [];
    if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
      foreach ($node->field_issues as $issue) {
        $url = Link::fromTextAndUrl($issue->entity->getName(), $issue->entity->toUrl());
        $issues[] = $url;
      }
    }

    // Sponsor.
    $sponsor_name = NULL;
    $sponsor = NULL;
    if ($node->hasField('field_ol_sponsor') && !empty($node->field_ol_sponsor->target_id)) {
      $sponsor = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($node->field_ol_sponsor->target_id);
    }

    if (!empty($sponsor)) {
      $given = $sponsor->field_senator_name->given ?? '';
      $family = $sponsor->field_senator_name->family ?? '';
      $sponsor_name = $given . ' ' . $family;
      $sponsor_name = Link::fromTextAndUrl($sponsor_name, $sponsor->toURL());
    }

    $bills[] = [
      'featured' => TRUE,
      'small' => FALSE,
      'is_poll' => TRUE,
      'resolution' => TRUE,
      'link' => $node->toUrl()->toString(),
      'number' => $node->getTitle(),
      'description_position' => 'top',
      'description' => !empty($node->field_ol_name->value) ? $node->field_ol_name->value : '',
      'date' => !empty($published_date) ? \Drupal::service('date.formatter')->format($published_date, '', 'F d, Y') : '',
      'update_location' => $last_status,
      'positions' => nysenate_bill_positions($node),
      'issues' => $issues,
      'sponsor' => $sponsor_name,
      'sponsor_text' => 'SPONSORS',
    ];
  }

  $variables['bills'] = $bills;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_style__constituent_committees_following(&$variables) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $flag_link_service = \Drupal::service('flag.link_builder');

  $committees = [];
  foreach ($variables['rows'] as $row) {
    $term = $row['content']['#row']->_entity;
    $flag_link = $flag_link_service->build($term->getEntityTypeId(), $term->id(), 'follow_committee');

    $committees[] = [
      'committee_link' => [
        'text' => $term->label(),
        'url' => $term->toUrl()->toString(),
      ],
      'committee_id' => $term->id(),
      'flag_follow_committee' => $flag_link,
    ];
  }

  $variables['committees'] = $committees;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_style__constituent_petitions_and_questionnaires(&$variables) {
  $current_display = $variables['view']->current_display;

  $petitions = [];
  foreach ($variables['rows'] as $row) {
    $node = $row['content']['#row']->_entity;
    $url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();

    $issues = [];
    $tids = [];
    if ($node->hasField('field_issues') && !$node->get('field_issues')->isEmpty()) {
      $node->field_issues->entity;
      foreach ($node->field_issues as $key => $value) {
        $term = $value->entity;

        $issues[] = [
          'name' => $term->getName(),
          'url' => $term->toUrl()->toString(),
        ];
        $tids[] = '&f[' . ($key + 1) . ']=im_field_issues%3A' . $term->id();
      }
    }

    if ($current_display == 'constituent_petitions_signed') {
      $explore_link = $tids ? '/search/global/?f[0]=bundle%3Apetition' . implode('', $tids) : '';

      $start_date = $row['content']['#row']->flagging_node_field_data_created;
      $timestamp = \Drupal::service('date.formatter')->format(
        $start_date, 'custom', 'F d, Y'
      );
    }
    else {
      $explore_link = $tids ? '/search/global/?f[0]=bundle%questionnaire' . implode('', $tids) : '';

      $start_date = $row['content']['#row']->field_timestamp;
      $timestamp = \Drupal::service('date.formatter')->format(
        $start_date, 'custom', 'F d, Y'
      );
    }

    $author = [];
    if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
      $senator = $node->get('field_senator_multiref')->first()->entity;
      $author = [
        'name' => $senator->name->value,
        'url' => $senator->toUrl()->toString(),
      ];
    }

    $petition_is_active = 0;
    $date = new DrupalDateTime();
    $date->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
    $date = $date->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

    $start_time = NULL;
    $end_time = NULL;
    if ($node->hasField('field_date') && !$node->get('field_date')->isEmpty()) {
      $start_time = $node->field_date->value;
    }
    if ($node->hasField('field_expiration_date') && !$node->get('field_expiration_date')->isEmpty()) {
      $end_time = $node->field_expiration_date->value;
    }
    if ((($start_time < $date && $end_time > $date) ||
      ($start_time < $date && is_null($end_time)) ||
      ($start_time == $end_time)) && $node->status->value == 1) {
      $petition_is_active = 1;
    }

    $petitions[] = [
      'title' => $node->getTitle(),
      'url' => $node->toUrl()->toString(),
      'issues' => $issues,
      'author' => $author,
      'timestamp' => $timestamp,
      'petition_is_active' => $petition_is_active,
      'fb_url' => 'https://www.facebook.com/sharer/sharer.php?u=' . $url,
      'twitter_url' => 'http://twitter.com/share?url=' . $url . '&text=' . $node->getTitle(),
      'explore_link' => $explore_link,
    ];
  }

  $variables['current_display'] = $current_display;
  $variables['petitions'] = $petitions;
}

/**
 * Implements hook_preprocess_HOOK__VIEW_ID__DISPLAYID().
 */
function nysenate_theme_preprocess_semanticviews_style__explore_issues_tabs__constituents_issues_followed(&$variables) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $flag_link_service = \Drupal::service('flag.link_builder');

  $issue_cards = [];
  foreach ($variables['rows'] as $row) {
    $term = $row['content']['#row']->_entity;
    $flag_link = $flag_link_service->build($term->getEntityTypeId(), $term->id(), 'follow_issue');

    $issue_cards[] = [
      'issue_link' => [
        'text' => $term->label(),
        'url' => $term->toUrl()->toString(),
      ],
      'issue_id' => $term->id(),
      'flag_follow_issue' => $flag_link,
    ];
  }

  $variables['issue_cards'] = $issue_cards;
}

/**
 * Implements hook_preprocess_page__node__TYPE().
 */
function nysenate_theme_preprocess_page__node__microsite_page(&$variables) {
  $node = $variables['node'];

  if ($node->hasField('field_block') && !$node->get('field_block')->isEmpty()) {
    $block_types = [
      'microsite_hero',
      'senator_microsite_menu',
    ];
    foreach ($node->get('field_block') as $key => $value) {
      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
      $block_content = $value->entity;

      if ($block_content instanceof BlockContent) {
        // Alter the field_block contents to be displayed.
        if (in_array($block_content->bundle(), $block_types)) {
          if ($block_content->bundle() == 'microsite_hero') {
            $variables['microsite_hero'] = \Drupal::entityTypeManager()
              ->getViewBuilder('block_content')
              ->view($block_content);
          }
          elseif ($block_content->bundle() == 'senator_microsite_menu') {
            $variables['microsite_menu'] = \Drupal::entityTypeManager()
              ->getViewBuilder('block_content')
              ->view($block_content);
          }

          // Set both microsite blocks to empty array
          // to prevent from rendering in the display.
          $node->get('field_block')[$key] = [];
        }
      }
    }
  }

  if ($node->hasField('field_microsite_page_type') && !$node->get('field_microsite_page_type')->isEmpty()) {
    $term = $node->field_microsite_page_type->entity ?? [];
    if ($term instanceof TermInterface) {
      $name = $term->name->value ?? '';

      // Display only the form block if the page type is message.
      if ($name == 'Message') {
        $block_manager = \Drupal::service('plugin.manager.block');
        $plugin_block = $block_manager->createInstance('nys_messaging_senator_message_form_block');
        $variables['message_senator'] = $plugin_block->build();
      }

    }
  }

  if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
    $tid = $node->get('field_senator_multiref')->first()->getString() ?? '';
    $senator = NULL;
    if (!empty($tid)) {
      $senator = Term::load($tid);
      $variables['is_active'] = $senator->field_active_senator->value == 1 ? TRUE : FALSE;
    }
  }

  if ($node->hasField('field_microsite_page_type') && !$node->get('field_microsite_page_type')->isEmpty()) {
    $term = $node->field_microsite_page_type->entity ?? [];
    if ($term instanceof TermInterface) {
      $name = $term->name->value ?? '';
      $micrositeType = [
        'Landing',
        'Inactive',
      ];
      $variables['is_senator_landing'] = in_array($name, $micrositeType) ? TRUE : FALSE;
    }
  }

  // Override the main content.
  // Display the microsite node with altered contents.
  $variables['page']['content']['system_main'] = \Drupal::entityTypeManager()->getViewBuilder('node')
    ->view($node, 'full');
}

/**
 * Implements hook_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__senator__agenda_senator_sponsors(&$variables) {
  $term = $variables['term'];
  $variables['district'] = get_senator_district($term->id());
}

/**
 * Implements hook_theme_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__senator__sponsor_list(&$variables) {
  $term = $variables['term'];
  $district = get_senator_district($term->id());
  $party = $term->field_party->getValue();
  $parties = implode(', ', array_map(function ($item) {
    return $item['value'];
  }, $party));
  $variables['party'] = t('@party <span>@district Senate District</span>',
    [
      '@party' => $parties ? '(' . $parties . ')' : '',
      '@district' => $district,
    ]
  );
}

/**
 * Implements hook_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__senator__senators_involved(&$variables) {
  $term = $variables['term'];
  $variables['district'] = get_senator_district($term->id());
}

/**
 * Implements hook_preprocess_taxonomy_term__TAXONOMY().
 */
function nysenate_theme_preprocess_taxonomy_term__issues(&$variables) {
  $user = \Drupal::entityTypeManager()->getStorage('user')
    ->load(\Drupal::currentUser()->id());

  $senator_name = '';
  $senator_image = NULL;
  if ($user->hasField('field_senator_multiref') && !$user->get('field_senator_multiref')->isEmpty()) {
    $tid = $user->get('field_senator_multiref')->first()->getString() ?? '';
    $senator = NULL;
    if (!empty($tid)) {
      $senator = Term::load($tid);
    }
    $variables['senator'] = $senator;

    // Senator name.
    if (!empty($senator)) {
      if (isset($senator->name->value) && !empty($senator->name->value)) {
        $senator_name = $senator->name->value;
      }

      // Senator image.
      if ($senator->hasField('field_image_headshot') && !$senator->get('field_image_headshot')->isEmpty()) {
        $senator_image = $senator->field_member_headshot->entity;
      }
    }

  }

  // Generate the contact your senator variables.
  $url = '';
  $title = '';
  $link = [];
  $is_out_of_state = \Drupal::service('nys_users.user_helper')->isOutOfState($user);
  if ($is_out_of_state) {
    $title = t('Contact the Senate about this issue');
    $link = [
      'url' => '/form/contact',
      'text' => t('Contact Senate'),
    ];
  }
  else {
    $title = t('Contact your Senator about this issue');
    $link = [
      'url' => '/user/dashboard/inbox/new?context=issue&issue_id=' . $variables['term']->id(),
      'text' => t('Contact %senator', ['%senator' => $senator_name]),
    ];
  }

  $variables['contact_your_senator'] = [
    'logged_in' => \Drupal::currentUser()->isAuthenticated(),
    'title' => $title,
    'senator_image' => $senator_image,
    'link' => $link,
  ];

  $variables['is_senator'] = \Drupal::service('nys_users.user_helper')->isSenator($user);
  $variables['absolute_url'] = \Drupal::request()->getSchemeAndHttpHost() . $variables['url'];

  // Quick facts.
  $variables['quick_facts'] = [
    '#theme' => 'nysenate_issue_quick_facts',
    '#term' => $variables['term'],
  ];

  // Senators talking about this issue.
  $variables['senators_talking_about_this_issue'] = [
    '#theme' => 'nysenate_senators_talking_about_this_issue',
    '#term' => $variables['term'],
  ];

  // Petitions related to this issue.
  $args = [$variables['term']->id()];
  $petition_view = Views::getView('news_by_issue');
  if (is_object($petition_view)) {
    $petition_view->setArguments($args);
    $petition_view->setDisplay('petition');
    $petition_view->preExecute();
    $petition_view->execute();
    $variables['petitions'] = $petition_view->buildRenderable('petition', $args);
  }

  // News.
  $news_view = Views::getView('news_by_issue');
  if (is_object($news_view)) {
    $variables['news'] = $news_view->buildRenderable('news', $args);
  }

  // Legislation.
  $news_by_bill_view = Views::getView('news_by_issue');
  if (is_object($news_by_bill_view)) {
    $variables['news_by_bill'] = $news_by_bill_view->buildRenderable('news_by_bill', $args);
  }

  // Meetings.
  $meeting_by_issue_view = Views::getView('news_by_issue');
  if (is_object($meeting_by_issue_view)) {
    $variables['meeting_by_issue'] = $meeting_by_issue_view->buildRenderable('meeting_by_issue', $args);
  }

  // Video.
  $video_view = Views::getView('news_by_issue');
  if (is_object($video_view)) {
    $variables['video'] = $video_view->buildRenderable('video', $args);
  }

  // Get the Follower count flag.
  $flag_service = \Drupal::service('flag.count');
  $flag = $flag_service->getEntityFlagCounts($variables['term']);
  if ($flag) {
    $variables['flag_count'] = $flag['follow_issue'];
  }

  // Set the cache tags for the issues taxonomy.
  // Invalidation will occur on nys_senators_user_presave method.
  $variables['#cache']['tags'][] = 'taxonomy_term_list:issues';
}

/**
 * Retrieves the senator district in ordinal format.
 *
 * @param int $tid
 *   The taxonomy term id.
 *
 * @return string
 *   The ordinal number.
 */
function get_senator_district($tid) {
  $db = \Drupal::database();

  $query = $db->select('taxonomy_term__field_senator', 's')
    ->fields('s', ['entity_id'])
    ->condition('s.field_senator_target_id', $tid);
  $district_id = $query->execute()->fetchField();

  $district_number = '';
  if (!empty($district_id)) {
    $district = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($district_id);

    $district_number = (int) $district->field_district_number->value;
    return ordinal_suffix($district_number);
  }

  return $district_number;
}

/**
 * Sets the ordinal format of the number.
 *
 * @param int $number
 *   The district number.
 * @param int $ss
 *   Turn super script on/off.
 *
 * @return string
 *   The ordinal number.
 */
function ordinal_suffix($number, $ss = 0) {
  // Check for 11, 12, 13.
  if ($number % 100 > 10 && $number % 100 < 14) {
    $os = 'th';
  }
  // Check if number is zero.
  elseif ($number == 0) {
    $os = '';
  }
  else {
    // Get the last digit.
    $last = substr($number, -1, 1);

    switch ($last) {
      case "1":
        $os = 'st';
        break;

      case "2":
        $os = 'nd';
        break;

      case "3":
        $os = 'rd';
        break;

      default:
        $os = 'th';
    }
  }

  // Add super script.
  $os = $ss == 0 ? $os : '<sup>' . $os . '</sup>';
  return $number . $os;
}

/**
 * Implements hook_theme().
 */
function nysenate_theme_theme($existing, $type, $theme, $path) {
  return [
    'nysenate_sponsor' => [
      'variables' => [
        'content' => NULL,
      ],
      'path' => $path . '/src/templates',
    ],
    'nysenate_issue_quick_facts' => [
      'variables' => [
        'term' => NULL,
      ],
      'path' => $path . '/src/templates',
    ],
    'nysenate_senators_talking_about_this_issue' => [
      'variables' => [
        'term' => NULL,
      ],
      'path' => $path . '/src/templates',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_nysenate_issue_quick_facts(&$variables) {
  $term = $variables['term'];
  $variables['title'] = $term->getName() . ' Quick Facts';

  // Get quick fact counts #quick_facts #quickfacts for bills and resolutions.
  $query = "SELECT count(*) from node__field_issues fi
    JOIN node_field_data n on n.nid = fi.entity_id
    WHERE n.type IN ('bill', 'resolution')
    AND n.status = 1 AND fi.field_issues_target_id = :tid";

  $bills_facts_count = (int) \Drupal::database()
    ->query($query, [':tid' => $term->id()])->fetchField();

  // Get quick fact counts #quick_facts #quickfacts for news and stories.
  $query = "SELECT count(*)from node__field_issues fi
    JOIN node_field_data n on n.nid = fi.entity_id
    WHERE n.type IN ('article','in_the_news','press_release','video')
    AND n.status = 1 and fi.field_issues_target_id = :tid;";

  $news_stories_facts_count = (int) \Drupal::database()
    ->query($query, [':tid' => $term->id()])->fetchField();

  // Get quick fact counts #quick_facts #quickfacts for event types.
  $query = "SELECT count(*)from node__field_issues fi
    JOIN node_field_data n on n.nid = fi.entity_id
    WHERE n.type IN ('meeting','public_hearing','events')
    AND n.status = 1 AND fi.field_issues_target_id = :tid";

  $meetings_facts_count = (int) \Drupal::database()
    ->query($query, [':tid' => $term->id()])->fetchField();

  $variables['facts'] = [
    [
      'panel_id' => '2',
      'statistic' => $bills_facts_count,
      'description' => "Bills and Resolutions",
    ],
    [
      'panel_id' => '1',
      'statistic' => $news_stories_facts_count,
      'description' => "News Stories",
    ],
    [
      'panel_id' => '3',
      'statistic' => $meetings_facts_count,
      'description' => "Meetings or Public Hearings",
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_nysenate_senators_talking_about_this_issue(&$variables) {
  $term = $variables['term'];
  $senators = [];

  $cid = 'senators_talking_about_' . $term->id();
  if ($cache = \Drupal::cache()->get($cid)) {
    $senators = $cache->data;
  }
  else {

    $query = "SELECT COUNT(*) as count, fs.field_senator_multiref_target_id tid FROM node__field_issues fi
    JOIN node__field_senator_multiref fs ON fs.entity_id = fi.entity_id
    AND fs.bundle = fi.bundle
    JOIN taxonomy_term__field_active_senator fa ON fa.entity_id = fs.field_senator_multiref_target_id
    AND fa.bundle = 'senator'
    WHERE fi.bundle IN ('article', 'in_the_news', 'press_release', 'video') AND fi.field_issues_target_id = :tid
    AND fa.field_active_senator_value = 1
    GROUP by fs.field_senator_multiref_target_id ORDER BY count DESC;
    ";
    $result = \Drupal::database()->query($query, [':tid' => $term->id()])->fetchAll();

    foreach ($result as $r) {
      $senator_term = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($r->tid);

      if (!empty($senator_term) && $senator_term->hasField('field_active_senator') && !$senator_term->get('field_active_senator')->isEmpty()) {
        $senator = \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term')->view($senator_term, 'senators_involved');
        $senators[] = $senator;
      }
    }
    \Drupal::cache()->set($cid, $senators);
  }

  $variables['senators'] = $senators;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__bill(&$variables) {
  $node = $variables['node'];

  if (isset($variables['content']['field_issues'][0]) && $variables['view_mode'] == 'full') {
    $issues = [];
    foreach ($variables['content']['field_issues'][0]['#items'] as $issue) {
      $url = Link::fromTextAndUrl($issue['#title'], $issue['#url']);
      $issues[] = $url;
    }
    $variables['issues'] = $issues;
  }

  if (isset($variables['content']['field_majority_issue_tag'])) {
    foreach ($variables['content']['field_majority_issue_tag'] as $key => $field_majority_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $variables['majority_issue'] = Link::fromTextAndUrl($field_majority_issues['#title'], $field_majority_issues['#url']);
    }
  }

  // Bill PDF Link.
  $ol_base_url = \Drupal::state()->get('openleg_base_url', 'https://legislation.nysenate.gov');
  if (isset($variables['content']['field_ol_session'][0]['#markup'])) {
    $variables['pdf_link'] = $ol_base_url . '/pdf/bills/' . $variables['content']['field_ol_session'][0]['#markup'] . '/' . $node->field_ol_print_no->value;
  }

  $variables['active_amend_url'] = $node->toUrl('canonical', ['absolute' => TRUE])->toString();

  $variables['sponsored_by'] = [
    '#theme' => 'nysenate_sponsor',
    '#content' => \Drupal::service('nys_senators.senators_helper')->getSenatorSponsors($node),
  ];

  // In D7, this value is being set in a form.
  // We are getting the current year for the mean time.
  $current_year = \Drupal::state()->get('nys_session_year', date('Y'));
  $variables['current_session_year'] = $current_year - (1 - $current_year % 2);

  // A few immediate references for the bill object.
  $bill_session_year                   = $node->field_ol_session->value;
  $bill_base_print_no                  = $node->field_ol_base_print_no->value;
  $bill_sub_by                         = $node->field_ol_substituted_by->value;
  $variables['sub_bill_base_print_no'] = ($node->field_ol_substituted_by->value ?? '');

  // Detect bill substitutions.  If a substitution exists, load the target.
  $variables['is_substituted'] = FALSE;
  $state_node = NULL;
  if ($bill_sub_by) {
    $sub_temp = \Drupal::service('nys_bill.bills_helper')->getBillVersions($node);
    $subst_versions = array_combine(
        array_map(function ($v) {
          return $v['title'];
        }, $sub_temp),
        array_map(function ($v) {
          return $v['nid'];
        }, $sub_temp)
    );
    krsort($subst_versions);
    if (!empty($subst_versions)) {
      $subst_node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->load(reset($subst_versions));
      if ($subst_node) {
        $variables['is_substituted'] = TRUE;
        $state_node = $subst_node;
      }
    }
  }

  // Build Bill Status Content Section.
  $variables['positions'] = nysenate_bill_positions($node);

  // Build actions list, including substituted actions if applicable.
  if ($node->hasField('field_ol_all_actions') && !empty($node->field_ol_all_actions->value)) {
    $all_actions = $node->field_ol_all_actions->value;
    $actions = json_decode($all_actions, TRUE);
    if (!empty($actions) && isset($actions['items'])) {
      $actions = $actions['items'];
      $grouped_actions = [];
      // Mark the actions from this bill as the original actions.
      foreach ($actions as &$action) {
        $action['orig'] = TRUE;
      }
      if ($variables['is_substituted']) {
        // If the bill was substituted,
        // add the subbed bill's actions from the point of substitution.
        $sub_actions = NULL;
        if (!empty($state_node) && $state_node->hasField('field_ol_all_actions')) {
          $ol_all_actions = $state_node->field_ol_all_actions->value;
          $sub_actions = json_decode($ol_all_actions, TRUE);
        }
        $action_text_to_find = 'SUBSTITUTED FOR';
        $action_text_to_find_len = strlen($action_text_to_find);
        $from_index = 0;
        if (!empty($sub_actions)) {
          foreach ($sub_actions['items'] as $i => $v) {
            if (substr($v['text'], 0, $action_text_to_find_len) === $action_text_to_find) {
              $from_index = $i;
              break;
            }
          }
          $actions = array_merge($actions, array_slice($sub_actions['items'], $from_index));
        }
      }
      // Sort by reverse chronological date
      // and group by base print no -> version -> date.
      $actions = array_reverse($actions);
      $variables['actions_count'] = count($actions);

      foreach ($actions as &$action) {
        $basePrintNo = $action['billId']['basePrintNo'];
        $version = $action['billId']['version'];
        $date = $action['date'];
        if (!isset($grouped_actions[$basePrintNo])) {
          $grouped_actions[$basePrintNo] = [];
        }
        if (!isset($grouped_actions[$basePrintNo][$version])) {
          $grouped_actions[$basePrintNo][$version] = [];
        }
        if (!isset($grouped_actions[$basePrintNo][$version][$date])) {
          $grouped_actions[$basePrintNo][$version][$date] = [];
        }
        array_push($grouped_actions[$basePrintNo][$version][$date], $action);
      }
      $variables['grouped_actions'] = $grouped_actions;
    }
  }

  // Temporary Votes Content.
  if ($node->hasField('field_ol_votes') && !empty($node->field_ol_votes)) {
    $votes_list = [];
    foreach ($node->field_ol_votes as $key => $item) {
      if (!is_numeric($key)) {
        continue;
      }

      $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
      $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

      /** @var \Drupal\paragraphs\Entity\Paragraph $votes */
      $votes = $paragraph_storage->load($item->target_id);

      $member_keys = [
        'field_ol_aye_members' => 'aye_members',
        'field_ol_nay_members' => 'nay_members',
        'field_ol_aye_wr_members' => 'aye_wr_members',
        'field_ol_absent_members' => 'absent_members',
        'field_ol_excused_members' => 'excused_members',
        'field_ol_abstained_members' => 'abstained_members',
      ];

      $all_members = [];
      foreach ($member_keys as $index => $key) {
        if ($votes->hasField($index) && !empty($votes->$index)) {
          $members = [];
          foreach ($votes->$index as $vote_key => $vote_item) {
            if (!is_numeric($vote_key)) {
              continue;
            }

            $term = $term_storage->load($vote_item->target_id);
            if ($term) {
              $members[] = [
                'name' => $term->field_senator_name->family ?? '',
                'url' => $term->toUrl()->toString(),
              ];
            }
          }

          if (!empty($members)) {
            asort($members);
            $all_members[$key] = $members;
          }
        }
      }

      $type = $votes->field_ol_vote_type->value ?? NULL;
      if ($type == 'COMMITTEE') {
        $vote_committee = $term_storage->load($votes->field_ol_committee[0]->getValue()['target_id']);
        if ($vote_committee) {
          $type = ($vote_committee->name->value ?? '') . ' ' . $type;
        }
      }

      $votes_list[$votes->field_ol_vote_type->value] = [
        'aye_count' => $votes->field_ol_aye_count->value ?? 0,
        'nay_count' => $votes->field_ol_nay_count->value ?? 0,
        'aye_reservations_count' => $votes->field_ol_aye_wr_count->value ?? 0,
        'absent_count' => $votes->field_ol_absent_count->value ?? 0,
        'excused_count' => $votes->field_ol_excused_count->value ?? 0,
        'abstained_count' => $votes->field_ol_abstained_count->value ?? 0,
        'all_members' => $all_members,
        'type' => ucwords(strtolower(trim($type))),
        'date' => date("M j, Y", strtotime($votes->field_publication_date->value)),
      ];
    }

    krsort($votes_list);
    $variables['votes_block'] = $votes_list;
  }

  // Create the HTML for the bill's session.
  $variables['legislative_session'] = '<div class="c-bill--session-year">' .
  $bill_session_year . '-' . ($bill_session_year + 1) . ' Legislative Session</div>';

  $block_manager = \Drupal::service('plugin.manager.block');
  $amendments_block = $block_manager->createInstance('nys_bills_amendment_block', []);
  $variables['amendments_block'] = $amendments_block->build();

  // Detect signed/vetoed status.
  switch ($node->field_ol_last_status->value) {
    case 'SIGNED_BY_GOV':
      $variables['signed_veto_status'] = '<span class="c-bill--flag">Signed By Governor</span>';
      break;

    case 'VETOED':
      $variables['signed_veto_status'] = '<span class="c-bill--flag">Vetoed By Governor</span>';
      break;

    default:
      $variables['signed_veto_status'] = '';
      break;
  }

  // Bill display status.
  $status_to_values = [
    'INTRODUCED' => 'Introduced',
    'IN_ASSEMBLY_COMM' => 'In Assembly Committee',
    'IN_SENATE_COMM' => 'In Senate Committee',
    'ASSEMBLY_FLOOR' => 'On Floor Calendar',
    'SENATE_FLOOR' => 'On Floor Calendar',
    'PASSED_ASSEMBLY' => 'Passed Assembly',
    'PASSED_SENATE' => 'Passed Senate',
    'DELIVERED_TO_GOV' => 'Delivered to Governor',
    'SIGNED_BY_GOV' => 'Signed by Governor',
    'VETOED' => 'Vetoed by Governor',
    'STRICKEN' => 'Stricken',
    'LOST' => 'Lost',
    'SUBSTITUTED' => 'Substituted',
    'ADOPTED' => 'Adopted',
  ];

  $current_status_name = $node->field_ol_last_status->value;
  $current_status = '';
  $committee = '';

  if ($current_status_name) {
    $current_status = $status_to_values[$current_status_name];

    $committee = isset($node->field_ol_latest_status_committee[0]) ? $node->field_ol_latest_status_committee[0]->value : '';
    $chamber = '';
    if (isset($node->field_ol_chamber[0]) && $node->field_ol_chamber[0]->value) {
      $chamber = $node->field_ol_chamber[0]->value;
    }

    if (
      ($current_status_name == 'PASSED_ASSEMBLY' && $chamber == 'senate') ||
      ($current_status_name == 'PASSED_SENATE' && $chamber == 'assembly')
    ) {
      $current_status = 'Passed Senate & Assembly';
    }

  }

  $variables['status_display'] = $current_status;
  $variables['committee'] = $committee;
  $variables['committee_link'] = '/committees/' .
    strtolower(str_replace([',', ' '], ['', '-'], $committee));

  $variables['bill'] = [
    'url' => $node->toUrl('canonical', ['absolute' => TRUE])->toString(),
    'name' => $node->hasField('field_ol_print_no') ? $node->field_ol_print_no->value : '',
  ];
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function nysenate_theme_preprocess_node__bill__teaser(&$variables) {
  $node = $variables['node'];
  $bills = [];
  // Published date.
  $date = '';
  if ($node->hasField('field_ol_publish_date') && !$node->get('field_ol_publish_date')->isEmpty()) {
    $date = \Drupal::service('date.formatter')->format(strtotime($node->field_ol_publish_date->value), '', 'F d, Y');
  }

  // Last status.
  $last_status_values = $node->field_ol_last_status->getSetting('allowed_values');
  $last_status = !empty($node->field_ol_last_status->value) ? $last_status_values[$node->field_ol_last_status->value] : '';

  // All status.
  $positions = nysenate_bill_positions($node);

  $sponsor = NULL;
  if (!empty($node->field_ol_sponsor->target_id)) {
    $sponsor = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($node->field_ol_sponsor->target_id);
  }

  if (!empty($sponsor)) {
    $given = $sponsor->field_senator_name->given ?? '';
    $family = $sponsor->field_senator_name->family ?? '';
    $sponsor_name = $given . ' ' . $family;
  }

  $bills[] = [
    'featured' => TRUE,
    'small' => FALSE,
    'is_poll' => TRUE,
    'resolution' => TRUE,
    'link' => $node->toUrl()->toString(),
    'number' => $node->label(),
    'description' => $node->field_ol_name->value,
    'date' => $date,
    'update_location' => $last_status ?? '',
    'sponsor' => $sponsor_name ?? '',
    'positions' => $positions,
  ];

  $variables['bills'] = $bills;
}

/**
 * Generate the bill positions array.
 *
 * @param object $node
 *   The node object.
 *
 * @return array
 *   The positions array.
 */
function nysenate_bill_positions($node) {

  // If the bill is substituted, load the new bill instead.
  if ($node->hasField('field_ol_substituted_by') && !$node->get('field_ol_substituted_by')->isEmpty()) {
    $sub_bill_base_print_no = $node->field_ol_substituted_by->value;
    $ol_session = '';
    if ($node->hasField('field_ol_session') && !$node->get('field_ol_session')->isEmpty()) {
      $ol_session = $node->field_ol_session->value;
    }
    $sub_bill_versions = \Drupal::service('nys_bill.bills_helper')->getBillVersions($node);
    if (!empty($sub_bill_versions)) {
      $node = \Drupal::entityTypeManager()->getStorage('node')
        ->load(end($sub_bill_versions)['nid']);
    }
  }

  $positions = [];

  // Define default positions.
  $positions = [
    [
      'text' => t('Introduced'),
      'is_passed' => FALSE,
    ],
    [
      'text' => t('In Committee'),
      'is_passed' => FALSE,
    ],
    [
      'text' => t('On Floor Calendar'),
      'is_passed' => FALSE,
    ],
    [
      'is_grouped' => TRUE,
      'items' => [
        [
          'text' => t('Passed Senate'),
          'is_passed' => FALSE,
        ],
        [
          'text' => t('Passed Assembly'),
          'is_passed' => FALSE,
        ],
      ],
    ],
    [
      'text' => t('Delivered to Governor'),
      'is_passed' => FALSE,
    ],
    [
      'text' => t('Chaptered/Vetoed'),
      'is_passed' => FALSE,
    ],
  ];

  if ($node->hasField('field_ol_last_status') && isset($node->field_ol_last_status->value)) {
    // Last status.
    $last_status = !empty($node->field_ol_last_status->value) ? $node->field_ol_last_status->value : '';

    // Set status indexes.
    $all_statuses = [
      'INTRODUCED' => 0,
      'IN_ASSEMBLY_COMM' => 1,
      'IN_SENATE_COMM' => 1,
      'ASSEMBLY_FLOOR' => 2,
      'SENATE_FLOOR' => 2,
      'PASSED_ASSEMBLY' => 3,
      'PASSED_SENATE' => 3,
      'DELIVERED_TO_GOV' => 4,
      'SIGNED_BY_GOV' => 5,
      'VETOED' => 5,
    ];

    // Get the current status name and map it.
    $current_status_index = 0;
    if (array_key_exists($last_status, $all_statuses)) {
      $current_status_index = $all_statuses[$last_status];
    }

    // Arrange the positions value.
    foreach ($positions as $index => $item) {
      if ($index === 3) {
        if ($current_status_index == 3) {
          if ($last_status === 'PASSED_SENATE') {
            $positions[3]['items'][0]['is_passed'] = TRUE;
          }
          if ($last_status === 'PASSED_ASSEMBLY') {
            $positions[3]['items'][1]['is_passed'] = TRUE;
          }
        }
        else {
          $positions[3]['items'][0]['is_passed'] = $current_status_index >= $index;
          $positions[3]['items'][1]['is_passed'] = $current_status_index >= $index;
        }
      }
      else {
        $positions[$index]['is_passed'] = $current_status_index >= $index;
      }
    }

    if ($current_status_index === 5) {
      if ($last_status === 'VETOED') {
        $positions[5]['text'] = 'Vetoed';
      }
      else {
        $positions[5]['text'] = 'Chaptered/Signed by Governor';
      }
    }
  }
  return $positions;
}

/**
 * Calculates current legislative session, e.g. 2015.
 */
function nysenate_current_legislative_session() {
  $year = date('Y');
  if ($year % 2 == 0) {
    $year--;
  }
  return $year;
}

/**
 * Implements hook_preprocess_media().
 */
function nysenate_theme_preprocess_media(&$variables) {
  if (isset($variables['content']['field_media_file'])) {
    $file_name = $variables['name'];
    $file = $variables['media']->field_media_file->entity;
    $file->setFilename($file_name);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__resolution(&$variables) {
  $node = $variables['node'];

  $variables['label'] = $variables['label'][0]['#context']['value'] ?? '';
  $variables['ol_name'] = isset($variables['elements']['field_ol_name'][0]) ? $variables['elements']['field_ol_name'][0]['#context']['value'] : '';
  $variables['featured_quote'] = isset($variables['elements']['field_featured_quote'][0]) ? $variables['elements']['field_featured_quote'][0]['#context']['value'] : '';
  $variables['ol_law_section'] = isset($variables['elements']['field_ol_law_section'][0]) ? $variables['elements']['field_ol_law_section'][0]['#context']['value'] : '';

  $variables['sponsored_by'] = [
    '#theme' => 'nysenate_sponsor',
    '#content' => \Drupal::service('nys_senators.senators_helper')->getSenatorSponsors($node),
  ];

  $variables['sponsor_block'] = $node->field_ol_co_sponsor_names->value;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__event(&$variables) {
  $start_date = NULL;
  $end_date = NULL;
  $node = $variables['node'];
  // If the start and end date is the same,
  // set then end_date same as the start_date.
  if ($node instanceof NodeInterface && $node->hasField('field_date_range') && !empty($node->get('field_date_range')->value)) {
    $start_date = new DateTime($node->get('field_date_range')->value, new DateTimeZone('UTC'));
    $start_date->setTimezone(new DateTimeZone('America/New_York'));
    $end_date = $start_date;

    // If there's a start_date key, probably there's
    // end_date key also.
    if (isset($node->get('field_date_range')->end_value)) {
      $end_date = new DateTime($node->get('field_date_range')->end_value, new DateTimeZone('UTC'));
      $end_date->setTimezone(new DateTimeZone('America/New_York'));
    }
  }

  // Set up reference variables indicating if this event spans multiple days.
  $is_multiday = FALSE;
  // @phpstan-ignore-next-line
  if (!empty($start_date) && !empty($end_date)) {
    $is_multiday = !($start_date->format('Ymd') == $end_date->format('Ymd'));
  }

  $variables['is_multiday'] = $is_multiday;
  $variables['start_date'] = $start_date ?? '';
  $variables['end_date'] = $end_date ?? '';

  $address = '';
  if (isset($variables['content']['field_location'][0])) {
    if (!empty($variables['content']['field_location'][0]['address_line1']['#value'])) {
      $address = $variables['content']['field_location'][0]['address_line1']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['locality']['#value'])) {
      $address .= $variables['content']['field_location'][0]['locality']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['administrative_area']['#value'])) {
      $address .= $variables['content']['field_location'][0]['administrative_area']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['postal_code']['#value'])) {
      $address .= $variables['content']['field_location'][0]['postal_code']['#value'];
    }
    $variables['location_url'] = urlencode($address);
  }

  $issues = [];
  if (!empty($variables['content']['field_issues'])) {
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
      $issues[] = $url;
    }
  }
  $variables['field_issues'] = $issues;

  // Only generate the calendar links
  // if there's a start date.
  if (!empty($start_date)) {
    $title = $variables['node']->getTitle();
    $description = $variables['content']['body'][0]['#text'] ?? '';
    $variables['calendar_links'] = nysenate_theme_generate_add_to_calendar($title, $start_date, $end_date, $is_multiday, $description, $address);
  }

}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__honoree(&$variables) {
  $variables['vet_archive_list'] = views_embed_view('honoree_profiles', 'vets_senator');
  $variables['women_archive_list'] = views_embed_view('honoree_profiles', 'block_3');

  $variables['title'] = $variables['label'][0]['#context']['value'];

  $issues = [];
  if (!empty($variables['content']['field_issues'])) {
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
      $issues[] = $url;
    }
  }
  $variables['issues'] = $issues;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__session(&$variables) {
  $date_value = get_date_range_values($variables);
  $video_status = get_video_status_values($variables);
  $location = get_location_values($variables);

  // Only generate the calendar invite
  // if there's start_date.
  if (isset($date_value['start_date_raw'])) {
    $title = $variables['node']->getTitle();
    // Set up reference variables indicating if this event spans multiple days.
    $is_multiday = !($date_value['start_date_raw']->format('Ymd') == $date_value['end_date_raw']->format('Ymd'));
    $description = $variables['content']['body'][0]['#text'] ?? '';
    $variables['calendar_links'] = nysenate_theme_generate_add_to_calendar($title, $date_value['start_date_raw'], $date_value['end_date_raw'], $is_multiday, $description, $location['address']);
  }

  $variables['location_url'] = !empty($location['location_url']) ? urlencode($location['location_url']) : urlencode($location['address']);
  $variables['date_value'] = $date_value;
  $variables['video_status'] = $video_status;
  $variables['location'] = $location['address'];
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__public_hearing(&$variables) {
  $date_value = get_date_range_values($variables);
  $video_status = get_video_status_values($variables);
  $location = get_location_values($variables);

  // Only generate the calendar invite
  // if there's start_date.
  if (isset($date_value['start_date_raw'])) {
    $title = $variables['node']->getTitle();
    // Set up reference variables indicating if this event spans multiple days.
    $is_multiday = !($date_value['start_date_raw']->format('Ymd') == $date_value['end_date_raw']->format('Ymd'));
    $description = $variables['content']['body'][0]['#text'] ?? '';
    $variables['calendar_links'] = nysenate_theme_generate_add_to_calendar($title, $date_value['start_date_raw'], $date_value['end_date_raw'], $is_multiday, $description, $location['address']);
  }

  $variables['location_url'] = !empty($location['location_url']) ? urlencode($location['location_url']) : urlencode($location['address']);
  $variables['date_value'] = $date_value;
  $variables['video_status'] = $video_status;
  $variables['location'] = $location['address'];
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__meeting(&$variables) {
  $variables['meeting_agenda'] = views_embed_view('committee_meetings', 'agenda');
  $variables['committee_events'] = views_embed_view('committee_meetings', 'past');

  $date_value = get_date_range_values($variables);
  $video_status = get_video_status_values($variables);

  // Only generate the calendar invite
  // if there's start_date.
  if (isset($date_value['start_date_raw'])) {
    $title = $variables['node']->getTitle();
    // Set up reference variables indicating if this event spans multiple days.
    $is_multiday = !($date_value['start_date_raw']->format('Ymd') == $date_value['end_date_raw']->format('Ymd'));
    $description = $variables['content']['body'][0]['#text'] ?? '';
    $meeting_location = $variables['content']['field_meeting_location'][0] ?? '';
    $variables['calendar_links'] = nysenate_theme_generate_add_to_calendar($title, $date_value['start_date_raw'], $date_value['end_date_raw'], $is_multiday, $description, $meeting_location);
  }

  $event_status = [];
  if (isset($variables['content']['field_meeting_status'][0])) {
    $event_status['key'] = $variables['content']['field_meeting_status']['#items']->value;
    $event_status['value'] = $variables['content']['field_meeting_status'][0]['#markup'];
  }

  $event_place = '';
  if (isset($variables['content']['field_event_place']['#items'])) {
    $event_place = $variables['content']['field_event_place']['#items']->value;
  }

  if (isset($variables['content']['field_event_online_link'][0])) {
    $variables['event_online_link'] = $variables['content']['field_event_online_link'][0]['#url']->toString();
  }

  $variables['date_value'] = $date_value;
  $variables['video_status'] = $video_status;
  $variables['event_status'] = $event_status;
  $variables['event_place'] = $event_place;

  // How a Bill Becomes a law block data.
  $block = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->loadByProperties([
      'type' => 'how_senate_works',
      'info' => 'How a Bill Becomes Law block',
      'field_title' => 'How a Bill Becomes Law',
    ]);

  if (is_array($block)) {
    $block = reset($block);
  }

  if (!empty($block)) {
    /** @var \Drupal\block\BlockViewBuilder $view_builder */
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
    $block_content = $view_builder->view($block);

    $bill = $view_builder->build($block_content);
    $variables['bill'] = $bill;
  }
}

/**
 * Method for fetching date range values.
 */
function get_date_range_values($variables) {
  $date_value = [];
  $start_date = NULL;
  $end_date = NULL;

  if (isset($variables['content']['field_date_range'][0])) {
    // If date range has same values.
    if (isset($variables['content']['field_date_range'][0]['#text'])) {
      $start_date = new DateTime($variables['content']['field_date_range'][0]['#text']);
      $end_date = new DateTime($variables['content']['field_date_range'][0]['#text']);
    }
    // If date range have different start and end dates.
    elseif (isset($variables['content']['field_date_range'][0]['start_date']['#text'])) {
      $start_date = new DateTime($variables['content']['field_date_range'][0]['start_date']['#text']);
      $end_date = new DateTime($variables['content']['field_date_range'][0]['end_date']['#text']);
    }

    // @phpstan-ignore-next-line
    if (isset($start_date) && isset($end_date)) {
      $date_value['day'] = date_format($start_date, "d");
      $date_value['month'] = date_format($start_date, "M");
      $date_value['year'] = date_format($start_date, "Y");
      $date_value['from_time'] = date_format($start_date, "h:i A");
      $date_value['to_time'] = date_format($end_date, "h:i A");
      $date_value['start_date_raw'] = $start_date;
      $date_value['end_date_raw'] = $end_date;
      $date_value['start_date'] = date_format($start_date, "m/d/Y h:i A");
      $date_value['end_date'] = date_format($end_date, "m/d/Y h:i A");
    }

  }

  return $date_value;
}

/**
 * Method for fetching video status values.
 */
function get_video_status_values($variables) {
  $video_status = [];
  if (isset($variables['content']['field_video_status'][0])) {
    $video_status['key'] = $variables['content']['field_video_status']['#items']->value;
    $video_status['value'] = $variables['content']['field_video_status'][0]['#markup'];
  }

  return $video_status;
}

/**
 * Method for fetching location values.
 */
function get_location_values($variables) {
  $address = '';
  if (isset($variables['content']['field_location'][0])) {
    if (!empty($variables['content']['field_location'][0]['address_line1']['#value'])) {
      $address = $variables['content']['field_location'][0]['address_line1']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['address_line2']['#value'])) {
      $address .= $variables['content']['field_location'][0]['address_line2']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['locality']['#value'])) {
      $address .= $variables['content']['field_location'][0]['locality']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['administrative_area']['#value'])) {
      $address .= $variables['content']['field_location'][0]['administrative_area']['#value'] . ', ';
    }
    if (!empty($variables['content']['field_location'][0]['postal_code']['#value'])) {
      $address .= $variables['content']['field_location'][0]['postal_code']['#value'];
    }
  }

  $location_url = '';
  if (!empty($variables['content']['field_location'][0]['organization']['#value'])) {
    $location_url = $variables['content']['field_location'][0]['organization']['#value'] . ', ' . $address;
  }

  return [
    'address' => $address,
    'location_url' => $location_url,
  ];
}

/**
 * Method for generating the Add to Calendar links.
 */
function nysenate_theme_generate_add_to_calendar($title, $start_date, $end_date, $is_multiday, $description, $address) {
  $links = [];
  $calendar_types = [
    'ics' => 'Apple iCalendar',
    'google' => 'Google',
    'webOffice' => 'Outlook',
    'webOutlook' => 'Outlook.com',
    'yahoo' => 'Yahoo',
  ];

  $calendar_link_service = \Drupal::service('calendar_link.twig_extension');
  // The end_date of the method calendarLink cannot
  // be empty. Assign the start_date as the end_date
  // if its empty.
  if (empty($end_date)) {
    $end_date = $start_date;
  }

  foreach ($calendar_types as $key => $calendar) {
    $link_text = $calendar_link_service->calendarLink(
      $key,
      $title,
      $start_date,
      $end_date,
      $is_multiday,
      $description,
      $address,
    );

    $class = strtolower($key);
    switch ($key) {
      case 'ics':
        $class = 'apple-cal';
        break;

      case 'webOffice':
        $class = 'outlook';
        break;

      case 'webOutlook':
        $class = 'outlookcom';
        break;

      default:
        break;
    }

    $is_online = FALSE;
    if (in_array($key, ['google', 'webOutlook', 'yahoo'])) {
      $is_online = TRUE;
    }

    $links[] = [
      'type' => $calendar,
      'class' => $class,
      'is_online' => $is_online,
      'url' => $link_text,
    ];
  }

  return $links;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $node = $variables['elements']['#node'];

  if ($variables['view_mode'] == 'upcoming_event') {
    if ($node->bundle() === 'event') {
      $date = new \Datetime($node->field_date_range->value, new DateTimeZone('UTC'));
      $date->setTimezone(new DateTimeZone('America/New_York'));
      $date_end = new \Datetime($node->field_date_range->end_value, new DateTimeZone('UTC'));
      $date_end->setTimezone(new DateTimeZone('America/New_York'));
      $street_2 = $node->field_location[0]->locality . ', '
        . $node->field_location[0]->administrative_area . ' ' . $node->field_location[0]->postal_code;
      $variables['item'] = [
        'title' => $node->label(),
        'url' => $node->toUrl()->toString(),
        'day' => $date->format('d'),
        'month' => $date->format('M'),
        'location' => $node->field_location[0]->organization,
        'meeting_location' => $node->field_meeting_location->value ?? '',
        'street_1' => $node->field_location[0]->address_line1,
        'street_2' => !empty($node->field_location[0]->locality) ? $street_2 : '',
        'time' => $date->format('g:i A') . ' to ' . $date_end->format('g:i A'),
      ];
    }
  }

  $variables['title'] = $variables['label'][0]['#context']['value'];

  $issues = [];
  if (!empty($variables['content']['field_issues'])) {
    foreach ($variables['content']['field_issues'] as $key => $field_issues) {
      if (!is_numeric($key)) {
        continue;
      }
      if (isset($field_issues['#title']) && isset($field_issues['#url'])) {
        $url = Link::fromTextAndUrl($field_issues['#title'], $field_issues['#url']);
        $issues[] = $url;
      }
    }
  }
  $variables['issues'] = $issues;

  $variables['absolute_url'] = $node->toUrl()->setAbsolute()->toString();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nysenate_theme_preprocess_node__open_data(&$variables) {
  $node = $variables['elements']['#node'];
  if ($node->bundle() == 'open_data') {
    $date = new \Datetime($node->field_date->value);
    $end_date = new \Datetime($node->field_end_date->value);
    $publication_date = new \Datetime($node->field_publication_date->value);
    $variables['date'] = $date->format('F d, Y');
    $variables['end_date'] = $end_date->format('F d, Y');
    $variables['open_date_type'] = $node->field_open_date_type->value ? $node->field_open_date_type
      ->getSetting('allowed_values')[$node->field_open_date_type->value] : "";
    $variables['published_on'] = $publication_date->format('F d, Y');
    $variables['body'] = $node->body->view();
    $variables['title'] = $node->getTitle();
    $variables['title_social'] = $node->toUrl()->toString();
    $variables['url'] = $node->toUrl()->setAbsolute()->toString();
    $variables['cta'] = 'Check out this open data report';

    if (!empty($node->field_open_data_file->getValue())) {
      foreach ($node->field_open_data_file as $item) {
        if ($item->isDisplayed()) {
          $file = File::load($item->target_id);
          $file_url_generator = \Drupal::service('file_url_generator');
          $variables['file_items'][] = [
            'url' => $file_url_generator->generateAbsoluteString($file->getFileUri()),
            'text' => ($item->description !== '') ? $item->description : $file->getFilename(),
            'type' => $file->getMimeType(),
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__article__featured_content(&$variables) {
  $variables['image_main'] = $variables['content']['field_image_main'][0] ?? [];
  $field_issues = $variables['content']['field_issues'];
  foreach ($field_issues as $key => $issue) {
    if (!is_numeric($key)) {
      continue;
    }

    $variables['tags'][] = [
      'url' => $issue['#url'],
      'text' => $issue['#title'],
    ];
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__honoree__featured_content(&$variables) {
  $variables['image_main'] = $variables['content']['field_image_main'][0] ?? [];
  $field_issues = $variables['content']['field_issues'];
  foreach ($field_issues as $key => $issue) {
    if (!is_numeric($key)) {
      continue;
    }

    $variables['tags'][] = [
      'url' => $issue['#url'],
      'text' => $issue['#title'],
    ];
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__bill__featured_content(&$variables) {
  $variables['item_cta'] = [
    'url' => $variables['url'],
    'text' => 'Read More',
    'value' => 'read_more',
  ];

  $current_node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($current_node->field_senator_multiref->getValue())) {
    $senator = $current_node->field_senator_multiref->entity;
    $party = $senator->field_party->getValue();
    $parties = implode(', ', array_map(function ($item) {
      return $item['value'];
    }, $party));
    $variables['senator_name'] = $senator->getName();
    $variables['senator_link'] = $senator->toUrl()->toString();
    $variables['party'] = '(' . $parties . ')';

    if ($senator->hasField('field_member_headshot') && !$senator->get('field_member_headshot')->isEmpty()) {
      $variables['senator_image'] = $senator->field_member_headshot->view('full')[0] ?? NULL;
    }

  }

  $node = $variables['node'];
  $allowed_values = '';
  if ($node->hasField('field_ol_last_status')) {
    $allowed_values = $node->field_ol_last_status->getSetting('allowed_values');
  }
  $published_date = '';
  if ($node->hasField('field_ol_publish_date') &&
    !$node->get('field_ol_publish_date')->isEmpty()) {
    $published_date = $node->field_ol_publish_date->value;
  }

  // If published_date is not timestamp, use strtotime().
  if (!empty($published_date) && strpos($published_date, 'T') !== FALSE) {
    $published_date = strtotime($published_date);
  }

  $last_status = '';
  if ($node->hasField('field_ol_last_status') && !$node->get('field_ol_last_status')->isEmpty()) {
    $last_status = $allowed_values[$node->field_ol_last_status->value];
  }

  $variables['bill'] = [
    'featured' => TRUE,
    'small' => FALSE,
    'is_poll' => TRUE,
    'resolution' => TRUE,
    'link' => $node->toUrl()->toString(),
    'number' => $node->getTitle(),
    'description_position' => 'bottom',
    'description' => !empty($node->field_ol_name->value) ? $node->field_ol_name->value : '',
    'date' => !empty($published_date) ? \Drupal::service('date.formatter')->format($published_date, '', 'F d, Y') : '',
    'update_location' => $last_status,
    'positions' => nysenate_bill_positions($node),
  ];
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__event__featured_content(&$variables) {
  $content = $variables['content'];
  $variables['image_main'] = !empty($content['field_image_main'][0]) ? $content['field_image_main'][0] : [];
  $location = $content['field_location'][0];
  $street_2 = $location['locality']['#value'] . ', '
    . $location['administrative_area']['#value'] . ' ' . $location['postal_code']['#value'];
  $variables['location'] = $location['organization'];
  $variables['meeting_location'] = $content['field_meeting_location'][0] ?? '';
  $variables['street_1'] = $location['address_line1'] ?? '';
  $variables['street_2'] = !empty($location['locality']['#value']) ? $street_2 : '';
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__promotional_banner__featured_content(&$variables) {
  $variables['banner_image'] = !empty($variables['content']['field_promotional_banner_image'][0]) ? $variables['content']['field_promotional_banner_image'][0] : [];
  $node = $variables['node'];
  if ($node->hasField('field_call_to_action') && !$node->field_call_to_action->isEmpty()) {
    $banner_cta_value = $node->field_call_to_action->value;
    $allowed_values = $node->field_call_to_action->getSetting('allowed_values');

    $url = $node->field_link->uri;
    if ($node->field_link_type->value === 'internal') {
      $url = $variables['url'];
      if (!$node->field_promotional_content->isEmpty()) {
        $promo_content = $node->field_promotional_content->entity;
        $url = $promo_content->toUrl()->toString();
      }
    }
    $variables['item_cta'] = [
      'url' => $url,
      'text' => $allowed_values[$banner_cta_value],
      'value' => $banner_cta_value,
    ];
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function nysenate_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $views_id = [
    'views-exposed-form-senator-microsite-content-microsite-newsroom-content',
    'views-exposed-form-senator-microsite-content-microsite-legislation-content',
  ];

  if (!empty($form['#id']) && in_array($form['#id'], $views_id)) {
    $form['#attributes']['class'][] = 'l-tab-bar';
    $form['#attached']['library'][] = 'nysenate_theme/newsroom-content';

    if ($form['#id'] == 'views-exposed-form-senator-microsite-content-microsite-newsroom-content') {
      $form['type_1']['#options']['All'] = t('All News');
    }

    if ($form['#id'] == 'views-exposed-form-senator-microsite-content-microsite-legislation-content') {
      unset($form['type']['#options']['All']);
    }
  }

  if (!empty($form['#id']) &&
    ($form['#id'] == 'views-exposed-form-private-message-inbox-inbox' ||
    $form['#id'] == 'views-exposed-form-private-message-inbox-sent')) {
    $form['#attached']['library'][] = 'nysenate_theme/dashboard-inbox';
    $values = $form_state->getValues();

    $field_elements = [
      'message__value',
      'owner',
      'field_issue_target_id',
      'title',
    ];

    foreach ($field_elements as $field_element) {
      $form[$field_element]['#default_value'] = $values[$field_element] ?? '';
      $form[$field_element]['#size'] = 60;
      $form[$field_element]['#maxlength'] = 128;
      $form[$field_element]['#attributes']['class'] = ['search-form-group__input'];
    }
  }
}

/**
 * Implements hook_preprocess_form__views_exposed_form().
 */
function nysenate_theme_preprocess_form__views_exposed_form__private_message_inbox__inbox(&$variables) {
  $variables['title'] = 'Inbox';

  $cta_link = '/users/' . \Drupal::currentUser()->id() . '/dashboard/sent';
  $uri_explode = explode('/', \Drupal::request()->getRequestUri());
  if ($uri_explode && is_array($uri_explode)) {
    $cta_link = '/users/' . $uri_explode[2] . '/dashboard/sent';
  }

  $variables['cta'] = [
    'link' => $cta_link,
    'label' => 'View Sent Messages',
  ];
}

/**
 * Implements hook_preprocess_form__views_exposed_form().
 */
function nysenate_theme_preprocess_form__views_exposed_form__private_message_inbox__sent(&$variables) {
  $variables['title'] = 'Sent';

  $cta_link = '/users/' . \Drupal::currentUser()->id() . '/dashboard/inbox';
  $uri_explode = explode('/', \Drupal::request()->getRequestUri());
  if ($uri_explode && is_array($uri_explode)) {
    $cta_link = '/users/' . $uri_explode[2] . '/dashboard/inbox';
  }

  $variables['type'] = 'sent';
  $variables['cta'] = [
    'link' => $cta_link,
    'label' => 'Back to Inbox',
  ];
}

/**
 * Implements hook_views_pre_render().
 */
function nysenate_theme_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'senator_microsite_content' && $view->current_display == 'microsite_newsroom_content') {
    // Retrieve the filter inputs.
    $filter = $view->exposed_raw_input;
    $filter = $filter['type_1'];
    // 1 stands for Press Release.
    if ($filter == '1') {
      $results = $view->result;
      $filteredResults = [];
      foreach ($results as $result) {
        // Get all the press_release category nodes.
        /** @var \Drupal\node\Entity\Node $node */
        $node = $result->_entity;
        if ($node->hasField('field_category') && !$node->get('field_category')->isEmpty()) {
          if ($node->field_category->value == 'press_release') {
            $filteredResults[] = $result;
          }
        }
      }
      // Override the views results.
      $view->result = $filteredResults;
      $view->total_rows = count($filteredResults);
    }
  }

  if ($view->id() == 'constituent_petitions_and_questionnaires' && $view->current_display == 'constituent_questionnaires_submitted') {
    $results = $view->result;
    foreach ($results as $index => $row) {
      $node = $row->_entity;
      $nid = $row->nid ?? NULL;

      if (\Drupal::currentUser()->id() && isset($node->webform[0]->target_id)) {
        $result = \Drupal::database()
          ->select('webform_submission', 'w')
          ->fields('w', ['completed'])
          ->condition('uid', \Drupal::currentUser()->id())
          ->condition('entity_type', 'node')
          ->condition('entity_id', $nid)
          ->condition('webform_id', $node->webform[0]->target_id)
          ->orderBy('sid', 'DESC')
          ->execute()
          ->fetchField();

        /* @phpstan-ignore-next-line */
        $view->result[$index]->field_timestamp = $result;
      }
    }
  }

}

/**
 * Implements hook_preprocess_views_view_table().
 */
function nysenate_theme_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];

  if ($variables['view']->id() == 'private_message_inbox') {
    // Add column for the action links.
    $variables['header']['actions'] = [
      'content' => '',
      'default_classes' => TRUE,
    ];

    if (isset($variables['result']) && !empty($variables['result'])) {
      foreach ($variables['result'] as $key => $result) {
        $row_id = $result->_entity->id();
        $subject = $result->_entity->field_subject->value;
        $owner = User::load($result->_entity->owner[0]->target_id);
        $owner_name = $owner->name->value ?? '';
        $message = $result->_entity->message->value ?? '';
        $field_to = $result->_entity->field_to->target_id;

        $user = \Drupal::entityTypeManager()->getStorage('user')
          ->load($field_to);
        $field_to_link = $user->toUrl()->toString();
        $field_to_parts = explode('/', $field_to_link);
        $user_name = $field_to_parts[1] ?? $field_to;

        $link_options = [
          'attributes' => [
            'class' => [
              'message-list__td--issue__action',
              'action-button',
            ],
          ],
        ];

        $url = Url::fromUserInput('/users/' . $user_name . '/dashboard/inbox/reply/' . $row_id);
        $link = Link::fromTextAndUrl($subject, $url);
        $owner_link = Link::fromTextAndUrl($owner_name, $url)->toString();
        $message_link = Link::fromTextAndUrl($message, $url)->toString();
        $variables['rows'][$key]['columns']['owner']['content'][0]['field_output']['#markup'] = '
          <div class="message-list__td--information__author">' . $owner_link . '</div>
          <div class="message-list__td--information__message">' . $message_link . '</div>';
        $variables['rows'][$key]['columns']['field_subject']['content'][0]['field_output']['#markup'] = $link->toString();

        $url->setOptions($link_options);
        $reply_link = Link::fromTextAndUrl(t('Reply'), $url)->toString();
        $forward_url = Url::fromUserInput('/users/' . $user_name . '/dashboard/inbox/forward/' . $row_id);
        $forward_url->setOptions($link_options);
        $forward_link = Link::fromTextAndUrl(t('Forward'), $forward_url)->toString();
        $actions_attributes = new Attribute([
          'class' => ['message-list__td--issue'],
        ]);

        $variables['rows'][$key]['columns']['actions']['content'][0]['field_output']['#markup'] = '<div class="message-list__td--issue__toggle"></div>
          <div class="message-list__td--issue__actions">' . $forward_link . ' ' . $reply_link . '</div>';
        $variables['rows'][$key]['columns']['actions']['attributes'] = $actions_attributes;
      }
    }
    else {
      $empty_attributes = new Attribute([
        'class' => ['message-list__td'],
        'colspan' => 5,
      ]);
      $variables['rows'][0]['columns'][0]['attributes'] = $empty_attributes;
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function nysenate_theme_preprocess_form_element(&$variables) {
  if (!empty($variables['element']['#parents'])) {
    if (array_intersect(['type_1', 'type'], $variables['element']['#parents'])) {
      $variables['attributes']['class'][] = 'c-tab';
      $variables['label']['#attributes']['class'][] = 'c-tab-link';
    }
  }

  if (!empty($variables['element']['#id'])) {
    if ($variables['element']['#id'] == 'edit-field-address-0-address-address-line2') {
      $variables['label_display'] = 'before';
      $variables['label']['#title'] = t('APT/SUITE/FLOOR (OPTIONAL)');
      $variables['label']['#title_display'] = 'before';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function nysenate_theme_preprocess_page(&$variables) {
  $menu_tree = \Drupal::menuTree();
  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('socials');
  // Load the tree based on this set of parameters.
  $tree = $menu_tree->load('socials', $parameters);

  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkNodeAccess'],
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];

  // Transform the tree using the manipulators you want.
  $tree = $menu_tree->transform($tree, $manipulators);
  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  if (isset($menu['#items'])) {
    $socials = [];
    foreach ($menu['#items'] as $link) {
      $socials[] = [
        'icon' => $link['title'],
        'url' => $link['url']->toString(),
      ];
    }
    $variables['socials'] = $socials;
  }

  // Microsite theme settings.
  $node_types = [
    'microsite_page',
    'petition',
  ];
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && is_object($node) && in_array($node->bundle(), $node_types)) {
    if (!empty($node->field_senator_multiref)) {
      $sid = $node->field_senator_multiref->target_id;
      $senator = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->load($sid);

      if (!empty($senator->field_microsite_theme)) {
        $variables['theme'] = $senator->field_microsite_theme->value;
      }
    }
  }

  $user = \Drupal::entityTypeManager()->getStorage('user')
    ->load(\Drupal::currentUser()->id());
  $user_link = $user->toUrl()->toString();
  $user_parts = explode('/', $user_link);
  $user_name = $user_parts[2] ?? \Drupal::currentUser()->id();

  $variables['dashboard_link'] = '/users/' . $user_name . '/dashboard/issues';
  $variables['edit_account_link'] = '/users/' . $user_name . '/edit';
  $variables['sidebar'] = [
    'links' => [
      [
        'text' => 'Inbox',
        'url' => '/users/' . $user_name . '/dashboard/inbox',
      ],
      [
        'text' => 'Bills',
        'url' => '/users/' . $user_name . '/dashboard/bills',
      ],
      [
        'text' => 'Issues',
        'url' => '/users/' . $user_name . '/dashboard/issues',
      ],
      [
        'text' => 'Committees',
        'url' => '/users/' . $user_name . '/dashboard/committees',
      ],
      [
        'text' => 'Petitions & Questionnaires',
        'url' => '/users/' . $user_name . '/dashboard/petitions',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__promotional_banner__card_list(&$variables) {
  $node = $variables['node'];
  if ($node->hasField('field_call_to_action') && !$node->field_call_to_action->isEmpty()) {
    $banner_cta_value = $node->field_call_to_action->value;
    $allowed_values = $node->field_call_to_action->getSetting('allowed_values');

    $url = $node->field_link->uri;
    if ($node->field_link_type->value === 'internal') {
      $url = $variables['url'];
      if (!$node->field_promotional_content->isEmpty() && isset($node->field_promotional_content->entity)) {
        $promo_content = $node->field_promotional_content->entity;
        $url = $promo_content->toUrl()->toString();
      }
    }
    $variables['item_cta'] = [
      'url' => $url,
      'text' => $allowed_values[$banner_cta_value],
      'value' => $banner_cta_value,
    ];
  }
}

/**
 * Implements hook_preprocess_page().
 */
function nysenate_theme_preprocess_node__microsite_page__full(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node->hasField('field_microsite_page_type') &&
    !$node->get('field_microsite_page_type')->isEmpty()) {
    $term = $node->field_microsite_page_type->entity ?? [];
    if ($term instanceof TermInterface) {
      $name = $term->name->value ?? '';
      $variables['microsite_type'] = strtolower($name);
      if ($name === 'About') {
        $variables['title'] = $node->getTitle();
        if ($node->hasField('field_short_title') && !$node->get('field_short_title')->isEmpty()) {
          $variables['short_title'] = $node->field_short_title->value;
        }

        if ($node->hasField('field_senator_multiref') && !$node->get('field_senator_multiref')->isEmpty()) {
          $senator = $node->field_senator_multiref->first()->entity;

          if ($senator->hasField('field_party') && !$senator->get('field_party')->isEmpty()) {
            $party_values = $senator->field_party->getSetting('allowed_values');
            $party = $senator->field_party->value;
            $variables['party'] = $party_values[$party];
          }

          $district_name = '';
          $query = \Drupal::database()->select('taxonomy_term__field_senator', 's');
          $query->condition('s.field_senator_target_id', $senator->id());
          $query->fields('s', ['entity_id']);
          $result = $query->execute()->fetchAssoc();
          if (!empty($result)) {
            $id = $result['entity_id'];
            $district = Term::load($id);
            $district_name = $district->label();
            if (strpos($district_name, 'NY Senate') !== FALSE) {
              $district_name = trim(str_replace('NY Senate', '', $district_name));
            }

            $variables['district_name'] = $district_name;
          }
        }
      }
    }
  }

  if ($node->hasField('field_block') && !$node->get('field_block')->isEmpty()) {
    foreach ($node->get('field_block') as $key => $value) {
      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
      $block_content = $value->entity;

      if ($block_content instanceof BlockContent) {
        // Get short_title from Media title.
        if ($block_content->bundle() == 'media') {
          if ($block_content->hasField('field_title')) {
            $variables['media_title'] = $block_content->field_title->value ?? NULL;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__petition(&$variables) {
  if (isset($variables['content']['field_image_main'][0])) {
    $variables['image_caption'] = $variables['content']['field_image_main'][0]['#media']->field_image->title;
  }
  $variables['logged_in'] = \Drupal::currentUser()->isAuthenticated();

  /** @var \Drupal\node\NodeInterface $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node->get('field_senator_multiref')->isEmpty()) {
    $tid = $node->get('field_senator_multiref')->first()->getString() ?? '';
    if (!empty($tid)) {
      $senatorName = Term::load($tid)->get('name')->value;
      $variables['field_senator'] = $senatorName;
    }
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if (!$path_alias) {
    throw new NotFoundHttpException();
  }
  $params = [
    'destination' => $path_alias,
  ];
  $variables['petition_login_link'] = Link::fromTextAndUrl(
    t('Logged-in users can sign with one click.'),
    Url::fromUserInput('/user/login', ['query' => $params])
  );

}

/**
 * Implements hook_preprocess_node__TYPE().
 *
 * Create the variables needed for the Transcript content type.
 */
function nysenate_theme_preprocess_node__transcript__full(&$variables) {
  $session_type = $variables['content']['field_ol_session_type'][0]['#context']['value'] ?? '';
  $publish_date = $variables['content']['field_ol_publish_date'][0]['#text'] ?? '';
  $publish_date = !empty($publish_date) ? strtotime($publish_date) : '';

  $ol_base_url = \Drupal::state()->get('openleg_base_url', 'https://legislation.nysenate.gov');
  $transcript_base_url = $ol_base_url . '/pdf/';
  $transcript_type = $variables['content']['field_ol_transcript_type'][0]['#markup'] ?? '';
  $is_hearing = NULL;
  if ($transcript_type) {
    $is_hearing = ($transcript_type === 'public_hearing');
  }

  $is_hearing = ($variables['content']['field_ol_transcript_type'][0]['#markup'] === 'public_hearing');
  $pointer_type = (($is_hearing) ? 'hearings' : 'transcripts');
  $pointer = '';
  if ($is_hearing) {
    $pointer = rawurlencode($variables['content']['field_ol_filename'][0]['#context']['value']);
  }
  else {
    if (!empty($publish_date)) {
      $pointer = date("Y-m-d\TH:i", $publish_date);
    }
  }

  // Set a label indicating the type of transcript.
  $tx_type_field = ($is_hearing) ? t('Public Hearing') : Html::escape(ucwords(strtolower($session_type)));

  // Trailing slash is needed in the pdf url.
  $variables['pdf_url'] = $transcript_base_url . $pointer_type . '/' . $pointer . '/';
  $variables['node_id'] = $variables['node']->id();
  $title_date = '';
  if (!empty($publish_date)) {
    $title_date = date('F j, Y', $publish_date);
  }
  $variables['transcript_title'] = $tx_type_field . ' - ' . $title_date;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE().
 */
function nysenate_theme_preprocess_node__landing__senators_committees(&$variables) {
  foreach ($variables['content']['field_landing_blocks'] as $key => $block) {
    if (!is_numeric($key)) {
      continue;
    }

    if ($block['#block_content']->bundle() == 'text') {
      if ($block['#block_content']->field_title->value != 'Senate Directories') {
        $variables['header_text'] = $block['field_body_left'][0] ?? NULL;
      }
      else {
        $variables['directories'] = [
          'title' => $block['#block_content']->field_title->value ?? NULL,
          'content' => $block['#block_content']->field_body_left->value ?? NULL,
        ];
      }
    }
    elseif ($block['#block_content']->bundle() == 'views') {
      if ($block['#block_content']->field_title->value == 'Senators List') {
        $variables['senators'] = $block['field_views_ref'][0] ?? NULL;
      }
      elseif ($block['#block_content']->field_title->value == 'Committees List') {
        $variables['committees'] = $block['field_views_ref'][0] ?? NULL;
      }
    }
  }
}

/**
 * Implements hook_preprocess_node_TYPE().
 */
function nysenate_theme_preprocess_node__student_program(&$variables) {
  if (isset($variables['content']['field_image_main'][0])) {
    $variables['field_image_title'] = $variables['content']['field_image_main'][0]['#media']->field_image->title;
  }
  $variables['node_id'] = $variables['node']->id();

  // Get Chapters/Accordion list.
  $chapters = [];
  $accordion_items = $variables['content']['field_accordion'][0]['field_accordion_item'] ?? [];

  foreach ($accordion_items as $key => $item) {
    if (!is_numeric($key)) {
      continue;
    }

    $title = '';
    $body = '';

    if ($item['#paragraph']->field_title->value) {
      $title = $item['#paragraph']->field_title->value;
    }

    if ($item['#paragraph']->field_body->value) {
      $body = $item['#paragraph']->field_body->value;
    }

    $chapters[] = [
      'title' => $title,
      'body' => $body,
    ];

  }
  $variables['chapters'] = $chapters;

  // Get Student Programs Block.
  /** @var \Drupal\block\BlockViewBuilder $view_builder */
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
  $student_programs = [];
  $student_program_block = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->loadByProperties([
      'type' => 'text',
      'field_title' => 'Student Programs Overview Text',
    ]);

  if (is_array($student_program_block)) {
    $student_program_block = reset($student_program_block);
  }

  if (!empty($student_program_block)) {
    $block_content = $view_builder->view($student_program_block);
    $student_programs = $view_builder->build($block_content);
    $variables['student_programs'] = $student_programs;
  }

  $program_links_block = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->loadByProperties([
      'type' => 'text',
      'field_title' => 'Student Programs Program Links',
    ]);

  if (is_array($program_links_block)) {
    $program_links_block = reset($program_links_block);
  }

  if (!empty($program_links_block)) {
    $block_content = $view_builder->view($program_links_block);
    $program_links = $view_builder->build($block_content);
    $variables['program_links'] = $program_links;
  }

  // Get Contact Us Block.
  $contact_us_block = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->loadByProperties([
      'type' => 'text',
      'field_title' => 'Contact Us',
    ]);

  if (is_array($contact_us_block)) {
    $contact_us_block = reset($contact_us_block);
  }

  if (!empty($contact_us_block)) {
    $block_content = $view_builder->view($contact_us_block);
    $contact_us = $view_builder->build($block_content);
    $variables['contact_us'] = $contact_us;
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function nysenate_theme_preprocess_comment(&$variables) {
  $date = $variables['comment']->getCreatedTime();
  $variables['created_relative'] = \Drupal::service('date.formatter')->formatTimeDiffSince($date, ['granularity' => 1]);
}

/**
 * Implements hook_preprocess_tweets().
 */
function nysenate_theme_preprocess_tweets(&$variables) {
  $args = [];
  if (!empty($variables['elements']['#tweets'])) {
    $args = [
      '@username' => $variables['elements']['#tweets'][0]['username'],
    ];
  }

  // Follow link.
  $variables['content']['follow_link'] = [
    '#type' => 'link',
    '#title' => t('Follow'),
    '#url' => Url::fromUri(strtr('https://twitter.com/intent/follow?screen_name=@username', $args)),
  ];

  // Account link.
  $variables['content']['account_link'] = [
    '#type' => 'link',
    '#title' => strtr('@@username', $args),
    '#url' => Url::fromUri(strtr('https://twitter.com/@username', $args)),
  ];
  // Profile image.
  $variables['content']['profile_image'] = [
    '#markup' => strtr('<img src="//pbs.twimg.com/profile_images/1618645642884038657/zT-Caq5N_normal.jpg" width="100" height"100" />', $args),
  ];

  $elements = $variables['elements']['#tweets'];
  foreach ($elements as $element) {
    $created_at = $element['created_at'];
    $date = date(strtotime($created_at));
    $variables['date'] = \Drupal::service('date.formatter')->formatInterval(REQUEST_TIME - $date);
    $variables['content']['items'][] = [
      'body' => $element['text'],
      'week' => $variables['date'],
    ];
  }
}

/**
 * Implements hook_preprocess_webform_confirmation().
 */
function nysenate_theme_preprocess_webform_confirmation(&$variables) {
  $submissions = [];
  if (in_array($variables['webform']->id(),
    ['school_form', 'school_form_thanksgiving', 'school_form_earth_day'])) {
    $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($variables['webform']->id());

    $school_id = $variables['webform_submission']->getData()['school_name'];
    $school = \Drupal::entityTypeManager()->getStorage('node')->load($school_id);
    $grades = $webform->getElementsDecoded()['grade']['#options'];
    $grade = $variables['webform_submission']->getData()['grade'];
    $submission_types = $webform->getElementsDecoded()['submissions']['attach_your_submission']['#element']['submission_type']['#options'] ?? NULL;

    $variables['school_name'] = $school->title->value ?? '';
    $variables['contact_name'] = $variables['webform_submission']->getData()['contact_name'] ?? '';
    $variables['contact_email'] = $variables['webform_submission']->getData()['contact_email'] ?? '';
    $variables['grade'] = $grades[$grade] ?? '';

    $student_submissions = $variables['webform_submission']->getData()['attach_your_submission'] ?? [];

    foreach ($student_submissions as $submission) {
      $file = \Drupal::entityTypeManager()->getStorage('file')->load($submission['student_submission']);
      $file_name = $file->getFilename();
      $submissions[] = [
        'students_name' => $submission['student_name'],
        'category' => $submission_types[$submission['submission_type'] ?? NULL] ?? NULL,
        'attachment' => $file_name,
      ];
    }
  }
  $variables['student_submissions'] = $submissions;
}
